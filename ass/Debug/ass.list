
ass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005124  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800529c  0800529c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800529c  0800529c  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800529c  0800529c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080052a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000009c  08005340  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08005340  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c809  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f5  00000000  00000000  0002c8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0002eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb6  00000000  00000000  00030bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117c0  00000000  00000000  00049b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b296  00000000  00000000  0005b336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e65cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f2c  00000000  00000000  000e661c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005218 	.word	0x08005218

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08005218 	.word	0x08005218

0800014c <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <TM1637_ClkHigh+0x14>)
 8000158:	f002 fb31 	bl	80027be <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40011000 	.word	0x40011000

08000164 <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <TM1637_ClkLow+0x14>)
 8000170:	f002 fb25 	bl	80027be <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40011000 	.word	0x40011000

0800017c <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <TM1637_DataHigh+0x14>)
 8000188:	f002 fb19 	bl	80027be <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40011000 	.word	0x40011000

08000194 <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <TM1637_DataLow+0x14>)
 80001a0:	f002 fb0d 	bl	80027be <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40011000 	.word	0x40011000

080001ac <TM1637_SetBrightness>:
}

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 80001b6:	f000 f80e 	bl	80001d6 <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	3b79      	subs	r3, #121	; 0x79
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 f83a 	bl	800023a <TM1637_WriteByte>
    TM1637_ReadResult();
 80001c6:	f000 f828 	bl	800021a <TM1637_ReadResult>
    TM1637_Stop();
 80001ca:	f000 f811 	bl	80001f0 <TM1637_Stop>
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}

080001d6 <TM1637_Start>:

void TM1637_Start(void)
{
 80001d6:	b580      	push	{r7, lr}
 80001d8:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 80001da:	f7ff ffb7 	bl	800014c <TM1637_ClkHigh>
    TM1637_DataHigh();
 80001de:	f7ff ffcd 	bl	800017c <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 80001e2:	2002      	movs	r0, #2
 80001e4:	f000 f853 	bl	800028e <TM1637_DelayUsec>
    TM1637_DataLow();
 80001e8:	f7ff ffd4 	bl	8000194 <TM1637_DataLow>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <TM1637_Stop>:

void TM1637_Stop(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80001f4:	f7ff ffb6 	bl	8000164 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 80001f8:	2002      	movs	r0, #2
 80001fa:	f000 f848 	bl	800028e <TM1637_DelayUsec>
    TM1637_DataLow();
 80001fe:	f7ff ffc9 	bl	8000194 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 8000202:	2002      	movs	r0, #2
 8000204:	f000 f843 	bl	800028e <TM1637_DelayUsec>
    TM1637_ClkHigh();
 8000208:	f7ff ffa0 	bl	800014c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 800020c:	2002      	movs	r0, #2
 800020e:	f000 f83e 	bl	800028e <TM1637_DelayUsec>
    TM1637_DataHigh();
 8000212:	f7ff ffb3 	bl	800017c <TM1637_DataHigh>
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}

0800021a <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 800021a:	b580      	push	{r7, lr}
 800021c:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 800021e:	f7ff ffa1 	bl	8000164 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 8000222:	2005      	movs	r0, #5
 8000224:	f000 f833 	bl	800028e <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8000228:	f7ff ff90 	bl	800014c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 800022c:	2002      	movs	r0, #2
 800022e:	f000 f82e 	bl	800028e <TM1637_DelayUsec>
    TM1637_ClkLow();
 8000232:	f7ff ff97 	bl	8000164 <TM1637_ClkLow>
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}

0800023a <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b084      	sub	sp, #16
 800023e:	af00      	add	r7, sp, #0
 8000240:	4603      	mov	r3, r0
 8000242:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e019      	b.n	800027e <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 800024a:	f7ff ff8b 	bl	8000164 <TM1637_ClkLow>
		if (b & 0x01) {
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d002      	beq.n	800025e <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8000258:	f7ff ff90 	bl	800017c <TM1637_DataHigh>
 800025c:	e001      	b.n	8000262 <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 800025e:	f7ff ff99 	bl	8000194 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 8000262:	2003      	movs	r0, #3
 8000264:	f000 f813 	bl	800028e <TM1637_DelayUsec>
		b >>= 1;
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	085b      	lsrs	r3, r3, #1
 800026c:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 800026e:	f7ff ff6d 	bl	800014c <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 8000272:	2003      	movs	r0, #3
 8000274:	f000 f80b 	bl	800028e <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	3301      	adds	r3, #1
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2b07      	cmp	r3, #7
 8000282:	dde2      	ble.n	800024a <TM1637_WriteByte+0x10>
	}
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 800028e:	b480      	push	{r7}
 8000290:	b085      	sub	sp, #20
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8000296:	e00d      	b.n	80002b4 <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
 800029c:	e003      	b.n	80002a6 <TM1637_DelayUsec+0x18>
					__NOP();
 800029e:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002ac:	dbf7      	blt.n	800029e <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3b01      	subs	r3, #1
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d1ee      	bne.n	8000298 <TM1637_DelayUsec+0xa>
        }
    }
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <fsm_automatic_1_run>:
 */


#include <fsm_automatic_1.h>

void fsm_automatic_1_run(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	switch (status_ver){
 80002cc:	4b56      	ldr	r3, [pc, #344]	; (8000428 <fsm_automatic_1_run+0x160>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b0e      	cmp	r3, #14
 80002d2:	f200 809a 	bhi.w	800040a <fsm_automatic_1_run+0x142>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <fsm_automatic_1_run+0x14>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	08000319 	.word	0x08000319
 80002e0:	0800040b 	.word	0x0800040b
 80002e4:	0800040b 	.word	0x0800040b
 80002e8:	0800040b 	.word	0x0800040b
 80002ec:	0800040b 	.word	0x0800040b
 80002f0:	0800040b 	.word	0x0800040b
 80002f4:	0800040b 	.word	0x0800040b
 80002f8:	0800040b 	.word	0x0800040b
 80002fc:	0800033f 	.word	0x0800033f
 8000300:	0800036d 	.word	0x0800036d
 8000304:	0800039b 	.word	0x0800039b
 8000308:	0800040b 	.word	0x0800040b
 800030c:	080003c9 	.word	0x080003c9
 8000310:	080003df 	.word	0x080003df
 8000314:	080003f5 	.word	0x080003f5
	case INIT:

		SetOffVer();
 8000318:	f000 fdc2 	bl	8000ea0 <SetOffVer>
		led12 = timered;
 800031c:	4b43      	ldr	r3, [pc, #268]	; (800042c <fsm_automatic_1_run+0x164>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a43      	ldr	r2, [pc, #268]	; (8000430 <fsm_automatic_1_run+0x168>)
 8000322:	6013      	str	r3, [r2, #0]
		status_ver = AUTO_RED;
 8000324:	4b40      	ldr	r3, [pc, #256]	; (8000428 <fsm_automatic_1_run+0x160>)
 8000326:	2208      	movs	r2, #8
 8000328:	601a      	str	r2, [r3, #0]

		setTimer1(timeTimer(timered));
 800032a:	4b40      	ldr	r3, [pc, #256]	; (800042c <fsm_automatic_1_run+0x164>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fb7a 	bl	8000a28 <timeTimer>
 8000334:	4603      	mov	r3, r0
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fbaa 	bl	8001a90 <setTimer1>
		break;
 800033c:	e072      	b.n	8000424 <fsm_automatic_1_run+0x15c>
	case AUTO_RED:
		SetRedVer();
 800033e:	f000 fdf7 	bl	8000f30 <SetRedVer>
		if (timer1_flag == 1){
 8000342:	4b3c      	ldr	r3, [pc, #240]	; (8000434 <fsm_automatic_1_run+0x16c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d161      	bne.n	800040e <fsm_automatic_1_run+0x146>
			status_ver = AUTO_GREEN;
 800034a:	4b37      	ldr	r3, [pc, #220]	; (8000428 <fsm_automatic_1_run+0x160>)
 800034c:	2209      	movs	r2, #9
 800034e:	601a      	str	r2, [r3, #0]
			led12 = timegreen;
 8000350:	4b39      	ldr	r3, [pc, #228]	; (8000438 <fsm_automatic_1_run+0x170>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a36      	ldr	r2, [pc, #216]	; (8000430 <fsm_automatic_1_run+0x168>)
 8000356:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timegreen));
 8000358:	4b37      	ldr	r3, [pc, #220]	; (8000438 <fsm_automatic_1_run+0x170>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fb63 	bl	8000a28 <timeTimer>
 8000362:	4603      	mov	r3, r0
 8000364:	4618      	mov	r0, r3
 8000366:	f001 fb93 	bl	8001a90 <setTimer1>
		}

		break;
 800036a:	e050      	b.n	800040e <fsm_automatic_1_run+0x146>
	case AUTO_GREEN:

		SetGreenVer();
 800036c:	f000 fdf2 	bl	8000f54 <SetGreenVer>
		if (timer1_flag == 1){
 8000370:	4b30      	ldr	r3, [pc, #192]	; (8000434 <fsm_automatic_1_run+0x16c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d14c      	bne.n	8000412 <fsm_automatic_1_run+0x14a>
			status_ver = AUTO_YELLOW;
 8000378:	4b2b      	ldr	r3, [pc, #172]	; (8000428 <fsm_automatic_1_run+0x160>)
 800037a:	220a      	movs	r2, #10
 800037c:	601a      	str	r2, [r3, #0]
			led12 = timeyellow;
 800037e:	4b2f      	ldr	r3, [pc, #188]	; (800043c <fsm_automatic_1_run+0x174>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a2b      	ldr	r2, [pc, #172]	; (8000430 <fsm_automatic_1_run+0x168>)
 8000384:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timeyellow));
 8000386:	4b2d      	ldr	r3, [pc, #180]	; (800043c <fsm_automatic_1_run+0x174>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fb4c 	bl	8000a28 <timeTimer>
 8000390:	4603      	mov	r3, r0
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fb7c 	bl	8001a90 <setTimer1>
		}

		break;
 8000398:	e03b      	b.n	8000412 <fsm_automatic_1_run+0x14a>
	case AUTO_YELLOW:

		SetYellowVer();
 800039a:	f000 fded 	bl	8000f78 <SetYellowVer>
		if (timer1_flag == 1){
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <fsm_automatic_1_run+0x16c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d137      	bne.n	8000416 <fsm_automatic_1_run+0x14e>
			status_ver = AUTO_RED;
 80003a6:	4b20      	ldr	r3, [pc, #128]	; (8000428 <fsm_automatic_1_run+0x160>)
 80003a8:	2208      	movs	r2, #8
 80003aa:	601a      	str	r2, [r3, #0]
			led12 = timered;
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <fsm_automatic_1_run+0x164>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a1f      	ldr	r2, [pc, #124]	; (8000430 <fsm_automatic_1_run+0x168>)
 80003b2:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timered));
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <fsm_automatic_1_run+0x164>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fb35 	bl	8000a28 <timeTimer>
 80003be:	4603      	mov	r3, r0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fb65 	bl	8001a90 <setTimer1>
		}

		break;
 80003c6:	e026      	b.n	8000416 <fsm_automatic_1_run+0x14e>
	case MODIFY_RED:
		if (timer1_flag == 1){
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <fsm_automatic_1_run+0x16c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d124      	bne.n	800041a <fsm_automatic_1_run+0x152>
			BlinkyRedVer();
 80003d0:	f000 fcde 	bl	8000d90 <BlinkyRedVer>
			setTimer1(500);
 80003d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d8:	f001 fb5a 	bl	8001a90 <setTimer1>
		}
		break;
 80003dc:	e01d      	b.n	800041a <fsm_automatic_1_run+0x152>
	case MODIFY_GREEN:
		if (timer1_flag == 1){
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <fsm_automatic_1_run+0x16c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d11b      	bne.n	800041e <fsm_automatic_1_run+0x156>
			BlinkyGreenVer();
 80003e6:	f000 fce5 	bl	8000db4 <BlinkyGreenVer>
			setTimer1(500);
 80003ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ee:	f001 fb4f 	bl	8001a90 <setTimer1>
		}
		break;
 80003f2:	e014      	b.n	800041e <fsm_automatic_1_run+0x156>
	case MODIFY_YELLOW:
		if (timer1_flag == 1){
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <fsm_automatic_1_run+0x16c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d112      	bne.n	8000422 <fsm_automatic_1_run+0x15a>
			BlinkyYellowVer();
 80003fc:	f000 fcec 	bl	8000dd8 <BlinkyYellowVer>
			setTimer1(500);
 8000400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000404:	f001 fb44 	bl	8001a90 <setTimer1>
		}
		break;
 8000408:	e00b      	b.n	8000422 <fsm_automatic_1_run+0x15a>
	default:
		break;
 800040a:	bf00      	nop
 800040c:	e00a      	b.n	8000424 <fsm_automatic_1_run+0x15c>
		break;
 800040e:	bf00      	nop
 8000410:	e008      	b.n	8000424 <fsm_automatic_1_run+0x15c>
		break;
 8000412:	bf00      	nop
 8000414:	e006      	b.n	8000424 <fsm_automatic_1_run+0x15c>
		break;
 8000416:	bf00      	nop
 8000418:	e004      	b.n	8000424 <fsm_automatic_1_run+0x15c>
		break;
 800041a:	bf00      	nop
 800041c:	e002      	b.n	8000424 <fsm_automatic_1_run+0x15c>
		break;
 800041e:	bf00      	nop
 8000420:	e000      	b.n	8000424 <fsm_automatic_1_run+0x15c>
		break;
 8000422:	bf00      	nop
	}

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200000bc 	.word	0x200000bc
 800042c:	2000000c 	.word	0x2000000c
 8000430:	20000018 	.word	0x20000018
 8000434:	2000053c 	.word	0x2000053c
 8000438:	20000010 	.word	0x20000010
 800043c:	20000014 	.word	0x20000014

08000440 <fsm_automatic_2_run>:
 *      Author: pc
 */

#include "fsm_automatic_2.h"

void fsm_automatic_2_run(){
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	switch (status_hor){
 8000444:	4b56      	ldr	r3, [pc, #344]	; (80005a0 <fsm_automatic_2_run+0x160>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b0e      	cmp	r3, #14
 800044a:	f200 809a 	bhi.w	8000582 <fsm_automatic_2_run+0x142>
 800044e:	a201      	add	r2, pc, #4	; (adr r2, 8000454 <fsm_automatic_2_run+0x14>)
 8000450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000454:	08000491 	.word	0x08000491
 8000458:	08000583 	.word	0x08000583
 800045c:	08000583 	.word	0x08000583
 8000460:	08000583 	.word	0x08000583
 8000464:	08000583 	.word	0x08000583
 8000468:	08000583 	.word	0x08000583
 800046c:	08000583 	.word	0x08000583
 8000470:	08000583 	.word	0x08000583
 8000474:	080004b7 	.word	0x080004b7
 8000478:	080004e5 	.word	0x080004e5
 800047c:	08000513 	.word	0x08000513
 8000480:	08000583 	.word	0x08000583
 8000484:	08000541 	.word	0x08000541
 8000488:	08000557 	.word	0x08000557
 800048c:	0800056d 	.word	0x0800056d
	case INIT:
		SetOffHor();
 8000490:	f000 fd84 	bl	8000f9c <SetOffHor>
		led34 = timegreen;
 8000494:	4b43      	ldr	r3, [pc, #268]	; (80005a4 <fsm_automatic_2_run+0x164>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a43      	ldr	r2, [pc, #268]	; (80005a8 <fsm_automatic_2_run+0x168>)
 800049a:	6013      	str	r3, [r2, #0]
		status_hor = AUTO_GREEN;
 800049c:	4b40      	ldr	r3, [pc, #256]	; (80005a0 <fsm_automatic_2_run+0x160>)
 800049e:	2209      	movs	r2, #9
 80004a0:	601a      	str	r2, [r3, #0]
		setTimer2(timeTimer(timegreen));
 80004a2:	4b40      	ldr	r3, [pc, #256]	; (80005a4 <fsm_automatic_2_run+0x164>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 fabe 	bl	8000a28 <timeTimer>
 80004ac:	4603      	mov	r3, r0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fb08 	bl	8001ac4 <setTimer2>
		break;
 80004b4:	e072      	b.n	800059c <fsm_automatic_2_run+0x15c>
	case AUTO_RED :
		SetRedHor();
 80004b6:	f000 fd83 	bl	8000fc0 <SetRedHor>
		if (timer2_flag == 1){
 80004ba:	4b3c      	ldr	r3, [pc, #240]	; (80005ac <fsm_automatic_2_run+0x16c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d161      	bne.n	8000586 <fsm_automatic_2_run+0x146>
			status_hor = AUTO_GREEN;
 80004c2:	4b37      	ldr	r3, [pc, #220]	; (80005a0 <fsm_automatic_2_run+0x160>)
 80004c4:	2209      	movs	r2, #9
 80004c6:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 80004c8:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <fsm_automatic_2_run+0x164>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a36      	ldr	r2, [pc, #216]	; (80005a8 <fsm_automatic_2_run+0x168>)
 80004ce:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timegreen));
 80004d0:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <fsm_automatic_2_run+0x164>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 faa7 	bl	8000a28 <timeTimer>
 80004da:	4603      	mov	r3, r0
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 faf1 	bl	8001ac4 <setTimer2>
		}

		break;
 80004e2:	e050      	b.n	8000586 <fsm_automatic_2_run+0x146>
	case AUTO_GREEN:

		SetGreenHor();
 80004e4:	f000 fd7e 	bl	8000fe4 <SetGreenHor>
		if (timer2_flag == 1){
 80004e8:	4b30      	ldr	r3, [pc, #192]	; (80005ac <fsm_automatic_2_run+0x16c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d14c      	bne.n	800058a <fsm_automatic_2_run+0x14a>
			status_hor = AUTO_YELLOW;
 80004f0:	4b2b      	ldr	r3, [pc, #172]	; (80005a0 <fsm_automatic_2_run+0x160>)
 80004f2:	220a      	movs	r2, #10
 80004f4:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 80004f6:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <fsm_automatic_2_run+0x170>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <fsm_automatic_2_run+0x168>)
 80004fc:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timeyellow));
 80004fe:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <fsm_automatic_2_run+0x170>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fa90 	bl	8000a28 <timeTimer>
 8000508:	4603      	mov	r3, r0
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fada 	bl	8001ac4 <setTimer2>
		}

		break;
 8000510:	e03b      	b.n	800058a <fsm_automatic_2_run+0x14a>
	case AUTO_YELLOW:
		SetYellowHor();
 8000512:	f000 fd79 	bl	8001008 <SetYellowHor>
		if (timer2_flag == 1){
 8000516:	4b25      	ldr	r3, [pc, #148]	; (80005ac <fsm_automatic_2_run+0x16c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d137      	bne.n	800058e <fsm_automatic_2_run+0x14e>
			status_hor = AUTO_RED;
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <fsm_automatic_2_run+0x160>)
 8000520:	2208      	movs	r2, #8
 8000522:	601a      	str	r2, [r3, #0]
			led34 = timered;
 8000524:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <fsm_automatic_2_run+0x174>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <fsm_automatic_2_run+0x168>)
 800052a:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timered));
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <fsm_automatic_2_run+0x174>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fa79 	bl	8000a28 <timeTimer>
 8000536:	4603      	mov	r3, r0
 8000538:	4618      	mov	r0, r3
 800053a:	f001 fac3 	bl	8001ac4 <setTimer2>
		}
		break;
 800053e:	e026      	b.n	800058e <fsm_automatic_2_run+0x14e>
	case MODIFY_RED:
		if (timer2_flag == 1){
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <fsm_automatic_2_run+0x16c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d124      	bne.n	8000592 <fsm_automatic_2_run+0x152>
			BlinkyRedHor();
 8000548:	f000 fc56 	bl	8000df8 <BlinkyRedHor>
			setTimer2(500);
 800054c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000550:	f001 fab8 	bl	8001ac4 <setTimer2>
		}
		break;
 8000554:	e01d      	b.n	8000592 <fsm_automatic_2_run+0x152>
	case MODIFY_GREEN:
		if (timer2_flag == 1){
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <fsm_automatic_2_run+0x16c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d11b      	bne.n	8000596 <fsm_automatic_2_run+0x156>
			BlinkyGreenHor();
 800055e:	f000 fc5d 	bl	8000e1c <BlinkyGreenHor>
			setTimer2(500);
 8000562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000566:	f001 faad 	bl	8001ac4 <setTimer2>
		}
		break;
 800056a:	e014      	b.n	8000596 <fsm_automatic_2_run+0x156>
	case MODIFY_YELLOW:
		if (timer2_flag == 1){
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <fsm_automatic_2_run+0x16c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d112      	bne.n	800059a <fsm_automatic_2_run+0x15a>
			BlinkyYellowHor();
 8000574:	f000 fc64 	bl	8000e40 <BlinkyYellowHor>
			setTimer2(500);
 8000578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057c:	f001 faa2 	bl	8001ac4 <setTimer2>
		}
		break;
 8000580:	e00b      	b.n	800059a <fsm_automatic_2_run+0x15a>
	default:
		break;
 8000582:	bf00      	nop
 8000584:	e00a      	b.n	800059c <fsm_automatic_2_run+0x15c>
		break;
 8000586:	bf00      	nop
 8000588:	e008      	b.n	800059c <fsm_automatic_2_run+0x15c>
		break;
 800058a:	bf00      	nop
 800058c:	e006      	b.n	800059c <fsm_automatic_2_run+0x15c>
		break;
 800058e:	bf00      	nop
 8000590:	e004      	b.n	800059c <fsm_automatic_2_run+0x15c>
		break;
 8000592:	bf00      	nop
 8000594:	e002      	b.n	800059c <fsm_automatic_2_run+0x15c>
		break;
 8000596:	bf00      	nop
 8000598:	e000      	b.n	800059c <fsm_automatic_2_run+0x15c>
		break;
 800059a:	bf00      	nop
	}

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200000c0 	.word	0x200000c0
 80005a4:	20000010 	.word	0x20000010
 80005a8:	2000001c 	.word	0x2000001c
 80005ac:	20000540 	.word	0x20000540
 80005b0:	20000014 	.word	0x20000014
 80005b4:	2000000c 	.word	0x2000000c

080005b8 <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	switch (status_mode){
 80005bc:	4b89      	ldr	r3, [pc, #548]	; (80007e4 <fsm_mode_run+0x22c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	f200 8103 	bhi.w	80007cc <fsm_mode_run+0x214>
 80005c6:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <fsm_mode_run+0x14>)
 80005c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005cc:	080005e1 	.word	0x080005e1
 80005d0:	08000607 	.word	0x08000607
 80005d4:	08000659 	.word	0x08000659
 80005d8:	080006e1 	.word	0x080006e1
 80005dc:	08000769 	.word	0x08000769
	case INIT:
		status_mode = MODE1;
 80005e0:	4b80      	ldr	r3, [pc, #512]	; (80007e4 <fsm_mode_run+0x22c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
		status_ver = INIT;
 80005e6:	4b80      	ldr	r3, [pc, #512]	; (80007e8 <fsm_mode_run+0x230>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
		status_hor = INIT;
 80005ec:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <fsm_mode_run+0x234>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
		status_pedes = Pedes_Off;
 80005f2:	4b7f      	ldr	r3, [pc, #508]	; (80007f0 <fsm_mode_run+0x238>)
 80005f4:	2228      	movs	r2, #40	; 0x28
 80005f6:	601a      	str	r2, [r3, #0]
		status_led7seg = INIT;
 80005f8:	4b7e      	ldr	r3, [pc, #504]	; (80007f4 <fsm_mode_run+0x23c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
		index_led = 0;
 80005fe:	4b7e      	ldr	r3, [pc, #504]	; (80007f8 <fsm_mode_run+0x240>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
		//setTimer1(500);
		break;
 8000604:	e0eb      	b.n	80007de <fsm_mode_run+0x226>
	case MODE1 :

		if (isButtonflag(but1) == 1){
 8000606:	4b7d      	ldr	r3, [pc, #500]	; (80007fc <fsm_mode_run+0x244>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fa1a 	bl	8000a44 <isButtonflag>
 8000610:	4603      	mov	r3, r0
 8000612:	2b01      	cmp	r3, #1
 8000614:	f040 80dc 	bne.w	80007d0 <fsm_mode_run+0x218>
			clearTimer1();
 8000618:	f001 f9fa 	bl	8001a10 <clearTimer1>
			clearTimer2();
 800061c:	f001 fa08 	bl	8001a30 <clearTimer2>
			clearTimer3();
 8000620:	f001 fa16 	bl	8001a50 <clearTimer3>
			status_mode = MODE2;
 8000624:	4b6f      	ldr	r3, [pc, #444]	; (80007e4 <fsm_mode_run+0x22c>)
 8000626:	2202      	movs	r2, #2
 8000628:	601a      	str	r2, [r3, #0]
			SetOffVerHor();// to when blinky, led red ver and hor are the same
 800062a:	f000 fc19 	bl	8000e60 <SetOffVerHor>
			status_ver = MODIFY_RED;
 800062e:	4b6e      	ldr	r3, [pc, #440]	; (80007e8 <fsm_mode_run+0x230>)
 8000630:	220c      	movs	r2, #12
 8000632:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_RED;
 8000634:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <fsm_mode_run+0x234>)
 8000636:	220c      	movs	r2, #12
 8000638:	601a      	str	r2, [r3, #0]
			led12 = MODE2;
 800063a:	4b71      	ldr	r3, [pc, #452]	; (8000800 <fsm_mode_run+0x248>)
 800063c:	2202      	movs	r2, #2
 800063e:	601a      	str	r2, [r3, #0]
			led34 = timered;
 8000640:	4b70      	ldr	r3, [pc, #448]	; (8000804 <fsm_mode_run+0x24c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a70      	ldr	r2, [pc, #448]	; (8000808 <fsm_mode_run+0x250>)
 8000646:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 8000648:	4b6a      	ldr	r3, [pc, #424]	; (80007f4 <fsm_mode_run+0x23c>)
 800064a:	221e      	movs	r2, #30
 800064c:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 800064e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000652:	f001 fa51 	bl	8001af8 <setTimer3>
		}

		break;
 8000656:	e0bb      	b.n	80007d0 <fsm_mode_run+0x218>
	case MODE2:
		if (isButtonflag(but1) == 1){
 8000658:	4b68      	ldr	r3, [pc, #416]	; (80007fc <fsm_mode_run+0x244>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f9f1 	bl	8000a44 <isButtonflag>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d11a      	bne.n	800069e <fsm_mode_run+0xe6>
			clearTimer1();
 8000668:	f001 f9d2 	bl	8001a10 <clearTimer1>
			clearTimer2();
 800066c:	f001 f9e0 	bl	8001a30 <clearTimer2>
			clearTimer3();
 8000670:	f001 f9ee 	bl	8001a50 <clearTimer3>
			status_mode = MODE3;
 8000674:	4b5b      	ldr	r3, [pc, #364]	; (80007e4 <fsm_mode_run+0x22c>)
 8000676:	2203      	movs	r2, #3
 8000678:	601a      	str	r2, [r3, #0]
			SetOffVerHor();
 800067a:	f000 fbf1 	bl	8000e60 <SetOffVerHor>
			status_ver = MODIFY_YELLOW;
 800067e:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <fsm_mode_run+0x230>)
 8000680:	220e      	movs	r2, #14
 8000682:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_YELLOW;
 8000684:	4b59      	ldr	r3, [pc, #356]	; (80007ec <fsm_mode_run+0x234>)
 8000686:	220e      	movs	r2, #14
 8000688:	601a      	str	r2, [r3, #0]
			led12 = MODE3;
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <fsm_mode_run+0x248>)
 800068c:	2203      	movs	r2, #3
 800068e:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 8000690:	4b5e      	ldr	r3, [pc, #376]	; (800080c <fsm_mode_run+0x254>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a5c      	ldr	r2, [pc, #368]	; (8000808 <fsm_mode_run+0x250>)
 8000696:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 8000698:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <fsm_mode_run+0x23c>)
 800069a:	221e      	movs	r2, #30
 800069c:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 800069e:	4b5c      	ldr	r3, [pc, #368]	; (8000810 <fsm_mode_run+0x258>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f9ce 	bl	8000a44 <isButtonflag>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d10b      	bne.n	80006c6 <fsm_mode_run+0x10e>
			led34++;
 80006ae:	4b56      	ldr	r3, [pc, #344]	; (8000808 <fsm_mode_run+0x250>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a54      	ldr	r2, [pc, #336]	; (8000808 <fsm_mode_run+0x250>)
 80006b6:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 80006b8:	4b53      	ldr	r3, [pc, #332]	; (8000808 <fsm_mode_run+0x250>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b63      	cmp	r3, #99	; 0x63
 80006be:	dd02      	ble.n	80006c6 <fsm_mode_run+0x10e>
				led34 = 0;
 80006c0:	4b51      	ldr	r3, [pc, #324]	; (8000808 <fsm_mode_run+0x250>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 80006c6:	4b53      	ldr	r3, [pc, #332]	; (8000814 <fsm_mode_run+0x25c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f9ba 	bl	8000a44 <isButtonflag>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d17e      	bne.n	80007d4 <fsm_mode_run+0x21c>
			timered  = led34;
 80006d6:	4b4c      	ldr	r3, [pc, #304]	; (8000808 <fsm_mode_run+0x250>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a4a      	ldr	r2, [pc, #296]	; (8000804 <fsm_mode_run+0x24c>)
 80006dc:	6013      	str	r3, [r2, #0]
		}
		break;
 80006de:	e079      	b.n	80007d4 <fsm_mode_run+0x21c>
	case MODE3:

		if (isButtonflag(but1) == 1){
 80006e0:	4b46      	ldr	r3, [pc, #280]	; (80007fc <fsm_mode_run+0x244>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f9ad 	bl	8000a44 <isButtonflag>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d11a      	bne.n	8000726 <fsm_mode_run+0x16e>
			clearTimer1();
 80006f0:	f001 f98e 	bl	8001a10 <clearTimer1>
			clearTimer2();
 80006f4:	f001 f99c 	bl	8001a30 <clearTimer2>
			clearTimer3();
 80006f8:	f001 f9aa 	bl	8001a50 <clearTimer3>
			status_mode = MODE4;
 80006fc:	4b39      	ldr	r3, [pc, #228]	; (80007e4 <fsm_mode_run+0x22c>)
 80006fe:	2204      	movs	r2, #4
 8000700:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_GREEN;
 8000702:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <fsm_mode_run+0x230>)
 8000704:	220d      	movs	r2, #13
 8000706:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_GREEN;
 8000708:	4b38      	ldr	r3, [pc, #224]	; (80007ec <fsm_mode_run+0x234>)
 800070a:	220d      	movs	r2, #13
 800070c:	601a      	str	r2, [r3, #0]
			SetOffVerHor();
 800070e:	f000 fba7 	bl	8000e60 <SetOffVerHor>
			led12 = MODE4;
 8000712:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <fsm_mode_run+0x248>)
 8000714:	2204      	movs	r2, #4
 8000716:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 8000718:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <fsm_mode_run+0x260>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a3a      	ldr	r2, [pc, #232]	; (8000808 <fsm_mode_run+0x250>)
 800071e:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 8000720:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <fsm_mode_run+0x23c>)
 8000722:	221e      	movs	r2, #30
 8000724:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000726:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <fsm_mode_run+0x258>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f98a 	bl	8000a44 <isButtonflag>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10b      	bne.n	800074e <fsm_mode_run+0x196>
			led34++;
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <fsm_mode_run+0x250>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a32      	ldr	r2, [pc, #200]	; (8000808 <fsm_mode_run+0x250>)
 800073e:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 8000740:	4b31      	ldr	r3, [pc, #196]	; (8000808 <fsm_mode_run+0x250>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b63      	cmp	r3, #99	; 0x63
 8000746:	dd02      	ble.n	800074e <fsm_mode_run+0x196>
				led34 = 0;
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <fsm_mode_run+0x250>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <fsm_mode_run+0x25c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f976 	bl	8000a44 <isButtonflag>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d13c      	bne.n	80007d8 <fsm_mode_run+0x220>
			timeyellow  = led34;
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <fsm_mode_run+0x250>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a2a      	ldr	r2, [pc, #168]	; (800080c <fsm_mode_run+0x254>)
 8000764:	6013      	str	r3, [r2, #0]
		}

		break;
 8000766:	e037      	b.n	80007d8 <fsm_mode_run+0x220>
	case MODE4:
		if (isButtonflag(but1) == 1){
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <fsm_mode_run+0x244>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f969 	bl	8000a44 <isButtonflag>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	d108      	bne.n	800078a <fsm_mode_run+0x1d2>
			clearTimer1();
 8000778:	f001 f94a 	bl	8001a10 <clearTimer1>
			clearTimer2();
 800077c:	f001 f958 	bl	8001a30 <clearTimer2>
			clearTimer3();
 8000780:	f001 f966 	bl	8001a50 <clearTimer3>
			status_mode = INIT;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <fsm_mode_run+0x22c>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
//			status_ver = INIT;
//			status_hor = INIT;
//			status_led7seg = MODE1_led7seg_1;
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <fsm_mode_run+0x258>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f958 	bl	8000a44 <isButtonflag>
 8000794:	4603      	mov	r3, r0
 8000796:	2b01      	cmp	r3, #1
 8000798:	d10b      	bne.n	80007b2 <fsm_mode_run+0x1fa>
			led34++;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <fsm_mode_run+0x250>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a19      	ldr	r2, [pc, #100]	; (8000808 <fsm_mode_run+0x250>)
 80007a2:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <fsm_mode_run+0x250>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b63      	cmp	r3, #99	; 0x63
 80007aa:	dd02      	ble.n	80007b2 <fsm_mode_run+0x1fa>
				led34 = 0;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <fsm_mode_run+0x250>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <fsm_mode_run+0x25c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f944 	bl	8000a44 <isButtonflag>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10c      	bne.n	80007dc <fsm_mode_run+0x224>
			timegreen = led34;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <fsm_mode_run+0x250>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <fsm_mode_run+0x260>)
 80007c8:	6013      	str	r3, [r2, #0]
		}
		break;
 80007ca:	e007      	b.n	80007dc <fsm_mode_run+0x224>
	default:
		break;
 80007cc:	bf00      	nop
 80007ce:	e006      	b.n	80007de <fsm_mode_run+0x226>
		break;
 80007d0:	bf00      	nop
 80007d2:	e004      	b.n	80007de <fsm_mode_run+0x226>
		break;
 80007d4:	bf00      	nop
 80007d6:	e002      	b.n	80007de <fsm_mode_run+0x226>
		break;
 80007d8:	bf00      	nop
 80007da:	e000      	b.n	80007de <fsm_mode_run+0x226>
		break;
 80007dc:	bf00      	nop
	}


}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000b8 	.word	0x200000b8
 80007e8:	200000bc 	.word	0x200000bc
 80007ec:	200000c0 	.word	0x200000c0
 80007f0:	200000c8 	.word	0x200000c8
 80007f4:	200000c4 	.word	0x200000c4
 80007f8:	200000cc 	.word	0x200000cc
 80007fc:	200000d0 	.word	0x200000d0
 8000800:	20000018 	.word	0x20000018
 8000804:	2000000c 	.word	0x2000000c
 8000808:	2000001c 	.word	0x2000001c
 800080c:	20000014 	.word	0x20000014
 8000810:	20000000 	.word	0x20000000
 8000814:	20000004 	.word	0x20000004
 8000818:	20000010 	.word	0x20000010

0800081c <fsm_mode_led7seg>:
 */

#include "fsm_mode_Led7Seg.h"
//int Ts = 10;
//int count = 1;
void fsm_mode_led7seg(){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

	switch (status_led7seg){
 8000820:	4b7c      	ldr	r3, [pc, #496]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b21      	cmp	r3, #33	; 0x21
 8000826:	f200 80e2 	bhi.w	80009ee <fsm_mode_led7seg+0x1d2>
 800082a:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <fsm_mode_led7seg+0x14>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	080008b9 	.word	0x080008b9
 8000834:	080009ef 	.word	0x080009ef
 8000838:	080009ef 	.word	0x080009ef
 800083c:	080009ef 	.word	0x080009ef
 8000840:	080009ef 	.word	0x080009ef
 8000844:	080009ef 	.word	0x080009ef
 8000848:	080009ef 	.word	0x080009ef
 800084c:	080009ef 	.word	0x080009ef
 8000850:	080009ef 	.word	0x080009ef
 8000854:	080009ef 	.word	0x080009ef
 8000858:	080009ef 	.word	0x080009ef
 800085c:	080009ef 	.word	0x080009ef
 8000860:	080009ef 	.word	0x080009ef
 8000864:	080009ef 	.word	0x080009ef
 8000868:	080009ef 	.word	0x080009ef
 800086c:	080009ef 	.word	0x080009ef
 8000870:	080009ef 	.word	0x080009ef
 8000874:	080009ef 	.word	0x080009ef
 8000878:	080009ef 	.word	0x080009ef
 800087c:	080009ef 	.word	0x080009ef
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008f3 	.word	0x080008f3
 8000888:	08000913 	.word	0x08000913
 800088c:	08000953 	.word	0x08000953
 8000890:	080009ef 	.word	0x080009ef
 8000894:	080009ef 	.word	0x080009ef
 8000898:	080009ef 	.word	0x080009ef
 800089c:	080009ef 	.word	0x080009ef
 80008a0:	080009ef 	.word	0x080009ef
 80008a4:	080009ef 	.word	0x080009ef
 80008a8:	08000973 	.word	0x08000973
 80008ac:	08000993 	.word	0x08000993
 80008b0:	080009b3 	.word	0x080009b3
 80008b4:	080009cf 	.word	0x080009cf
		case INIT:
				status_led7seg = MODE1_led7seg_1;
 80008b8:	4b56      	ldr	r3, [pc, #344]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 80008ba:	2214      	movs	r2, #20
 80008bc:	601a      	str	r2, [r3, #0]
				//updateLedBuffer(led12,led34);
				//SetLed7Seg1On();
				//update7SEG(index_led);
				index_led++;
 80008be:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a54      	ldr	r2, [pc, #336]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 80008c6:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 80008c8:	20fa      	movs	r0, #250	; 0xfa
 80008ca:	f001 f915 	bl	8001af8 <setTimer3>
			break;
 80008ce:	e09f      	b.n	8000a10 <fsm_mode_led7seg+0x1f4>
		case MODE1_led7seg_1:
			if (timer3_flag == 1){
 80008d0:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <fsm_mode_led7seg+0x200>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	f040 808c 	bne.w	80009f2 <fsm_mode_led7seg+0x1d6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_2;
 80008da:	4b4e      	ldr	r3, [pc, #312]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 80008dc:	2215      	movs	r2, #21
 80008de:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 80008e0:	4b4d      	ldr	r3, [pc, #308]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a4c      	ldr	r2, [pc, #304]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 80008e8:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 80008ea:	20fa      	movs	r0, #250	; 0xfa
 80008ec:	f001 f904 	bl	8001af8 <setTimer3>
			}
			break;
 80008f0:	e07f      	b.n	80009f2 <fsm_mode_led7seg+0x1d6>
		case MODE1_led7seg_2:
			if (timer3_flag == 1){
 80008f2:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <fsm_mode_led7seg+0x200>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d17d      	bne.n	80009f6 <fsm_mode_led7seg+0x1da>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_3;
 80008fa:	4b46      	ldr	r3, [pc, #280]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 80008fc:	2216      	movs	r2, #22
 80008fe:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 8000900:	4b45      	ldr	r3, [pc, #276]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	4a44      	ldr	r2, [pc, #272]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 8000908:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(255);
 800090a:	20ff      	movs	r0, #255	; 0xff
 800090c:	f001 f8f4 	bl	8001af8 <setTimer3>
			}
			break;
 8000910:	e071      	b.n	80009f6 <fsm_mode_led7seg+0x1da>
		case MODE1_led7seg_3:

			if (timer3_flag == 1){
 8000912:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <fsm_mode_led7seg+0x200>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d16f      	bne.n	80009fa <fsm_mode_led7seg+0x1de>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_4;
 800091a:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 800091c:	2217      	movs	r2, #23
 800091e:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 8000920:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
//			    	led34--;
//			    	count = 1;
//			    }
//			    else count++;
//				setTimer3(Ts);
				if (led12 - 1 != 0 ) led12--;
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <fsm_mode_led7seg+0x204>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d004      	beq.n	8000938 <fsm_mode_led7seg+0x11c>
 800092e:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <fsm_mode_led7seg+0x204>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	4a3a      	ldr	r2, [pc, #232]	; (8000a20 <fsm_mode_led7seg+0x204>)
 8000936:	6013      	str	r3, [r2, #0]
				if (led34 - 1 != 0 ) led34--;
 8000938:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <fsm_mode_led7seg+0x208>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d004      	beq.n	800094a <fsm_mode_led7seg+0x12e>
 8000940:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <fsm_mode_led7seg+0x208>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	4a37      	ldr	r2, [pc, #220]	; (8000a24 <fsm_mode_led7seg+0x208>)
 8000948:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800094a:	20fa      	movs	r0, #250	; 0xfa
 800094c:	f001 f8d4 	bl	8001af8 <setTimer3>
			}
			break;
 8000950:	e053      	b.n	80009fa <fsm_mode_led7seg+0x1de>
		case MODE1_led7seg_4:
			if (timer3_flag == 1){
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <fsm_mode_led7seg+0x200>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d151      	bne.n	80009fe <fsm_mode_led7seg+0x1e2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_1;
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 800095c:	2214      	movs	r2, #20
 800095e:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 8000960:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a2c      	ldr	r2, [pc, #176]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 8000968:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800096a:	20fa      	movs	r0, #250	; 0xfa
 800096c:	f001 f8c4 	bl	8001af8 <setTimer3>
			}
			break;
 8000970:	e045      	b.n	80009fe <fsm_mode_led7seg+0x1e2>
		case MODE_MODIFY_led7seg_1:
			if (timer3_flag == 1){
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <fsm_mode_led7seg+0x200>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d143      	bne.n	8000a02 <fsm_mode_led7seg+0x1e6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_2;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 800097c:	221f      	movs	r2, #31
 800097e:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 8000988:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800098a:	20fa      	movs	r0, #250	; 0xfa
 800098c:	f001 f8b4 	bl	8001af8 <setTimer3>
			}
			break;
 8000990:	e037      	b.n	8000a02 <fsm_mode_led7seg+0x1e6>
		case MODE_MODIFY_led7seg_2:
			if (timer3_flag == 1){
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <fsm_mode_led7seg+0x200>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d135      	bne.n	8000a06 <fsm_mode_led7seg+0x1ea>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_3;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 800099c:	2220      	movs	r2, #32
 800099e:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 80009a8:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80009aa:	20fa      	movs	r0, #250	; 0xfa
 80009ac:	f001 f8a4 	bl	8001af8 <setTimer3>
			}
			break;
 80009b0:	e029      	b.n	8000a06 <fsm_mode_led7seg+0x1ea>
		case MODE_MODIFY_led7seg_3:
			if (timer3_flag == 1){
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <fsm_mode_led7seg+0x200>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d127      	bne.n	8000a0a <fsm_mode_led7seg+0x1ee>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_4;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 80009bc:	2221      	movs	r2, #33	; 0x21
 80009be:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 80009c6:	20fa      	movs	r0, #250	; 0xfa
 80009c8:	f001 f896 	bl	8001af8 <setTimer3>
			}
			break;
 80009cc:	e01d      	b.n	8000a0a <fsm_mode_led7seg+0x1ee>
		case MODE_MODIFY_led7seg_4:
			if (timer3_flag == 1){
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <fsm_mode_led7seg+0x200>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d11b      	bne.n	8000a0e <fsm_mode_led7seg+0x1f2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_1;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <fsm_mode_led7seg+0x1f8>)
 80009d8:	221e      	movs	r2, #30
 80009da:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <fsm_mode_led7seg+0x1fc>)
 80009e4:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80009e6:	20fa      	movs	r0, #250	; 0xfa
 80009e8:	f001 f886 	bl	8001af8 <setTimer3>
			}
			break;
 80009ec:	e00f      	b.n	8000a0e <fsm_mode_led7seg+0x1f2>
		default:
			break;
 80009ee:	bf00      	nop
 80009f0:	e00e      	b.n	8000a10 <fsm_mode_led7seg+0x1f4>
			break;
 80009f2:	bf00      	nop
 80009f4:	e00c      	b.n	8000a10 <fsm_mode_led7seg+0x1f4>
			break;
 80009f6:	bf00      	nop
 80009f8:	e00a      	b.n	8000a10 <fsm_mode_led7seg+0x1f4>
			break;
 80009fa:	bf00      	nop
 80009fc:	e008      	b.n	8000a10 <fsm_mode_led7seg+0x1f4>
			break;
 80009fe:	bf00      	nop
 8000a00:	e006      	b.n	8000a10 <fsm_mode_led7seg+0x1f4>
			break;
 8000a02:	bf00      	nop
 8000a04:	e004      	b.n	8000a10 <fsm_mode_led7seg+0x1f4>
			break;
 8000a06:	bf00      	nop
 8000a08:	e002      	b.n	8000a10 <fsm_mode_led7seg+0x1f4>
			break;
 8000a0a:	bf00      	nop
 8000a0c:	e000      	b.n	8000a10 <fsm_mode_led7seg+0x1f4>
			break;
 8000a0e:	bf00      	nop
	}
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000c4 	.word	0x200000c4
 8000a18:	200000cc 	.word	0x200000cc
 8000a1c:	20000544 	.word	0x20000544
 8000a20:	20000018 	.word	0x20000018
 8000a24:	2000001c 	.word	0x2000001c

08000a28 <timeTimer>:
int timeyellow = 2;

int led12 = 5;
int led34 = 3;

int timeTimer(int time){
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	return time * 1000;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a36:	fb02 f303 	mul.w	r3, r2, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 8000a4c:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <isButtonflag+0x30>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d106      	bne.n	8000a66 <isButtonflag+0x22>
		flagForButton[index] = 0;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <isButtonflag+0x30>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
		return 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <isButtonflag+0x24>
	}
	return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200000e8 	.word	0x200000e8

08000a78 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d901      	bls.n	8000a8c <is_button_pressed+0x14>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e007      	b.n	8000a9c <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <is_button_pressed+0x30>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bf0c      	ite	eq
 8000a96:	2301      	moveq	r3, #1
 8000a98:	2300      	movne	r3, #0
 8000a9a:	b2db      	uxtb	r3, r3
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200000d4 	.word	0x200000d4

08000aac <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d901      	bls.n	8000ac0 <is_button_pressed_3s+0x14>
 8000abc:	23ff      	movs	r3, #255	; 0xff
 8000abe:	e007      	b.n	8000ad0 <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <is_button_pressed_3s+0x30>)
 8000ac4:	5cd3      	ldrb	r3, [r2, r3]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	bf0c      	ite	eq
 8000aca:	2301      	moveq	r3, #1
 8000acc:	2300      	movne	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	200000e4 	.word	0x200000e4

08000ae0 <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
int counter10S = 0;
void fsm_for_input_processing(uint8_t index ){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4a63      	ldr	r2, [pc, #396]	; (8000c7c <fsm_for_input_processing+0x19c>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	f000 8089 	beq.w	8000c08 <fsm_for_input_processing+0x128>
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	f300 80bb 	bgt.w	8000c72 <fsm_for_input_processing+0x192>
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <fsm_for_input_processing+0x26>
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d037      	beq.n	8000b74 <fsm_for_input_processing+0x94>
					}
				}

			break ;
	}
}
 8000b04:	e0b5      	b.n	8000c72 <fsm_for_input_processing+0x192>
			if( is_button_pressed(index)){
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ffb5 	bl	8000a78 <is_button_pressed>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d011      	beq.n	8000b38 <fsm_for_input_processing+0x58>
				buttonState[index] = BUTTON_PRESSED ;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	4a59      	ldr	r2, [pc, #356]	; (8000c7c <fsm_for_input_processing+0x19c>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4a58      	ldr	r2, [pc, #352]	; (8000c80 <fsm_for_input_processing+0x1a0>)
 8000b20:	2100      	movs	r1, #0
 8000b22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4a56      	ldr	r2, [pc, #344]	; (8000c84 <fsm_for_input_processing+0x1a4>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a55      	ldr	r2, [pc, #340]	; (8000c88 <fsm_for_input_processing+0x1a8>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	54d1      	strb	r1, [r2, r3]
			break ;
 8000b36:	e099      	b.n	8000c6c <fsm_for_input_processing+0x18c>
				if(timer4_flag==1 && status_mode != MODE1){
 8000b38:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <fsm_for_input_processing+0x1ac>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	f040 8095 	bne.w	8000c6c <fsm_for_input_processing+0x18c>
 8000b42:	4b53      	ldr	r3, [pc, #332]	; (8000c90 <fsm_for_input_processing+0x1b0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	f000 8090 	beq.w	8000c6c <fsm_for_input_processing+0x18c>
					counter10S++;
 8000b4c:	4b51      	ldr	r3, [pc, #324]	; (8000c94 <fsm_for_input_processing+0x1b4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a50      	ldr	r2, [pc, #320]	; (8000c94 <fsm_for_input_processing+0x1b4>)
 8000b54:	6013      	str	r3, [r2, #0]
					if(counter10S >= 10){
 8000b56:	4b4f      	ldr	r3, [pc, #316]	; (8000c94 <fsm_for_input_processing+0x1b4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b09      	cmp	r3, #9
 8000b5c:	dd05      	ble.n	8000b6a <fsm_for_input_processing+0x8a>
						counter10S = 0;
 8000b5e:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <fsm_for_input_processing+0x1b4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
						status_mode = INIT;
 8000b64:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <fsm_for_input_processing+0x1b0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
					setTimer4(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6e:	f000 ffdd 	bl	8001b2c <setTimer4>
			break ;
 8000b72:	e07b      	b.n	8000c6c <fsm_for_input_processing+0x18c>
			counter10S = 0;
 8000b74:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <fsm_for_input_processing+0x1b4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
			if (!is_button_pressed(index)){
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff7b 	bl	8000a78 <is_button_pressed>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10d      	bne.n	8000ba4 <fsm_for_input_processing+0xc4>
				buttonState[index] =	 BUTTON_RELEASED ;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4a3c      	ldr	r2, [pc, #240]	; (8000c7c <fsm_for_input_processing+0x19c>)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <fsm_for_input_processing+0x1a8>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4a39      	ldr	r2, [pc, #228]	; (8000c80 <fsm_for_input_processing+0x1a0>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000ba2:	e065      	b.n	8000c70 <fsm_for_input_processing+0x190>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	4a36      	ldr	r2, [pc, #216]	; (8000c80 <fsm_for_input_processing+0x1a0>)
 8000ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bac:	2b63      	cmp	r3, #99	; 0x63
 8000bae:	d809      	bhi.n	8000bc4 <fsm_for_input_processing+0xe4>
						counterForButtonPress1s[index]++;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4a33      	ldr	r2, [pc, #204]	; (8000c80 <fsm_for_input_processing+0x1a0>)
 8000bb4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000bb8:	3201      	adds	r2, #1
 8000bba:	b291      	uxth	r1, r2
 8000bbc:	4a30      	ldr	r2, [pc, #192]	; (8000c80 <fsm_for_input_processing+0x1a0>)
 8000bbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000bc2:	e011      	b.n	8000be8 <fsm_for_input_processing+0x108>
					flagForButtonPress1s[index] = 1;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4a2f      	ldr	r2, [pc, #188]	; (8000c84 <fsm_for_input_processing+0x1a4>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <fsm_for_input_processing+0x1a8>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4a30      	ldr	r2, [pc, #192]	; (8000c98 <fsm_for_input_processing+0x1b8>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4a27      	ldr	r2, [pc, #156]	; (8000c80 <fsm_for_input_processing+0x1a0>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff5e 	bl	8000aac <is_button_pressed_3s>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d03c      	beq.n	8000c70 <fsm_for_input_processing+0x190>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4a20      	ldr	r2, [pc, #128]	; (8000c7c <fsm_for_input_processing+0x19c>)
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <fsm_for_input_processing+0x1a4>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	54d1      	strb	r1, [r2, r3]
			break ;
 8000c06:	e033      	b.n	8000c70 <fsm_for_input_processing+0x190>
			counter10S = 0;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <fsm_for_input_processing+0x1b4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
			if (! is_button_pressed(index)){
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff31 	bl	8000a78 <is_button_pressed>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10d      	bne.n	8000c38 <fsm_for_input_processing+0x158>
				buttonState[index] = BUTTON_RELEASED;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <fsm_for_input_processing+0x19c>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <fsm_for_input_processing+0x1a8>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <fsm_for_input_processing+0x1b8>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000c36:	e01c      	b.n	8000c72 <fsm_for_input_processing+0x192>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <fsm_for_input_processing+0x1b8>)
 8000c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c40:	2b13      	cmp	r3, #19
 8000c42:	d809      	bhi.n	8000c58 <fsm_for_input_processing+0x178>
							counterForButtonAfterPress1s[index]++;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <fsm_for_input_processing+0x1b8>)
 8000c48:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c4c:	3201      	adds	r2, #1
 8000c4e:	b291      	uxth	r1, r2
 8000c50:	4a11      	ldr	r2, [pc, #68]	; (8000c98 <fsm_for_input_processing+0x1b8>)
 8000c52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000c56:	e00c      	b.n	8000c72 <fsm_for_input_processing+0x192>
						flagForButton[index] = 1;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <fsm_for_input_processing+0x1a8>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <fsm_for_input_processing+0x1b8>)
 8000c64:	2100      	movs	r1, #0
 8000c66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000c6a:	e002      	b.n	8000c72 <fsm_for_input_processing+0x192>
			break ;
 8000c6c:	bf00      	nop
 8000c6e:	e000      	b.n	8000c72 <fsm_for_input_processing+0x192>
			break ;
 8000c70:	bf00      	nop
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000fc 	.word	0x200000fc
 8000c80:	200000ec 	.word	0x200000ec
 8000c84:	200000e4 	.word	0x200000e4
 8000c88:	200000e8 	.word	0x200000e8
 8000c8c:	20000548 	.word	0x20000548
 8000c90:	200000b8 	.word	0x200000b8
 8000c94:	20000100 	.word	0x20000100
 8000c98:	200000f4 	.word	0x200000f4

08000c9c <button_reading>:




void button_reading(void){
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	e05f      	b.n	8000d68 <button_reading+0xcc>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4932      	ldr	r1, [pc, #200]	; (8000d78 <button_reading+0xdc>)
 8000cae:	5c89      	ldrb	r1, [r1, r2]
 8000cb0:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <button_reading+0xe0>)
 8000cb2:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4931      	ldr	r1, [pc, #196]	; (8000d80 <button_reading+0xe4>)
 8000cba:	5c89      	ldrb	r1, [r1, r2]
 8000cbc:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <button_reading+0xdc>)
 8000cbe:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d832      	bhi.n	8000d2c <button_reading+0x90>
 8000cc6:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <button_reading+0x30>)
 8000cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ccc:	08000cdd 	.word	0x08000cdd
 8000cd0:	08000cf1 	.word	0x08000cf1
 8000cd4:	08000d05 	.word	0x08000d05
 8000cd8:	08000d19 	.word	0x08000d19
		  case 0: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000cdc:	79fc      	ldrb	r4, [r7, #7]
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4828      	ldr	r0, [pc, #160]	; (8000d84 <button_reading+0xe8>)
 8000ce2:	f001 fd55 	bl	8002790 <HAL_GPIO_ReadPin>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <button_reading+0xe4>)
 8000cec:	551a      	strb	r2, [r3, r4]
			  break;
 8000cee:	e01e      	b.n	8000d2e <button_reading+0x92>
		  case 1: // read data from Button 2
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000cf0:	79fc      	ldrb	r4, [r7, #7]
 8000cf2:	2140      	movs	r1, #64	; 0x40
 8000cf4:	4824      	ldr	r0, [pc, #144]	; (8000d88 <button_reading+0xec>)
 8000cf6:	f001 fd4b 	bl	8002790 <HAL_GPIO_ReadPin>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <button_reading+0xe4>)
 8000d00:	551a      	strb	r2, [r3, r4]
			  break;
 8000d02:	e014      	b.n	8000d2e <button_reading+0x92>
		  case 2: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000d04:	79fc      	ldrb	r4, [r7, #7]
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	481f      	ldr	r0, [pc, #124]	; (8000d88 <button_reading+0xec>)
 8000d0a:	f001 fd41 	bl	8002790 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <button_reading+0xe4>)
 8000d14:	551a      	strb	r2, [r3, r4]
			  break;
 8000d16:	e00a      	b.n	8000d2e <button_reading+0x92>
		  case 3: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_P_GPIO_Port, BUTTON_P_Pin);
 8000d18:	79fc      	ldrb	r4, [r7, #7]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4819      	ldr	r0, [pc, #100]	; (8000d84 <button_reading+0xe8>)
 8000d1e:	f001 fd37 	bl	8002790 <HAL_GPIO_ReadPin>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <button_reading+0xe4>)
 8000d28:	551a      	strb	r2, [r3, r4]
			  break;
 8000d2a:	e000      	b.n	8000d2e <button_reading+0x92>
		  default:
			  break;
 8000d2c:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <button_reading+0xe4>)
 8000d32:	5cd2      	ldrb	r2, [r2, r3]
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4910      	ldr	r1, [pc, #64]	; (8000d78 <button_reading+0xdc>)
 8000d38:	5ccb      	ldrb	r3, [r1, r3]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d111      	bne.n	8000d62 <button_reading+0xc6>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <button_reading+0xdc>)
 8000d42:	5cd2      	ldrb	r2, [r2, r3]
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	490d      	ldr	r1, [pc, #52]	; (8000d7c <button_reading+0xe0>)
 8000d48:	5ccb      	ldrb	r3, [r1, r3]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d109      	bne.n	8000d62 <button_reading+0xc6>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	490a      	ldr	r1, [pc, #40]	; (8000d7c <button_reading+0xe0>)
 8000d54:	5c89      	ldrb	r1, [r1, r2]
 8000d56:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <button_reading+0xf0>)
 8000d58:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff febf 	bl	8000ae0 <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	3301      	adds	r3, #1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d99c      	bls.n	8000ca8 <button_reading+0xc>
		  }

	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	200000dc 	.word	0x200000dc
 8000d7c:	200000e0 	.word	0x200000e0
 8000d80:	200000d8 	.word	0x200000d8
 8000d84:	40010800 	.word	0x40010800
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	200000d4 	.word	0x200000d4

08000d90 <BlinkyRedVer>:
//	led_buffer[1] = led1_2 % 10;
//	led_buffer[2] = led3_4 / 10;
//	led_buffer[3] = led3_4 % 10;
//}

void BlinkyRedVer(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);

//	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
	//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <BlinkyRedVer+0x20>)
 8000d9c:	f001 fd0f 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8000da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <BlinkyRedVer+0x20>)
 8000da6:	f001 fd22 	bl	80027ee <HAL_GPIO_TogglePin>

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40011000 	.word	0x40011000

08000db4 <BlinkyGreenVer>:
void BlinkyGreenVer(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8000db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <BlinkyGreenVer+0x20>)
 8000dbe:	f001 fd16 	bl	80027ee <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <BlinkyGreenVer+0x20>)
 8000dca:	f001 fcf8 	bl	80027be <HAL_GPIO_WritePin>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40011000 	.word	0x40011000

08000dd8 <BlinkyYellowVer>:
void BlinkyYellowVer(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <BlinkyYellowVer+0x1c>)
 8000de2:	f001 fd04 	bl	80027ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8000de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dea:	4802      	ldr	r0, [pc, #8]	; (8000df4 <BlinkyYellowVer+0x1c>)
 8000dec:	f001 fcff 	bl	80027ee <HAL_GPIO_TogglePin>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40011000 	.word	0x40011000

08000df8 <BlinkyRedHor>:

void BlinkyRedHor(){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_TogglePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <BlinkyRedHor+0x1c>)
 8000e02:	f001 fcdc 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8000e06:	2101      	movs	r1, #1
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <BlinkyRedHor+0x20>)
 8000e0a:	f001 fcf0 	bl	80027ee <HAL_GPIO_TogglePin>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <BlinkyGreenHor>:
void BlinkyGreenHor(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000e20:	2110      	movs	r1, #16
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <BlinkyGreenHor+0x1c>)
 8000e24:	f001 fce3 	bl	80027ee <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <BlinkyGreenHor+0x20>)
 8000e2e:	f001 fcc6 	bl	80027be <HAL_GPIO_WritePin>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	40010c00 	.word	0x40010c00

08000e40 <BlinkyYellowHor>:
void BlinkyYellowHor(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000e44:	2110      	movs	r1, #16
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <BlinkyYellowHor+0x18>)
 8000e48:	f001 fcd1 	bl	80027ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <BlinkyYellowHor+0x1c>)
 8000e50:	f001 fccd 	bl	80027ee <HAL_GPIO_TogglePin>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00

08000e60 <SetOffVerHor>:
//	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
//	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
//	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
//}

void SetOffVerHor(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6a:	480a      	ldr	r0, [pc, #40]	; (8000e94 <SetOffVerHor+0x34>)
 8000e6c:	f001 fca7 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <SetOffVerHor+0x34>)
 8000e78:	f001 fca1 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <SetOffVerHor+0x38>)
 8000e82:	f001 fc9c 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4804      	ldr	r0, [pc, #16]	; (8000e9c <SetOffVerHor+0x3c>)
 8000e8c:	f001 fc97 	bl	80027be <HAL_GPIO_WritePin>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40011000 	.word	0x40011000
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	40010c00 	.word	0x40010c00

08000ea0 <SetOffVer>:


void SetOffVer(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <SetOffVer+0x20>)
 8000eac:	f001 fc87 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <SetOffVer+0x20>)
 8000eb8:	f001 fc81 	bl	80027be <HAL_GPIO_WritePin>

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40011000 	.word	0x40011000

08000ec4 <SetPedesRed>:

void SetPedesRed(){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <SetPedesRed+0x20>)
 8000ed0:	f001 fc75 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eda:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <SetPedesRed+0x20>)
 8000edc:	f001 fc6f 	bl	80027be <HAL_GPIO_WritePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <SetPedesGreen>:
void SetPedesGreen(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <SetPedesGreen+0x20>)
 8000ef4:	f001 fc63 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efe:	4802      	ldr	r0, [pc, #8]	; (8000f08 <SetPedesGreen+0x20>)
 8000f00:	f001 fc5d 	bl	80027be <HAL_GPIO_WritePin>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <SetPedesOff>:

void SetPedesOff(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <SetPedesOff+0x20>)
 8000f18:	f001 fc51 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f22:	4802      	ldr	r0, [pc, #8]	; (8000f2c <SetPedesOff+0x20>)
 8000f24:	f001 fc4b 	bl	80027be <HAL_GPIO_WritePin>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40010c00 	.word	0x40010c00

08000f30 <SetRedVer>:

void SetRedVer(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <SetRedVer+0x20>)
 8000f3c:	f001 fc3f 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f46:	4802      	ldr	r0, [pc, #8]	; (8000f50 <SetRedVer+0x20>)
 8000f48:	f001 fc39 	bl	80027be <HAL_GPIO_WritePin>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40011000 	.word	0x40011000

08000f54 <SetGreenVer>:

void SetGreenVer(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <SetGreenVer+0x20>)
 8000f60:	f001 fc2d 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6a:	4802      	ldr	r0, [pc, #8]	; (8000f74 <SetGreenVer+0x20>)
 8000f6c:	f001 fc27 	bl	80027be <HAL_GPIO_WritePin>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40011000 	.word	0x40011000

08000f78 <SetYellowVer>:

void SetYellowVer(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <SetYellowVer+0x20>)
 8000f84:	f001 fc1b 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	4802      	ldr	r0, [pc, #8]	; (8000f98 <SetYellowVer+0x20>)
 8000f90:	f001 fc15 	bl	80027be <HAL_GPIO_WritePin>
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40011000 	.word	0x40011000

08000f9c <SetOffHor>:


void SetOffHor(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <SetOffHor+0x1c>)
 8000fa6:	f001 fc0a 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2101      	movs	r1, #1
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <SetOffHor+0x20>)
 8000fb0:	f001 fc05 	bl	80027be <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <SetRedHor>:

void SetRedHor(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <SetRedHor+0x1c>)
 8000fca:	f001 fbf8 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <SetRedHor+0x20>)
 8000fd4:	f001 fbf3 	bl	80027be <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <SetGreenHor>:

void SetGreenHor(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2110      	movs	r1, #16
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <SetGreenHor+0x1c>)
 8000fee:	f001 fbe6 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <SetGreenHor+0x20>)
 8000ff8:	f001 fbe1 	bl	80027be <HAL_GPIO_WritePin>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40010800 	.word	0x40010800
 8001004:	40010c00 	.word	0x40010c00

08001008 <SetYellowHor>:

void SetYellowHor(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <SetYellowHor+0x1c>)
 8001012:	f001 fbd4 	bl	80027be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2101      	movs	r1, #1
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <SetYellowHor+0x20>)
 800101c:	f001 fbcf 	bl	80027be <HAL_GPIO_WritePin>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40010800 	.word	0x40010800
 8001028:	40010c00 	.word	0x40010c00

0800102c <Buzzer_On>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char str[50];
int increase = 30;
//int delay = 380;
void Buzzer_On(){
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
		if (timer6_flag == 1){
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <Buzzer_On+0x70>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d12e      	bne.n	8001096 <Buzzer_On+0x6a>
			dutycycle += 1000 / ((timered)*5);
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <Buzzer_On+0x74>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001046:	fb92 f2f3 	sdiv	r2, r2, r3
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <Buzzer_On+0x78>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <Buzzer_On+0x78>)
 8001052:	6013      	str	r3, [r2, #0]
			if (dutycycle > 1000) dutycycle = 1000;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <Buzzer_On+0x78>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800105c:	dd03      	ble.n	8001066 <Buzzer_On+0x3a>
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <Buzzer_On+0x78>)
 8001060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001064:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <Buzzer_On+0x78>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <Buzzer_On+0x7c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
//			HAL_Delay(delay);
			setTimer6(delay);
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <Buzzer_On+0x80>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fd8d 	bl	8001b94 <setTimer6>
			delay -= increase;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <Buzzer_On+0x80>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <Buzzer_On+0x84>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	4a09      	ldr	r2, [pc, #36]	; (80010ac <Buzzer_On+0x80>)
 8001086:	6013      	str	r3, [r2, #0]
			if (delay <= 0) delay = 10;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <Buzzer_On+0x80>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	dc02      	bgt.n	8001096 <Buzzer_On+0x6a>
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <Buzzer_On+0x80>)
 8001092:	220a      	movs	r2, #10
 8001094:	601a      	str	r2, [r3, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000550 	.word	0x20000550
 80010a0:	2000000c 	.word	0x2000000c
 80010a4:	2000020c 	.word	0x2000020c
 80010a8:	2000014c 	.word	0x2000014c
 80010ac:	20000024 	.word	0x20000024
 80010b0:	20000020 	.word	0x20000020

080010b4 <Buzzer_Off>:
void Buzzer_Off(){
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	dutycycle = 0;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <Buzzer_Off+0x1c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <Buzzer_Off+0x1c>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <Buzzer_Off+0x20>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	2000020c 	.word	0x2000020c
 80010d4:	2000014c 	.word	0x2000014c

080010d8 <Uart_transmit>:
void Uart_transmit(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d#","!7SEG:",led12), 1000);
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <Uart_transmit+0x28>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a08      	ldr	r2, [pc, #32]	; (8001104 <Uart_transmit+0x2c>)
 80010e2:	4909      	ldr	r1, [pc, #36]	; (8001108 <Uart_transmit+0x30>)
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <Uart_transmit+0x34>)
 80010e6:	f003 fc1d 	bl	8004924 <siprintf>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	4906      	ldr	r1, [pc, #24]	; (800110c <Uart_transmit+0x34>)
 80010f4:	4806      	ldr	r0, [pc, #24]	; (8001110 <Uart_transmit+0x38>)
 80010f6:	f002 ff58 	bl	8003faa <HAL_UART_Transmit>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000018 	.word	0x20000018
 8001104:	08005230 	.word	0x08005230
 8001108:	08005238 	.word	0x08005238
 800110c:	200001d8 	.word	0x200001d8
 8001110:	20000194 	.word	0x20000194

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 ff96 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f870 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f000 f99c 	bl	800145c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001124:	f000 f8ae 	bl	8001284 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001128:	f000 f8f8 	bl	800131c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800112c:	f000 f96c 	bl	8001408 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001130:	4828      	ldr	r0, [pc, #160]	; (80011d4 <main+0xc0>)
 8001132:	f001 ffdf 	bl	80030f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001136:	2100      	movs	r1, #0
 8001138:	4827      	ldr	r0, [pc, #156]	; (80011d8 <main+0xc4>)
 800113a:	f002 f885 	bl	8003248 <HAL_TIM_PWM_Start>

  status_mode = INIT;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <main+0xc8>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

  setTimer1(1000);
 8001144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001148:	f000 fca2 	bl	8001a90 <setTimer1>
  setTimer2(1000);
 800114c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001150:	f000 fcb8 	bl	8001ac4 <setTimer2>
  setTimer3(1000);
 8001154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001158:	f000 fcce 	bl	8001af8 <setTimer3>
  setTimer4(1000);
 800115c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001160:	f000 fce4 	bl	8001b2c <setTimer4>
  setTimer5(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f000 fcfa 	bl	8001b60 <setTimer5>
  setTimer6(1000);
 800116c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001170:	f000 fd10 	bl	8001b94 <setTimer6>

  SCH_Init();
 8001174:	f000 fabe 	bl	80016f4 <SCH_Init>
  SCH_Add_Task(timerRun, 0, 10);
 8001178:	220a      	movs	r2, #10
 800117a:	2100      	movs	r1, #0
 800117c:	4818      	ldr	r0, [pc, #96]	; (80011e0 <main+0xcc>)
 800117e:	f000 fac5 	bl	800170c <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 10);
 8001182:	220a      	movs	r2, #10
 8001184:	2100      	movs	r1, #0
 8001186:	4817      	ldr	r0, [pc, #92]	; (80011e4 <main+0xd0>)
 8001188:	f000 fac0 	bl	800170c <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_run, 0 , 10);
 800118c:	220a      	movs	r2, #10
 800118e:	2100      	movs	r1, #0
 8001190:	4815      	ldr	r0, [pc, #84]	; (80011e8 <main+0xd4>)
 8001192:	f000 fabb 	bl	800170c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_1_run, 0 , 10);
 8001196:	220a      	movs	r2, #10
 8001198:	2100      	movs	r1, #0
 800119a:	4814      	ldr	r0, [pc, #80]	; (80011ec <main+0xd8>)
 800119c:	f000 fab6 	bl	800170c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_2_run, 0 , 10);
 80011a0:	220a      	movs	r2, #10
 80011a2:	2100      	movs	r1, #0
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <main+0xdc>)
 80011a6:	f000 fab1 	bl	800170c <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_led7seg, 0, 10);
 80011aa:	220a      	movs	r2, #10
 80011ac:	2100      	movs	r1, #0
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <main+0xe0>)
 80011b0:	f000 faac 	bl	800170c <SCH_Add_Task>
  SCH_Add_Task(pedestrian_cramble, 0, 10);
 80011b4:	220a      	movs	r2, #10
 80011b6:	2100      	movs	r1, #0
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <main+0xe4>)
 80011ba:	f000 faa7 	bl	800170c <SCH_Add_Task>
  SCH_Add_Task(Uart_transmit, 0, 10);
 80011be:	220a      	movs	r2, #10
 80011c0:	2100      	movs	r1, #0
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <main+0xe8>)
 80011c4:	f000 faa2 	bl	800170c <SCH_Add_Task>

  TM1637_SetBrightness(7);
 80011c8:	2007      	movs	r0, #7
 80011ca:	f7fe ffef 	bl	80001ac <TM1637_SetBrightness>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80011ce:	f000 fb5d 	bl	800188c <SCH_Dispatch_Tasks>
 80011d2:	e7fc      	b.n	80011ce <main+0xba>
 80011d4:	20000104 	.word	0x20000104
 80011d8:	2000014c 	.word	0x2000014c
 80011dc:	200000b8 	.word	0x200000b8
 80011e0:	08001bc9 	.word	0x08001bc9
 80011e4:	08000c9d 	.word	0x08000c9d
 80011e8:	080005b9 	.word	0x080005b9
 80011ec:	080002c9 	.word	0x080002c9
 80011f0:	08000441 	.word	0x08000441
 80011f4:	0800081d 	.word	0x0800081d
 80011f8:	080015c1 	.word	0x080015c1
 80011fc:	080010d9 	.word	0x080010d9

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b090      	sub	sp, #64	; 0x40
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2228      	movs	r2, #40	; 0x28
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fb80 	bl	8004914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001226:	2301      	movs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2310      	movs	r3, #16
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001236:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4618      	mov	r0, r3
 8001242:	f001 faed 	bl	8002820 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800124c:	f000 f9b2 	bl	80015b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2102      	movs	r1, #2
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fd5a 	bl	8002d24 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001276:	f000 f99d 	bl	80015b4 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3740      	adds	r7, #64	; 0x40
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_TIM2_Init+0x94>)
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_TIM2_Init+0x94>)
 80012aa:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80012ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_TIM2_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_TIM2_Init+0x94>)
 80012b8:	2209      	movs	r2, #9
 80012ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_TIM2_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_TIM2_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_TIM2_Init+0x94>)
 80012ca:	f001 fec3 	bl	8003054 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012d4:	f000 f96e 	bl	80015b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_TIM2_Init+0x94>)
 80012e6:	f002 fa17 	bl	8003718 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f0:	f000 f960 	bl	80015b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_TIM2_Init+0x94>)
 8001302:	f002 fd95 	bl	8003e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800130c:	f000 f952 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000104 	.word	0x20000104

0800131c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <MX_TIM3_Init+0xe4>)
 800134e:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001350:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001354:	223f      	movs	r2, #63	; 0x3f
 8001356:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <MX_TIM3_Init+0xe4>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001360:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001364:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <MX_TIM3_Init+0xe4>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001372:	4823      	ldr	r0, [pc, #140]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001374:	f001 fe6e 	bl	8003054 <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800137e:	f000 f919 	bl	80015b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138c:	4619      	mov	r1, r3
 800138e:	481c      	ldr	r0, [pc, #112]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001390:	f002 f9c2 	bl	8003718 <HAL_TIM_ConfigClockSource>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800139a:	f000 f90b 	bl	80015b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013a0:	f001 fefa 	bl	8003198 <HAL_TIM_PWM_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013aa:	f000 f903 	bl	80015b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	4619      	mov	r1, r3
 80013bc:	4810      	ldr	r0, [pc, #64]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013be:	f002 fd37 	bl	8003e30 <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013c8:	f000 f8f4 	bl	80015b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013cc:	2360      	movs	r3, #96	; 0x60
 80013ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013e4:	f002 f8da 	bl	800359c <HAL_TIM_PWM_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013ee:	f000 f8e1 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013f2:	4803      	ldr	r0, [pc, #12]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013f4:	f000 fcec 	bl	8001dd0 <HAL_TIM_MspPostInit>

}
 80013f8:	bf00      	nop
 80013fa:	3738      	adds	r7, #56	; 0x38
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000014c 	.word	0x2000014c
 8001404:	40000400 	.word	0x40000400

08001408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_USART2_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001414:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001440:	f002 fd66 	bl	8003f10 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f000 f8b3 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000194 	.word	0x20000194
 8001458:	40004400 	.word	0x40004400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <MX_GPIO_Init+0x148>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a4b      	ldr	r2, [pc, #300]	; (80015a4 <MX_GPIO_Init+0x148>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <MX_GPIO_Init+0x148>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <MX_GPIO_Init+0x148>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a45      	ldr	r2, [pc, #276]	; (80015a4 <MX_GPIO_Init+0x148>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <MX_GPIO_Init+0x148>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <MX_GPIO_Init+0x148>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <MX_GPIO_Init+0x148>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <MX_GPIO_Init+0x148>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2110      	movs	r1, #16
 80014bc:	483a      	ldr	r0, [pc, #232]	; (80015a8 <MX_GPIO_Init+0x14c>)
 80014be:	f001 f97e 	bl	80027be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f240 3101 	movw	r1, #769	; 0x301
 80014c8:	4838      	ldr	r0, [pc, #224]	; (80015ac <MX_GPIO_Init+0x150>)
 80014ca:	f001 f978 	bl	80027be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLK_Pin|DATA_Pin|LIGHT1_B_Pin|LIGHT1_A_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80014d4:	4836      	ldr	r0, [pc, #216]	; (80015b0 <MX_GPIO_Init+0x154>)
 80014d6:	f001 f972 	bl	80027be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_P_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_P_Pin|BUTTON_1_Pin;
 80014da:	2303      	movs	r3, #3
 80014dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4619      	mov	r1, r3
 80014ec:	482e      	ldr	r0, [pc, #184]	; (80015a8 <MX_GPIO_Init+0x14c>)
 80014ee:	f000 ffcb 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIGHT2_A_Pin */
  GPIO_InitStruct.Pin = LIGHT2_A_Pin;
 80014f2:	2310      	movs	r3, #16
 80014f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2302      	movs	r3, #2
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIGHT2_A_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4619      	mov	r1, r3
 8001508:	4827      	ldr	r0, [pc, #156]	; (80015a8 <MX_GPIO_Init+0x14c>)
 800150a:	f000 ffbd 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT2_B_Pin P_LIGHT_A_Pin P_LIGHT_B_Pin */
  GPIO_InitStruct.Pin = LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin;
 800150e:	f240 3301 	movw	r3, #769	; 0x301
 8001512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2302      	movs	r3, #2
 800151e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4619      	mov	r1, r3
 8001526:	4821      	ldr	r0, [pc, #132]	; (80015ac <MX_GPIO_Init+0x150>)
 8001528:	f000 ffae 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001532:	2312      	movs	r3, #18
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	481a      	ldr	r0, [pc, #104]	; (80015ac <MX_GPIO_Init+0x150>)
 8001542:	f000 ffa1 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin;
 8001546:	23c0      	movs	r3, #192	; 0xc0
 8001548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	4815      	ldr	r0, [pc, #84]	; (80015b0 <MX_GPIO_Init+0x154>)
 800155a:	f000 ff95 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 800155e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4619      	mov	r1, r3
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <MX_GPIO_Init+0x154>)
 8001578:	f000 ff86 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT1_B_Pin LIGHT1_A_Pin */
  GPIO_InitStruct.Pin = LIGHT1_B_Pin|LIGHT1_A_Pin;
 800157c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2302      	movs	r3, #2
 800158c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4619      	mov	r1, r3
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_GPIO_Init+0x154>)
 8001596:	f000 ff77 	bl	8002488 <HAL_GPIO_Init>

}
 800159a:	bf00      	nop
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010800 	.word	0x40010800
 80015ac:	40010c00 	.word	0x40010c00
 80015b0:	40011000 	.word	0x40011000

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	e7fe      	b.n	80015bc <Error_Handler+0x8>
	...

080015c0 <pedestrian_cramble>:
//int counter_Pedes_On = 0;
//
int dutycycle = 0;
int delay = 380;
int count = 0;
void pedestrian_cramble(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	switch (status_pedes){
 80015c4:	4b45      	ldr	r3, [pc, #276]	; (80016dc <pedestrian_cramble+0x11c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b29      	cmp	r3, #41	; 0x29
 80015ca:	d037      	beq.n	800163c <pedestrian_cramble+0x7c>
 80015cc:	2b29      	cmp	r3, #41	; 0x29
 80015ce:	dc7c      	bgt.n	80016ca <pedestrian_cramble+0x10a>
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	d054      	beq.n	800167e <pedestrian_cramble+0xbe>
 80015d4:	2b28      	cmp	r3, #40	; 0x28
 80015d6:	d178      	bne.n	80016ca <pedestrian_cramble+0x10a>
	case Pedes_Off:
		SetPedesOff();
 80015d8:	f7ff fc98 	bl	8000f0c <SetPedesOff>
		Buzzer_Off();
 80015dc:	f7ff fd6a 	bl	80010b4 <Buzzer_Off>
		if (isButtonflag(butp) == 1){
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <pedestrian_cramble+0x120>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fa2d 	bl	8000a44 <isButtonflag>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d16e      	bne.n	80016ce <pedestrian_cramble+0x10e>
			count = 0;
 80015f0:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <pedestrian_cramble+0x124>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
			if (status_ver == AUTO_RED){
 80015f6:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <pedestrian_cramble+0x128>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d113      	bne.n	8001626 <pedestrian_cramble+0x66>
				status_pedes = Pedes_Go;
 80015fe:	4b37      	ldr	r3, [pc, #220]	; (80016dc <pedestrian_cramble+0x11c>)
 8001600:	2229      	movs	r2, #41	; 0x29
 8001602:	601a      	str	r2, [r3, #0]
				dutycycle = 0;
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <pedestrian_cramble+0x12c>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
				delay = 380;
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <pedestrian_cramble+0x130>)
 800160c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001610:	601a      	str	r2, [r3, #0]
				clearTimer6();
 8001612:	f000 fa2d 	bl	8001a70 <clearTimer6>
				Buzzer_On();
 8001616:	f7ff fd09 	bl	800102c <Buzzer_On>
				count++;
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <pedestrian_cramble+0x124>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a30      	ldr	r2, [pc, #192]	; (80016e4 <pedestrian_cramble+0x124>)
 8001622:	6013      	str	r3, [r2, #0]
				status_pedes = Pedes_Stop;
				Buzzer_Off();
				count++;
			}
		}
		break;
 8001624:	e053      	b.n	80016ce <pedestrian_cramble+0x10e>
				status_pedes = Pedes_Stop;
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <pedestrian_cramble+0x11c>)
 8001628:	2220      	movs	r2, #32
 800162a:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 800162c:	f7ff fd42 	bl	80010b4 <Buzzer_Off>
				count++;
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <pedestrian_cramble+0x124>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a2b      	ldr	r2, [pc, #172]	; (80016e4 <pedestrian_cramble+0x124>)
 8001638:	6013      	str	r3, [r2, #0]
		break;
 800163a:	e048      	b.n	80016ce <pedestrian_cramble+0x10e>
	case Pedes_Go:
		SetPedesGreen();
 800163c:	f7ff fc54 	bl	8000ee8 <SetPedesGreen>
		Buzzer_On();
 8001640:	f7ff fcf4 	bl	800102c <Buzzer_On>
		if (status_ver == AUTO_GREEN || status_ver == AUTO_YELLOW){
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <pedestrian_cramble+0x128>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b09      	cmp	r3, #9
 800164a:	d003      	beq.n	8001654 <pedestrian_cramble+0x94>
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <pedestrian_cramble+0x128>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b0a      	cmp	r3, #10
 8001652:	d13e      	bne.n	80016d2 <pedestrian_cramble+0x112>
			if (count >= Ncycle_Pe_off * 2) { // 2 cycle => Off
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <pedestrian_cramble+0x124>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b03      	cmp	r3, #3
 800165a:	dd05      	ble.n	8001668 <pedestrian_cramble+0xa8>
				status_pedes = Pedes_Off;
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <pedestrian_cramble+0x11c>)
 800165e:	2228      	movs	r2, #40	; 0x28
 8001660:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 8001662:	f7ff fd27 	bl	80010b4 <Buzzer_Off>
				status_pedes = Pedes_Stop;
				Buzzer_Off();
				count++;
			}
		}
		break;
 8001666:	e034      	b.n	80016d2 <pedestrian_cramble+0x112>
				status_pedes = Pedes_Stop;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <pedestrian_cramble+0x11c>)
 800166a:	2220      	movs	r2, #32
 800166c:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 800166e:	f7ff fd21 	bl	80010b4 <Buzzer_Off>
				count++;
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <pedestrian_cramble+0x124>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <pedestrian_cramble+0x124>)
 800167a:	6013      	str	r3, [r2, #0]
		break;
 800167c:	e029      	b.n	80016d2 <pedestrian_cramble+0x112>
	case Pedes_Stop:
		SetPedesRed();
 800167e:	f7ff fc21 	bl	8000ec4 <SetPedesRed>
		Buzzer_Off();
 8001682:	f7ff fd17 	bl	80010b4 <Buzzer_Off>
		if (status_ver == AUTO_RED){
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <pedestrian_cramble+0x128>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b08      	cmp	r3, #8
 800168c:	d123      	bne.n	80016d6 <pedestrian_cramble+0x116>
			if (count >= Ncycle_Pe_off * 2) {//2 cycle => Off
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <pedestrian_cramble+0x124>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b03      	cmp	r3, #3
 8001694:	dd05      	ble.n	80016a2 <pedestrian_cramble+0xe2>
				status_pedes = Pedes_Off;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <pedestrian_cramble+0x11c>)
 8001698:	2228      	movs	r2, #40	; 0x28
 800169a:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 800169c:	f7ff fd0a 	bl	80010b4 <Buzzer_Off>
				clearTimer6();
				Buzzer_On();
				count++;
			}
		}
		break;
 80016a0:	e019      	b.n	80016d6 <pedestrian_cramble+0x116>
				status_pedes = Pedes_Go;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <pedestrian_cramble+0x11c>)
 80016a4:	2229      	movs	r2, #41	; 0x29
 80016a6:	601a      	str	r2, [r3, #0]
				dutycycle = 0;
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <pedestrian_cramble+0x12c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
				delay = 380;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <pedestrian_cramble+0x130>)
 80016b0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80016b4:	601a      	str	r2, [r3, #0]
				clearTimer6();
 80016b6:	f000 f9db 	bl	8001a70 <clearTimer6>
				Buzzer_On();
 80016ba:	f7ff fcb7 	bl	800102c <Buzzer_On>
				count++;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <pedestrian_cramble+0x124>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <pedestrian_cramble+0x124>)
 80016c6:	6013      	str	r3, [r2, #0]
		break;
 80016c8:	e005      	b.n	80016d6 <pedestrian_cramble+0x116>
	default:
		break;
 80016ca:	bf00      	nop
 80016cc:	e004      	b.n	80016d8 <pedestrian_cramble+0x118>
		break;
 80016ce:	bf00      	nop
 80016d0:	e002      	b.n	80016d8 <pedestrian_cramble+0x118>
		break;
 80016d2:	bf00      	nop
 80016d4:	e000      	b.n	80016d8 <pedestrian_cramble+0x118>
		break;
 80016d6:	bf00      	nop
	}
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200000c8 	.word	0x200000c8
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000210 	.word	0x20000210
 80016e8:	200000bc 	.word	0x200000bc
 80016ec:	2000020c 	.word	0x2000020c
 80016f0:	20000024 	.word	0x20000024

080016f4 <SCH_Init>:
 */
#include "scheduler.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	current_index_task = 0;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <SCH_Init+0x14>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000534 	.word	0x20000534

0800170c <SCH_Add_Task>:

//int Tick = 10; // 10ms

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <SCH_Add_Task+0xb4>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b27      	cmp	r3, #39	; 0x27
 800171e:	d84a      	bhi.n	80017b6 <SCH_Add_Task+0xaa>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <SCH_Add_Task+0xb4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	4a27      	ldr	r2, [pc, #156]	; (80017c4 <SCH_Add_Task+0xb8>)
 8001728:	460b      	mov	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TICK;
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <SCH_Add_Task+0xb4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <SCH_Add_Task+0xbc>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	491f      	ldr	r1, [pc, #124]	; (80017c4 <SCH_Add_Task+0xb8>)
 8001748:	4603      	mov	r3, r0
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4403      	add	r3, r0
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3304      	adds	r3, #4
 8001754:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD/TICK;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <SCH_Add_Task+0xb4>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <SCH_Add_Task+0xbc>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	4917      	ldr	r1, [pc, #92]	; (80017c4 <SCH_Add_Task+0xb8>)
 8001768:	4603      	mov	r3, r0
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4403      	add	r3, r0
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	3308      	adds	r3, #8
 8001774:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <SCH_Add_Task+0xb4>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <SCH_Add_Task+0xb8>)
 800177e:	460b      	mov	r3, r1
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	330c      	adds	r3, #12
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <SCH_Add_Task+0xb4>)
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <SCH_Add_Task+0xb4>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	4610      	mov	r0, r2
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SCH_Add_Task+0xb8>)
 800179c:	460b      	mov	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3310      	adds	r3, #16
 80017a8:	6018      	str	r0, [r3, #0]


		current_index_task++;
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SCH_Add_Task+0xb4>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <SCH_Add_Task+0xb4>)
 80017b4:	701a      	strb	r2, [r3, #0]
	}
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	20000534 	.word	0x20000534
 80017c4:	20000214 	.word	0x20000214
 80017c8:	cccccccd 	.word	0xcccccccd

080017cc <SCH_Update>:

void SCH_Update(void){
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	e048      	b.n	800186a <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0 ){
 80017d8:	492a      	ldr	r1, [pc, #168]	; (8001884 <SCH_Update+0xb8>)
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3304      	adds	r3, #4
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d013      	beq.n	8001816 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 80017ee:	4925      	ldr	r1, [pc, #148]	; (8001884 <SCH_Update+0xb8>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3304      	adds	r3, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1e59      	subs	r1, r3, #1
 8001802:	4820      	ldr	r0, [pc, #128]	; (8001884 <SCH_Update+0xb8>)
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4403      	add	r3, r0
 8001810:	3304      	adds	r3, #4
 8001812:	6019      	str	r1, [r3, #0]
 8001814:	e026      	b.n	8001864 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay =SCH_tasks_G[i].Period;
 8001816:	491b      	ldr	r1, [pc, #108]	; (8001884 <SCH_Update+0xb8>)
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	3308      	adds	r3, #8
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	4816      	ldr	r0, [pc, #88]	; (8001884 <SCH_Update+0xb8>)
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4403      	add	r3, r0
 8001836:	3304      	adds	r3, #4
 8001838:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 800183a:	4912      	ldr	r1, [pc, #72]	; (8001884 <SCH_Update+0xb8>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	330c      	adds	r3, #12
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	b2d8      	uxtb	r0, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <SCH_Update+0xb8>)
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	330c      	adds	r3, #12
 8001860:	4602      	mov	r2, r0
 8001862:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < current_index_task; i++){
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <SCH_Update+0xbc>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4293      	cmp	r3, r2
 8001874:	dbb0      	blt.n	80017d8 <SCH_Update+0xc>
		}
	}
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000214 	.word	0x20000214
 8001888:	20000534 	.word	0x20000534

0800188c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	e039      	b.n	800190c <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[i].RunMe > 0 ){
 8001898:	4922      	ldr	r1, [pc, #136]	; (8001924 <SCH_Dispatch_Tasks+0x98>)
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	330c      	adds	r3, #12
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d02b      	beq.n	8001906 <SCH_Dispatch_Tasks+0x7a>
			SCH_tasks_G[i].RunMe--;
 80018ae:	491d      	ldr	r1, [pc, #116]	; (8001924 <SCH_Dispatch_Tasks+0x98>)
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	330c      	adds	r3, #12
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b2d8      	uxtb	r0, r3
 80018c4:	4917      	ldr	r1, [pc, #92]	; (8001924 <SCH_Dispatch_Tasks+0x98>)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	330c      	adds	r3, #12
 80018d4:	4602      	mov	r2, r0
 80018d6:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)(); // Run the task
 80018d8:	4912      	ldr	r1, [pc, #72]	; (8001924 <SCH_Dispatch_Tasks+0x98>)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4798      	blx	r3
			if (SCH_tasks_G[i].Period == 0 ){ // one shot task
 80018ea:	490e      	ldr	r1, [pc, #56]	; (8001924 <SCH_Dispatch_Tasks+0x98>)
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3308      	adds	r3, #8
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(i);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f813 	bl	800192c <SCH_Delete_Task>
	for (int i = 0 ; i < current_index_task; i++){
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3301      	adds	r3, #1
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <SCH_Dispatch_Tasks+0x9c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4293      	cmp	r3, r2
 8001916:	dbbf      	blt.n	8001898 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000214 	.word	0x20000214
 8001928:	20000534 	.word	0x20000534

0800192c <SCH_Delete_Task>:


void SCH_Delete_Task(int index){
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	if (index >= current_index_task ){ //
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <SCH_Delete_Task+0xdc>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4293      	cmp	r3, r2
 800193e:	da5d      	bge.n	80019fc <SCH_Delete_Task+0xd0>

		return;
	}else {
		for (int i = index; i <current_index_task - 1; i++){
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e04d      	b.n	80019e2 <SCH_Delete_Task+0xb6>
			SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	4930      	ldr	r1, [pc, #192]	; (8001a0c <SCH_Delete_Task+0xe0>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	482c      	ldr	r0, [pc, #176]	; (8001a0c <SCH_Delete_Task+0xe0>)
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4403      	add	r3, r0
 8001966:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	4927      	ldr	r1, [pc, #156]	; (8001a0c <SCH_Delete_Task+0xe0>)
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	3308      	adds	r3, #8
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	4823      	ldr	r0, [pc, #140]	; (8001a0c <SCH_Delete_Task+0xe0>)
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4403      	add	r3, r0
 800198a:	3308      	adds	r3, #8
 800198c:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i+1].RunMe;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	491e      	ldr	r1, [pc, #120]	; (8001a0c <SCH_Delete_Task+0xe0>)
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	330c      	adds	r3, #12
 80019a0:	7818      	ldrb	r0, [r3, #0]
 80019a2:	491a      	ldr	r1, [pc, #104]	; (8001a0c <SCH_Delete_Task+0xe0>)
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	330c      	adds	r3, #12
 80019b2:	4602      	mov	r2, r0
 80019b4:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	4914      	ldr	r1, [pc, #80]	; (8001a0c <SCH_Delete_Task+0xe0>)
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3304      	adds	r3, #4
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	4810      	ldr	r0, [pc, #64]	; (8001a0c <SCH_Delete_Task+0xe0>)
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4403      	add	r3, r0
 80019d8:	3304      	adds	r3, #4
 80019da:	6019      	str	r1, [r3, #0]
		for (int i = index; i <current_index_task - 1; i++){
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <SCH_Delete_Task+0xdc>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbab      	blt.n	8001946 <SCH_Delete_Task+0x1a>
		}
		current_index_task--;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SCH_Delete_Task+0xdc>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SCH_Delete_Task+0xdc>)
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	e000      	b.n	80019fe <SCH_Delete_Task+0xd2>
		return;
 80019fc:	bf00      	nop
	}
}
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000534 	.word	0x20000534
 8001a0c:	20000214 	.word	0x20000214

08001a10 <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <clearTimer1+0x18>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <clearTimer1+0x1c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000558 	.word	0x20000558
 8001a2c:	2000053c 	.word	0x2000053c

08001a30 <clearTimer2>:
void clearTimer2(){
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <clearTimer2+0x18>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <clearTimer2+0x1c>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	2000055c 	.word	0x2000055c
 8001a4c:	20000540 	.word	0x20000540

08001a50 <clearTimer3>:
void clearTimer3(){
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <clearTimer3+0x18>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <clearTimer3+0x1c>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000560 	.word	0x20000560
 8001a6c:	20000544 	.word	0x20000544

08001a70 <clearTimer6>:
}
void clearTimer5(){
	timer5_counter = 0;
	timer5_flag = 1;
}
void clearTimer6(){
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
	timer6_counter = 0;
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <clearTimer6+0x18>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
	timer6_flag = 1;
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <clearTimer6+0x1c>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	2000056c 	.word	0x2000056c
 8001a8c:	20000550 	.word	0x20000550

08001a90 <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <setTimer1+0x28>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <setTimer1+0x2c>)
 8001aa4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <setTimer1+0x30>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000028 	.word	0x20000028
 8001abc:	20000558 	.word	0x20000558
 8001ac0:	2000053c 	.word	0x2000053c

08001ac4 <setTimer2>:

void setTimer2( int duration){
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <setTimer2+0x28>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <setTimer2+0x2c>)
 8001ad8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <setTimer2+0x30>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000028 	.word	0x20000028
 8001af0:	2000055c 	.word	0x2000055c
 8001af4:	20000540 	.word	0x20000540

08001af8 <setTimer3>:

void setTimer3( int duration){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <setTimer3+0x28>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b0a:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <setTimer3+0x2c>)
 8001b0c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <setTimer3+0x30>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000028 	.word	0x20000028
 8001b24:	20000560 	.word	0x20000560
 8001b28:	20000544 	.word	0x20000544

08001b2c <setTimer4>:

void setTimer4( int duration){
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <setTimer4+0x28>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b3e:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <setTimer4+0x2c>)
 8001b40:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <setTimer4+0x30>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000028 	.word	0x20000028
 8001b58:	20000564 	.word	0x20000564
 8001b5c:	20000548 	.word	0x20000548

08001b60 <setTimer5>:

void setTimer5( int duration){
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <setTimer5+0x28>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b72:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <setTimer5+0x2c>)
 8001b74:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <setTimer5+0x30>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000028 	.word	0x20000028
 8001b8c:	20000568 	.word	0x20000568
 8001b90:	2000054c 	.word	0x2000054c

08001b94 <setTimer6>:
void setTimer6( int duration){
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <setTimer6+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ba6:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <setTimer6+0x2c>)
 8001ba8:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <setTimer6+0x30>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000028 	.word	0x20000028
 8001bc0:	2000056c 	.word	0x2000056c
 8001bc4:	20000550 	.word	0x20000550

08001bc8 <timerRun>:

void timerRun (){
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 8001bcc:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <timerRun+0xec>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	dd0b      	ble.n	8001bec <timerRun+0x24>
		timer0_counter --;
 8001bd4:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <timerRun+0xec>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	4a36      	ldr	r2, [pc, #216]	; (8001cb4 <timerRun+0xec>)
 8001bdc:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 8001bde:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <timerRun+0xec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	dc02      	bgt.n	8001bec <timerRun+0x24>
			timer0_flag = 1;
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <timerRun+0xf0>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <timerRun+0xf4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	dd0b      	ble.n	8001c0c <timerRun+0x44>
		timer1_counter--;
 8001bf4:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <timerRun+0xf4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <timerRun+0xf4>)
 8001bfc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <timerRun+0xf4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	dc02      	bgt.n	8001c0c <timerRun+0x44>
			timer1_flag = 1;
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <timerRun+0xf8>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <timerRun+0xfc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	dd0b      	ble.n	8001c2c <timerRun+0x64>
		timer2_counter--;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <timerRun+0xfc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <timerRun+0xfc>)
 8001c1c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <timerRun+0xfc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	dc02      	bgt.n	8001c2c <timerRun+0x64>
			timer2_flag = 1;
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <timerRun+0x100>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <timerRun+0x104>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	dd0b      	ble.n	8001c4c <timerRun+0x84>
		timer3_counter--;
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <timerRun+0x104>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	4a24      	ldr	r2, [pc, #144]	; (8001ccc <timerRun+0x104>)
 8001c3c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <timerRun+0x104>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dc02      	bgt.n	8001c4c <timerRun+0x84>
			timer3_flag = 1;
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <timerRun+0x108>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <timerRun+0x10c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dd0b      	ble.n	8001c6c <timerRun+0xa4>
		timer4_counter--;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <timerRun+0x10c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <timerRun+0x10c>)
 8001c5c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <timerRun+0x10c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	dc02      	bgt.n	8001c6c <timerRun+0xa4>
			timer4_flag = 1;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <timerRun+0x110>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <timerRun+0x114>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dd0b      	ble.n	8001c8c <timerRun+0xc4>
			timer5_counter--;
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <timerRun+0x114>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <timerRun+0x114>)
 8001c7c:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <timerRun+0x114>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	dc02      	bgt.n	8001c8c <timerRun+0xc4>
				timer5_flag = 1;
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <timerRun+0x118>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <timerRun+0x11c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	dd0b      	ble.n	8001cac <timerRun+0xe4>
			timer6_counter--;
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <timerRun+0x11c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <timerRun+0x11c>)
 8001c9c:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <timerRun+0x11c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	dc02      	bgt.n	8001cac <timerRun+0xe4>
				timer6_flag = 1;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <timerRun+0x120>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000554 	.word	0x20000554
 8001cb8:	20000538 	.word	0x20000538
 8001cbc:	20000558 	.word	0x20000558
 8001cc0:	2000053c 	.word	0x2000053c
 8001cc4:	2000055c 	.word	0x2000055c
 8001cc8:	20000540 	.word	0x20000540
 8001ccc:	20000560 	.word	0x20000560
 8001cd0:	20000544 	.word	0x20000544
 8001cd4:	20000564 	.word	0x20000564
 8001cd8:	20000548 	.word	0x20000548
 8001cdc:	20000568 	.word	0x20000568
 8001ce0:	2000054c 	.word	0x2000054c
 8001ce4:	2000056c 	.word	0x2000056c
 8001ce8:	20000550 	.word	0x20000550

08001cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6193      	str	r3, [r2, #24]
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_MspInit+0x60>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_MspInit+0x60>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000

08001d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d60:	d114      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_TIM_Base_MspInit+0x78>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <HAL_TIM_Base_MspInit+0x78>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_TIM_Base_MspInit+0x78>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	201c      	movs	r0, #28
 8001d80:	f000 fa9b 	bl	80022ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d84:	201c      	movs	r0, #28
 8001d86:	f000 fab4 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d8a:	e018      	b.n	8001dbe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <HAL_TIM_Base_MspInit+0x7c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d113      	bne.n	8001dbe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_TIM_Base_MspInit+0x78>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_TIM_Base_MspInit+0x78>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_TIM_Base_MspInit+0x78>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	201d      	movs	r0, #29
 8001db4:	f000 fa81 	bl	80022ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001db8:	201d      	movs	r0, #29
 8001dba:	f000 fa9a 	bl	80022f2 <HAL_NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <HAL_TIM_MspPostInit+0x58>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d117      	bne.n	8001e20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_TIM_MspPostInit+0x5c>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <HAL_TIM_MspPostInit+0x5c>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_TIM_MspPostInit+0x5c>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e08:	2340      	movs	r3, #64	; 0x40
 8001e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <HAL_TIM_MspPostInit+0x60>)
 8001e1c:	f000 fb34 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010800 	.word	0x40010800

08001e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ecc <HAL_UART_MspInit+0x98>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d137      	bne.n	8001ec4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_UART_MspInit+0x9c>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_UART_MspInit+0x9c>)
 8001e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5e:	61d3      	str	r3, [r2, #28]
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_UART_MspInit+0x9c>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_UART_MspInit+0x9c>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_UART_MspInit+0x9c>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_UART_MspInit+0x9c>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e84:	2304      	movs	r3, #4
 8001e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	4619      	mov	r1, r3
 8001e96:	480f      	ldr	r0, [pc, #60]	; (8001ed4 <HAL_UART_MspInit+0xa0>)
 8001e98:	f000 faf6 	bl	8002488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4619      	mov	r1, r3
 8001eae:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <HAL_UART_MspInit+0xa0>)
 8001eb0:	f000 faea 	bl	8002488 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2026      	movs	r0, #38	; 0x26
 8001eba:	f000 f9fe 	bl	80022ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ebe:	2026      	movs	r0, #38	; 0x26
 8001ec0:	f000 fa17 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40004400 	.word	0x40004400
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010800 	.word	0x40010800

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <NMI_Handler+0x4>

08001ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <BusFault_Handler+0x4>

08001ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <UsageFault_Handler+0x4>

08001ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1e:	f000 f8d9 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <TIM2_IRQHandler+0x10>)
 8001f2e:	f001 fa2d 	bl	800338c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000104 	.word	0x20000104

08001f3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM3_IRQHandler+0x10>)
 8001f42:	f001 fa23 	bl	800338c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000014c 	.word	0x2000014c

08001f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <USART2_IRQHandler+0x10>)
 8001f56:	f002 f8bb 	bl	80040d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000194 	.word	0x20000194

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f002 fc94 	bl	80048c0 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20005000 	.word	0x20005000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	20000570 	.word	0x20000570
 8001fcc:	20000588 	.word	0x20000588

08001fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fec:	d101      	bne.n	8001ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
//		button_reading();
//		timerRun();
		//getKeyInput();
		SCH_Update();
 8001fee:	f7ff fbed 	bl	80017cc <SCH_Update>
	}
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ffc:	480c      	ldr	r0, [pc, #48]	; (8002030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ffe:	490d      	ldr	r1, [pc, #52]	; (8002034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002004:	e002      	b.n	800200c <LoopCopyDataInit>

08002006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200a:	3304      	adds	r3, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800200c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002010:	d3f9      	bcc.n	8002006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002014:	4c0a      	ldr	r4, [pc, #40]	; (8002040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002018:	e001      	b.n	800201e <LoopFillZerobss>

0800201a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800201c:	3204      	adds	r2, #4

0800201e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002020:	d3fb      	bcc.n	800201a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002022:	f7ff ffd5 	bl	8001fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002026:	f002 fc51 	bl	80048cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800202a:	f7ff f873 	bl	8001114 <main>
  bx lr
 800202e:	4770      	bx	lr
  ldr r0, =_sdata
 8002030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002034:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002038:	080052a4 	.word	0x080052a4
  ldr r2, =_sbss
 800203c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002040:	20000588 	.word	0x20000588

08002044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC1_2_IRQHandler>
	...

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_Init+0x28>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_Init+0x28>)
 8002052:	f043 0310 	orr.w	r3, r3, #16
 8002056:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 f923 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	200f      	movs	r0, #15
 8002060:	f000 f808 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fe42 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f93b 	bl	800230e <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 f903 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000002c 	.word	0x2000002c
 80020cc:	20000034 	.word	0x20000034
 80020d0:	20000030 	.word	0x20000030

080020d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_IncTick+0x1c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_IncTick+0x20>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <HAL_IncTick+0x20>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	20000034 	.word	0x20000034
 80020f4:	20000574 	.word	0x20000574

080020f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_GetTick+0x10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	20000574 	.word	0x20000574

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	db0b      	blt.n	800219a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4906      	ldr	r1, [pc, #24]	; (80021a4 <__NVIC_EnableIRQ+0x34>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2001      	movs	r0, #1
 8002192:	fa00 f202 	lsl.w	r2, r0, r2
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f7ff ff90 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff2d 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff42 	bl	8002154 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff90 	bl	80021fc <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5f 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff35 	bl	8002170 <__NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffa2 	bl	8002260 <SysTick_Config>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002338:	2b02      	cmp	r3, #2
 800233a:	d008      	beq.n	800234e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2204      	movs	r2, #4
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e020      	b.n	8002390 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 020e 	bic.w	r2, r2, #14
 800235c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f202 	lsl.w	r2, r1, r2
 800237c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
	...

0800239c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d005      	beq.n	80023be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2204      	movs	r2, #4
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e051      	b.n	8002462 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 020e 	bic.w	r2, r2, #14
 80023cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a22      	ldr	r2, [pc, #136]	; (800246c <HAL_DMA_Abort_IT+0xd0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d029      	beq.n	800243c <HAL_DMA_Abort_IT+0xa0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a20      	ldr	r2, [pc, #128]	; (8002470 <HAL_DMA_Abort_IT+0xd4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d022      	beq.n	8002438 <HAL_DMA_Abort_IT+0x9c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_DMA_Abort_IT+0xd8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01a      	beq.n	8002432 <HAL_DMA_Abort_IT+0x96>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_DMA_Abort_IT+0xdc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d012      	beq.n	800242c <HAL_DMA_Abort_IT+0x90>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1c      	ldr	r2, [pc, #112]	; (800247c <HAL_DMA_Abort_IT+0xe0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00a      	beq.n	8002426 <HAL_DMA_Abort_IT+0x8a>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_DMA_Abort_IT+0xe4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d102      	bne.n	8002420 <HAL_DMA_Abort_IT+0x84>
 800241a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800241e:	e00e      	b.n	800243e <HAL_DMA_Abort_IT+0xa2>
 8002420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002424:	e00b      	b.n	800243e <HAL_DMA_Abort_IT+0xa2>
 8002426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242a:	e008      	b.n	800243e <HAL_DMA_Abort_IT+0xa2>
 800242c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002430:	e005      	b.n	800243e <HAL_DMA_Abort_IT+0xa2>
 8002432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002436:	e002      	b.n	800243e <HAL_DMA_Abort_IT+0xa2>
 8002438:	2310      	movs	r3, #16
 800243a:	e000      	b.n	800243e <HAL_DMA_Abort_IT+0xa2>
 800243c:	2301      	movs	r3, #1
 800243e:	4a11      	ldr	r2, [pc, #68]	; (8002484 <HAL_DMA_Abort_IT+0xe8>)
 8002440:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
    } 
  }
  return status;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40020008 	.word	0x40020008
 8002470:	4002001c 	.word	0x4002001c
 8002474:	40020030 	.word	0x40020030
 8002478:	40020044 	.word	0x40020044
 800247c:	40020058 	.word	0x40020058
 8002480:	4002006c 	.word	0x4002006c
 8002484:	40020000 	.word	0x40020000

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b08b      	sub	sp, #44	; 0x2c
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249a:	e169      	b.n	8002770 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800249c:	2201      	movs	r2, #1
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 8158 	bne.w	800276a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a9a      	ldr	r2, [pc, #616]	; (8002728 <HAL_GPIO_Init+0x2a0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d05e      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024c4:	4a98      	ldr	r2, [pc, #608]	; (8002728 <HAL_GPIO_Init+0x2a0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d875      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024ca:	4a98      	ldr	r2, [pc, #608]	; (800272c <HAL_GPIO_Init+0x2a4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d058      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024d0:	4a96      	ldr	r2, [pc, #600]	; (800272c <HAL_GPIO_Init+0x2a4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d86f      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024d6:	4a96      	ldr	r2, [pc, #600]	; (8002730 <HAL_GPIO_Init+0x2a8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d052      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024dc:	4a94      	ldr	r2, [pc, #592]	; (8002730 <HAL_GPIO_Init+0x2a8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d869      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024e2:	4a94      	ldr	r2, [pc, #592]	; (8002734 <HAL_GPIO_Init+0x2ac>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d04c      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024e8:	4a92      	ldr	r2, [pc, #584]	; (8002734 <HAL_GPIO_Init+0x2ac>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d863      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024ee:	4a92      	ldr	r2, [pc, #584]	; (8002738 <HAL_GPIO_Init+0x2b0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d046      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
 80024f4:	4a90      	ldr	r2, [pc, #576]	; (8002738 <HAL_GPIO_Init+0x2b0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d85d      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 80024fa:	2b12      	cmp	r3, #18
 80024fc:	d82a      	bhi.n	8002554 <HAL_GPIO_Init+0xcc>
 80024fe:	2b12      	cmp	r3, #18
 8002500:	d859      	bhi.n	80025b6 <HAL_GPIO_Init+0x12e>
 8002502:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <HAL_GPIO_Init+0x80>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	08002583 	.word	0x08002583
 800250c:	0800255d 	.word	0x0800255d
 8002510:	0800256f 	.word	0x0800256f
 8002514:	080025b1 	.word	0x080025b1
 8002518:	080025b7 	.word	0x080025b7
 800251c:	080025b7 	.word	0x080025b7
 8002520:	080025b7 	.word	0x080025b7
 8002524:	080025b7 	.word	0x080025b7
 8002528:	080025b7 	.word	0x080025b7
 800252c:	080025b7 	.word	0x080025b7
 8002530:	080025b7 	.word	0x080025b7
 8002534:	080025b7 	.word	0x080025b7
 8002538:	080025b7 	.word	0x080025b7
 800253c:	080025b7 	.word	0x080025b7
 8002540:	080025b7 	.word	0x080025b7
 8002544:	080025b7 	.word	0x080025b7
 8002548:	080025b7 	.word	0x080025b7
 800254c:	08002565 	.word	0x08002565
 8002550:	08002579 	.word	0x08002579
 8002554:	4a79      	ldr	r2, [pc, #484]	; (800273c <HAL_GPIO_Init+0x2b4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800255a:	e02c      	b.n	80025b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	623b      	str	r3, [r7, #32]
          break;
 8002562:	e029      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	3304      	adds	r3, #4
 800256a:	623b      	str	r3, [r7, #32]
          break;
 800256c:	e024      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	3308      	adds	r3, #8
 8002574:	623b      	str	r3, [r7, #32]
          break;
 8002576:	e01f      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	330c      	adds	r3, #12
 800257e:	623b      	str	r3, [r7, #32]
          break;
 8002580:	e01a      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800258a:	2304      	movs	r3, #4
 800258c:	623b      	str	r3, [r7, #32]
          break;
 800258e:	e013      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002598:	2308      	movs	r3, #8
 800259a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	611a      	str	r2, [r3, #16]
          break;
 80025a2:	e009      	b.n	80025b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a4:	2308      	movs	r3, #8
 80025a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	615a      	str	r2, [r3, #20]
          break;
 80025ae:	e003      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
          break;
 80025b4:	e000      	b.n	80025b8 <HAL_GPIO_Init+0x130>
          break;
 80025b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2bff      	cmp	r3, #255	; 0xff
 80025bc:	d801      	bhi.n	80025c2 <HAL_GPIO_Init+0x13a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	e001      	b.n	80025c6 <HAL_GPIO_Init+0x13e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2bff      	cmp	r3, #255	; 0xff
 80025cc:	d802      	bhi.n	80025d4 <HAL_GPIO_Init+0x14c>
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	e002      	b.n	80025da <HAL_GPIO_Init+0x152>
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	3b08      	subs	r3, #8
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	210f      	movs	r1, #15
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	431a      	orrs	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80b1 	beq.w	800276a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002608:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a4c      	ldr	r2, [pc, #304]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <HAL_GPIO_Init+0x2b8>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002620:	4a48      	ldr	r2, [pc, #288]	; (8002744 <HAL_GPIO_Init+0x2bc>)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	220f      	movs	r2, #15
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a40      	ldr	r2, [pc, #256]	; (8002748 <HAL_GPIO_Init+0x2c0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d013      	beq.n	8002674 <HAL_GPIO_Init+0x1ec>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a3f      	ldr	r2, [pc, #252]	; (800274c <HAL_GPIO_Init+0x2c4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00d      	beq.n	8002670 <HAL_GPIO_Init+0x1e8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a3e      	ldr	r2, [pc, #248]	; (8002750 <HAL_GPIO_Init+0x2c8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <HAL_GPIO_Init+0x1e4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a3d      	ldr	r2, [pc, #244]	; (8002754 <HAL_GPIO_Init+0x2cc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_GPIO_Init+0x1e0>
 8002664:	2303      	movs	r3, #3
 8002666:	e006      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002668:	2304      	movs	r3, #4
 800266a:	e004      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 800266c:	2302      	movs	r3, #2
 800266e:	e002      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_GPIO_Init+0x1ee>
 8002674:	2300      	movs	r3, #0
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	f002 0203 	and.w	r2, r2, #3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	4093      	lsls	r3, r2
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002686:	492f      	ldr	r1, [pc, #188]	; (8002744 <HAL_GPIO_Init+0x2bc>)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	492c      	ldr	r1, [pc, #176]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	4928      	ldr	r1, [pc, #160]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4922      	ldr	r1, [pc, #136]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	43db      	mvns	r3, r3
 80026de:	491e      	ldr	r1, [pc, #120]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4918      	ldr	r1, [pc, #96]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	4914      	ldr	r1, [pc, #80]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 8002708:	4013      	ands	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d021      	beq.n	800275c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e021      	b.n	800276a <HAL_GPIO_Init+0x2e2>
 8002726:	bf00      	nop
 8002728:	10320000 	.word	0x10320000
 800272c:	10310000 	.word	0x10310000
 8002730:	10220000 	.word	0x10220000
 8002734:	10210000 	.word	0x10210000
 8002738:	10120000 	.word	0x10120000
 800273c:	10110000 	.word	0x10110000
 8002740:	40021000 	.word	0x40021000
 8002744:	40010000 	.word	0x40010000
 8002748:	40010800 	.word	0x40010800
 800274c:	40010c00 	.word	0x40010c00
 8002750:	40011000 	.word	0x40011000
 8002754:	40011400 	.word	0x40011400
 8002758:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_GPIO_Init+0x304>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	43db      	mvns	r3, r3
 8002764:	4909      	ldr	r1, [pc, #36]	; (800278c <HAL_GPIO_Init+0x304>)
 8002766:	4013      	ands	r3, r2
 8002768:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	3301      	adds	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	f47f ae8e 	bne.w	800249c <HAL_GPIO_Init+0x14>
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	372c      	adds	r7, #44	; 0x2c
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40010400 	.word	0x40010400

08002790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e001      	b.n	80027b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	807b      	strh	r3, [r7, #2]
 80027ca:	4613      	mov	r3, r2
 80027cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ce:	787b      	ldrb	r3, [r7, #1]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d4:	887a      	ldrh	r2, [r7, #2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027da:	e003      	b.n	80027e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	041a      	lsls	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	611a      	str	r2, [r3, #16]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002800:	887a      	ldrh	r2, [r7, #2]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	041a      	lsls	r2, r3, #16
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43d9      	mvns	r1, r3
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	400b      	ands	r3, r1
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	611a      	str	r2, [r3, #16]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e272      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8087 	beq.w	800294e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002840:	4b92      	ldr	r3, [pc, #584]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b04      	cmp	r3, #4
 800284a:	d00c      	beq.n	8002866 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800284c:	4b8f      	ldr	r3, [pc, #572]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d112      	bne.n	800287e <HAL_RCC_OscConfig+0x5e>
 8002858:	4b8c      	ldr	r3, [pc, #560]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d10b      	bne.n	800287e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002866:	4b89      	ldr	r3, [pc, #548]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d06c      	beq.n	800294c <HAL_RCC_OscConfig+0x12c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d168      	bne.n	800294c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e24c      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x76>
 8002888:	4b80      	ldr	r3, [pc, #512]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a7f      	ldr	r2, [pc, #508]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e02e      	b.n	80028f4 <HAL_RCC_OscConfig+0xd4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x98>
 800289e:	4b7b      	ldr	r3, [pc, #492]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a7a      	ldr	r2, [pc, #488]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b78      	ldr	r3, [pc, #480]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a77      	ldr	r2, [pc, #476]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e01d      	b.n	80028f4 <HAL_RCC_OscConfig+0xd4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0xbc>
 80028c2:	4b72      	ldr	r3, [pc, #456]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a71      	ldr	r2, [pc, #452]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b6f      	ldr	r3, [pc, #444]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6e      	ldr	r2, [pc, #440]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0xd4>
 80028dc:	4b6b      	ldr	r3, [pc, #428]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6a      	ldr	r2, [pc, #424]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a67      	ldr	r2, [pc, #412]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7ff fbfc 	bl	80020f8 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7ff fbf8 	bl	80020f8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e200      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b5d      	ldr	r3, [pc, #372]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0xe4>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7ff fbe8 	bl	80020f8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7ff fbe4 	bl	80020f8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1ec      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x10c>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d063      	beq.n	8002a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800295a:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d11c      	bne.n	80029ac <HAL_RCC_OscConfig+0x18c>
 8002972:	4b46      	ldr	r3, [pc, #280]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d116      	bne.n	80029ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297e:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x176>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e1c0      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4939      	ldr	r1, [pc, #228]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029aa:	e03a      	b.n	8002a22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b4:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_RCC_OscConfig+0x270>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7ff fb9d 	bl	80020f8 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c2:	f7ff fb99 	bl	80020f8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1a1      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4927      	ldr	r1, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
 80029f4:	e015      	b.n	8002a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_RCC_OscConfig+0x270>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7ff fb7c 	bl	80020f8 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a04:	f7ff fb78 	bl	80020f8 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e180      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d03a      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d019      	beq.n	8002a6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <HAL_RCC_OscConfig+0x274>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7ff fb5c 	bl	80020f8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a44:	f7ff fb58 	bl	80020f8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e160      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a62:	2001      	movs	r0, #1
 8002a64:	f000 fad8 	bl	8003018 <RCC_Delay>
 8002a68:	e01c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7ff fb42 	bl	80020f8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a76:	e00f      	b.n	8002a98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a78:	f7ff fb3e 	bl	80020f8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d908      	bls.n	8002a98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e146      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	42420000 	.word	0x42420000
 8002a94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a98:	4b92      	ldr	r3, [pc, #584]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e9      	bne.n	8002a78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a6 	beq.w	8002bfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab6:	4b8b      	ldr	r3, [pc, #556]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b88      	ldr	r3, [pc, #544]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	4a87      	ldr	r2, [pc, #540]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	61d3      	str	r3, [r2, #28]
 8002ace:	4b85      	ldr	r3, [pc, #532]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b82      	ldr	r3, [pc, #520]	; (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b7f      	ldr	r3, [pc, #508]	; (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7e      	ldr	r2, [pc, #504]	; (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff faff 	bl	80020f8 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7ff fafb 	bl	80020f8 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b64      	cmp	r3, #100	; 0x64
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e103      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b75      	ldr	r3, [pc, #468]	; (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x312>
 8002b24:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a6e      	ldr	r2, [pc, #440]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	e02d      	b.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x334>
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a69      	ldr	r2, [pc, #420]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6213      	str	r3, [r2, #32]
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4a66      	ldr	r2, [pc, #408]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	6213      	str	r3, [r2, #32]
 8002b52:	e01c      	b.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCC_OscConfig+0x356>
 8002b5c:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a60      	ldr	r2, [pc, #384]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a5d      	ldr	r2, [pc, #372]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	e00b      	b.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002b76:	4b5b      	ldr	r3, [pc, #364]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a5a      	ldr	r2, [pc, #360]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6213      	str	r3, [r2, #32]
 8002b82:	4b58      	ldr	r3, [pc, #352]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d015      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7ff faaf 	bl	80020f8 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7ff faab 	bl	80020f8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0b1      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ee      	beq.n	8002b9e <HAL_RCC_OscConfig+0x37e>
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7ff fa99 	bl	80020f8 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7ff fa95 	bl	80020f8 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e09b      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	4b40      	ldr	r3, [pc, #256]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ee      	bne.n	8002bca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf2:	4b3c      	ldr	r3, [pc, #240]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4a3b      	ldr	r2, [pc, #236]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8087 	beq.w	8002d16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c08:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d061      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d146      	bne.n	8002caa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1c:	4b33      	ldr	r3, [pc, #204]	; (8002cec <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7ff fa69 	bl	80020f8 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7ff fa65 	bl	80020f8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e06d      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3c:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c50:	d108      	bne.n	8002c64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	4921      	ldr	r1, [pc, #132]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c64:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a19      	ldr	r1, [r3, #32]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	430b      	orrs	r3, r1
 8002c76:	491b      	ldr	r1, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7ff fa39 	bl	80020f8 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7ff fa35 	bl	80020f8 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e03d      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x46a>
 8002ca8:	e035      	b.n	8002d16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_RCC_OscConfig+0x4cc>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fa22 	bl	80020f8 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff fa1e 	bl	80020f8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e026      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x498>
 8002cd6:	e01e      	b.n	8002d16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e019      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x500>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0d0      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b6a      	ldr	r3, [pc, #424]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d910      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	4965      	ldr	r1, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d040      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d115      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de2:	4b41      	ldr	r3, [pc, #260]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e073      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df2:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06b      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e02:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4936      	ldr	r1, [pc, #216]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e14:	f7ff f970 	bl	80020f8 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f7ff f96c 	bl	80020f8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e053      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 020c 	and.w	r2, r3, #12
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1eb      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d210      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4922      	ldr	r1, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f8ce 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08005250 	.word	0x08005250
 8002ef0:	2000002c 	.word	0x2000002c
 8002ef4:	20000030 	.word	0x20000030

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	b490      	push	{r4, r7}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002efe:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f00:	1d3c      	adds	r4, r7, #4
 8002f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f08:	f240 2301 	movw	r3, #513	; 0x201
 8002f0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f22:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x40>
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x46>
 8002f36:	e02b      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f3a:	623b      	str	r3, [r7, #32]
      break;
 8002f3c:	e02b      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	0c9b      	lsrs	r3, r3, #18
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	3328      	adds	r3, #40	; 0x28
 8002f48:	443b      	add	r3, r7
 8002f4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	0c5b      	lsrs	r3, r3, #17
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	3328      	adds	r3, #40	; 0x28
 8002f66:	443b      	add	r3, r7
 8002f68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f72:	fb03 f202 	mul.w	r2, r3, r2
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7e:	e004      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f84:	fb02 f303 	mul.w	r3, r2, r3
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	623b      	str	r3, [r7, #32]
      break;
 8002f8e:	e002      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f92:	623b      	str	r3, [r7, #32]
      break;
 8002f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f96:	6a3b      	ldr	r3, [r7, #32]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc90      	pop	{r4, r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	08005240 	.word	0x08005240
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	007a1200 	.word	0x007a1200
 8002fb0:	003d0900 	.word	0x003d0900

08002fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	2000002c 	.word	0x2000002c

08002fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fcc:	f7ff fff2 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4903      	ldr	r1, [pc, #12]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	08005260 	.word	0x08005260

08002ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ff4:	f7ff ffde 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	0adb      	lsrs	r3, r3, #11
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	; (8003014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	08005260 	.word	0x08005260

08003018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <RCC_Delay+0x34>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <RCC_Delay+0x38>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0a5b      	lsrs	r3, r3, #9
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003034:	bf00      	nop
  }
  while (Delay --);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e5a      	subs	r2, r3, #1
 800303a:	60fa      	str	r2, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f9      	bne.n	8003034 <RCC_Delay+0x1c>
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	2000002c 	.word	0x2000002c
 8003050:	10624dd3 	.word	0x10624dd3

08003054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e041      	b.n	80030ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fe68 	bl	8001d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 fc28 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d001      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e03a      	b.n	8003182 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIM_Base_Start_IT+0x98>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d009      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_TIM_Base_Start_IT+0x9c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <HAL_TIM_Base_Start_IT+0xa0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d111      	bne.n	8003170 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d010      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	e007      	b.n	8003180 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e041      	b.n	800322e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f839 	bl	8003236 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 fb86 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_TIM_PWM_Start+0x24>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e022      	b.n	80032b2 <HAL_TIM_PWM_Start+0x6a>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b04      	cmp	r3, #4
 8003270:	d109      	bne.n	8003286 <HAL_TIM_PWM_Start+0x3e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e015      	b.n	80032b2 <HAL_TIM_PWM_Start+0x6a>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d109      	bne.n	80032a0 <HAL_TIM_PWM_Start+0x58>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e008      	b.n	80032b2 <HAL_TIM_PWM_Start+0x6a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e05e      	b.n	8003378 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <HAL_TIM_PWM_Start+0x82>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c8:	e013      	b.n	80032f2 <HAL_TIM_PWM_Start+0xaa>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d104      	bne.n	80032da <HAL_TIM_PWM_Start+0x92>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d8:	e00b      	b.n	80032f2 <HAL_TIM_PWM_Start+0xaa>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d104      	bne.n	80032ea <HAL_TIM_PWM_Start+0xa2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	e003      	b.n	80032f2 <HAL_TIM_PWM_Start+0xaa>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fd74 	bl	8003de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <HAL_TIM_PWM_Start+0x138>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d107      	bne.n	800331a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a18      	ldr	r2, [pc, #96]	; (8003380 <HAL_TIM_PWM_Start+0x138>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00e      	beq.n	8003342 <HAL_TIM_PWM_Start+0xfa>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d009      	beq.n	8003342 <HAL_TIM_PWM_Start+0xfa>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a14      	ldr	r2, [pc, #80]	; (8003384 <HAL_TIM_PWM_Start+0x13c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_TIM_PWM_Start+0xfa>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <HAL_TIM_PWM_Start+0x140>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d111      	bne.n	8003366 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b06      	cmp	r3, #6
 8003352:	d010      	beq.n	8003376 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003364:	e007      	b.n	8003376 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800

0800338c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d122      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d11b      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0202 	mvn.w	r2, #2
 80033b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fa6f 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa62 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fa71 	bl	80038c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d122      	bne.n	800343c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d11b      	bne.n	800343c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0204 	mvn.w	r2, #4
 800340c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2202      	movs	r2, #2
 8003412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fa45 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 8003428:	e005      	b.n	8003436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa38 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fa47 	bl	80038c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b08      	cmp	r3, #8
 8003448:	d122      	bne.n	8003490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b08      	cmp	r3, #8
 8003456:	d11b      	bne.n	8003490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0208 	mvn.w	r2, #8
 8003460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2204      	movs	r2, #4
 8003466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa1b 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 800347c:	e005      	b.n	800348a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fa0e 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fa1d 	bl	80038c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b10      	cmp	r3, #16
 800349c:	d122      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d11b      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0210 	mvn.w	r2, #16
 80034b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2208      	movs	r2, #8
 80034ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f9f1 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9e4 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f9f3 	bl	80038c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0201 	mvn.w	r2, #1
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fe fd66 	bl	8001fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d10e      	bne.n	800353c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003528:	2b80      	cmp	r3, #128	; 0x80
 800352a:	d107      	bne.n	800353c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fce1 	bl	8003efe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d107      	bne.n	8003568 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9b7 	bl	80038d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b20      	cmp	r3, #32
 8003574:	d10e      	bne.n	8003594 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b20      	cmp	r3, #32
 8003582:	d107      	bne.n	8003594 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0220 	mvn.w	r2, #32
 800358c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fcac 	bl	8003eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0ac      	b.n	8003710 <HAL_TIM_PWM_ConfigChannel+0x174>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	f200 809f 	bhi.w	8003704 <HAL_TIM_PWM_ConfigChannel+0x168>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003705 	.word	0x08003705
 80035d4:	08003705 	.word	0x08003705
 80035d8:	08003705 	.word	0x08003705
 80035dc:	08003641 	.word	0x08003641
 80035e0:	08003705 	.word	0x08003705
 80035e4:	08003705 	.word	0x08003705
 80035e8:	08003705 	.word	0x08003705
 80035ec:	08003683 	.word	0x08003683
 80035f0:	08003705 	.word	0x08003705
 80035f4:	08003705 	.word	0x08003705
 80035f8:	08003705 	.word	0x08003705
 80035fc:	080036c3 	.word	0x080036c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f9d0 	bl	80039ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0208 	orr.w	r2, r2, #8
 800361a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0204 	bic.w	r2, r2, #4
 800362a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6999      	ldr	r1, [r3, #24]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	619a      	str	r2, [r3, #24]
      break;
 800363e:	e062      	b.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fa16 	bl	8003a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800365a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6999      	ldr	r1, [r3, #24]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	021a      	lsls	r2, r3, #8
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	619a      	str	r2, [r3, #24]
      break;
 8003680:	e041      	b.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fa5f 	bl	8003b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0208 	orr.w	r2, r2, #8
 800369c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0204 	bic.w	r2, r2, #4
 80036ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69d9      	ldr	r1, [r3, #28]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	61da      	str	r2, [r3, #28]
      break;
 80036c0:	e021      	b.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 faa9 	bl	8003c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69da      	ldr	r2, [r3, #28]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69d9      	ldr	r1, [r3, #28]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	021a      	lsls	r2, r3, #8
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	61da      	str	r2, [r3, #28]
      break;
 8003702:	e000      	b.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003704:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIM_ConfigClockSource+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e0b3      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x180>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800374e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003756:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003768:	d03e      	beq.n	80037e8 <HAL_TIM_ConfigClockSource+0xd0>
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376e:	f200 8087 	bhi.w	8003880 <HAL_TIM_ConfigClockSource+0x168>
 8003772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003776:	f000 8085 	beq.w	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 800377a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377e:	d87f      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x168>
 8003780:	2b70      	cmp	r3, #112	; 0x70
 8003782:	d01a      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0xa2>
 8003784:	2b70      	cmp	r3, #112	; 0x70
 8003786:	d87b      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x168>
 8003788:	2b60      	cmp	r3, #96	; 0x60
 800378a:	d050      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x116>
 800378c:	2b60      	cmp	r3, #96	; 0x60
 800378e:	d877      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x168>
 8003790:	2b50      	cmp	r3, #80	; 0x50
 8003792:	d03c      	beq.n	800380e <HAL_TIM_ConfigClockSource+0xf6>
 8003794:	2b50      	cmp	r3, #80	; 0x50
 8003796:	d873      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x168>
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	d058      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x136>
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d86f      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x168>
 80037a0:	2b30      	cmp	r3, #48	; 0x30
 80037a2:	d064      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x156>
 80037a4:	2b30      	cmp	r3, #48	; 0x30
 80037a6:	d86b      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x168>
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d060      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x156>
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d867      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x168>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d05c      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x156>
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d05a      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037b8:	e062      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6899      	ldr	r1, [r3, #8]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f000 faee 	bl	8003daa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	609a      	str	r2, [r3, #8]
      break;
 80037e6:	e04e      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6899      	ldr	r1, [r3, #8]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f000 fad7 	bl	8003daa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800380a:	609a      	str	r2, [r3, #8]
      break;
 800380c:	e03b      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	461a      	mov	r2, r3
 800381c:	f000 fa4e 	bl	8003cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2150      	movs	r1, #80	; 0x50
 8003826:	4618      	mov	r0, r3
 8003828:	f000 faa5 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 800382c:	e02b      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	461a      	mov	r2, r3
 800383c:	f000 fa6c 	bl	8003d18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2160      	movs	r1, #96	; 0x60
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fa95 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 800384c:	e01b      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	461a      	mov	r2, r3
 800385c:	f000 fa2e 	bl	8003cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2140      	movs	r1, #64	; 0x40
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fa85 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 800386c:	e00b      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f000 fa7c 	bl	8003d76 <TIM_ITRx_SetConfig>
        break;
 800387e:	e002      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003880:	bf00      	nop
 8003882:	e000      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003884:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <TIM_Base_SetConfig+0xb8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00b      	beq.n	8003918 <TIM_Base_SetConfig+0x30>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d007      	beq.n	8003918 <TIM_Base_SetConfig+0x30>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <TIM_Base_SetConfig+0xbc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_Base_SetConfig+0x30>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <TIM_Base_SetConfig+0xc0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d108      	bne.n	800392a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <TIM_Base_SetConfig+0xb8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_Base_SetConfig+0x62>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0x62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <TIM_Base_SetConfig+0xbc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x62>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <TIM_Base_SetConfig+0xc0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <TIM_Base_SetConfig+0xb8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800

080039ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0201 	bic.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f023 0302 	bic.w	r3, r3, #2
 80039f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <TIM_OC1_SetConfig+0xc8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10c      	bne.n	8003a22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0308 	bic.w	r3, r3, #8
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 0304 	bic.w	r3, r3, #4
 8003a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a13      	ldr	r2, [pc, #76]	; (8003a74 <TIM_OC1_SetConfig+0xc8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d111      	bne.n	8003a4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	621a      	str	r2, [r3, #32]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00

08003a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f023 0210 	bic.w	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f023 0320 	bic.w	r3, r3, #32
 8003ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <TIM_OC2_SetConfig+0xd0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10d      	bne.n	8003af4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <TIM_OC2_SetConfig+0xd0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d113      	bne.n	8003b24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00

08003b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <TIM_OC3_SetConfig+0xd0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10d      	bne.n	8003bc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <TIM_OC3_SetConfig+0xd0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d113      	bne.n	8003bf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40012c00 	.word	0x40012c00

08003c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	031b      	lsls	r3, r3, #12
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0f      	ldr	r2, [pc, #60]	; (8003cb8 <TIM_OC4_SetConfig+0x98>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d109      	bne.n	8003c94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	019b      	lsls	r3, r3, #6
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00

08003cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f023 030a 	bic.w	r3, r3, #10
 8003cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f023 0210 	bic.w	r2, r3, #16
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	031b      	lsls	r3, r3, #12
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	621a      	str	r2, [r3, #32]
}
 8003d6c:	bf00      	nop
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f043 0307 	orr.w	r3, r3, #7
 8003d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b087      	sub	sp, #28
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	021a      	lsls	r2, r3, #8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	609a      	str	r2, [r3, #8]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	621a      	str	r2, [r3, #32]
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e046      	b.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00e      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e94:	d009      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800

08003eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e03f      	b.n	8003fa2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd ff7c 	bl	8001e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	; 0x24
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fc25 	bl	80047a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b08a      	sub	sp, #40	; 0x28
 8003fae:	af02      	add	r7, sp, #8
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d17c      	bne.n	80040c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_UART_Transmit+0x2c>
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e075      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_UART_Transmit+0x3e>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e06e      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2221      	movs	r2, #33	; 0x21
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffe:	f7fe f87b 	bl	80020f8 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d108      	bne.n	800402c <HAL_UART_Transmit+0x82>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e003      	b.n	8004034 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800403c:	e02a      	b.n	8004094 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fa11 	bl	8004470 <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e036      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3302      	adds	r3, #2
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e007      	b.n	8004086 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1cf      	bne.n	800403e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2140      	movs	r1, #64	; 0x40
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f9e1 	bl	8004470 <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e006      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x52>
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fa99 	bl	8004652 <UART_Receive_IT>
      return;
 8004120:	e17b      	b.n	800441a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80b1 	beq.w	800428c <HAL_UART_IRQHandler+0x1bc>
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_UART_IRQHandler+0x70>
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80a6 	beq.w	800428c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_UART_IRQHandler+0x90>
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f043 0201 	orr.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_UART_IRQHandler+0xb0>
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f043 0202 	orr.w	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_UART_IRQHandler+0xd0>
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	f043 0204 	orr.w	r2, r3, #4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00f      	beq.n	80041ca <HAL_UART_IRQHandler+0xfa>
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <HAL_UART_IRQHandler+0xee>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f043 0208 	orr.w	r2, r3, #8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 811e 	beq.w	8004410 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_UART_IRQHandler+0x11e>
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fa32 	bl	8004652 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <HAL_UART_IRQHandler+0x146>
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d031      	beq.n	800427a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f974 	bl	8004504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d023      	beq.n	8004272 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004238:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	2b00      	cmp	r3, #0
 8004240:	d013      	beq.n	800426a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	4a76      	ldr	r2, [pc, #472]	; (8004420 <HAL_UART_IRQHandler+0x350>)
 8004248:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe f8a4 	bl	800239c <HAL_DMA_Abort_IT>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004264:	4610      	mov	r0, r2
 8004266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	e00e      	b.n	8004288 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8ec 	bl	8004448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	e00a      	b.n	8004288 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8e8 	bl	8004448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	e006      	b.n	8004288 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8e4 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004286:	e0c3      	b.n	8004410 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004288:	bf00      	nop
    return;
 800428a:	e0c1      	b.n	8004410 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	2b01      	cmp	r3, #1
 8004292:	f040 80a1 	bne.w	80043d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 809b 	beq.w	80043d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8095 	beq.w	80043d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d04e      	beq.n	8004370 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80042dc:	8a3b      	ldrh	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8098 	beq.w	8004414 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042e8:	8a3a      	ldrh	r2, [r7, #16]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	f080 8092 	bcs.w	8004414 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8a3a      	ldrh	r2, [r7, #16]
 80042f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d02b      	beq.n	8004358 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800430e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0210 	bic.w	r2, r2, #16
 800434c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	4618      	mov	r0, r3
 8004354:	f7fd ffe7 	bl	8002326 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004360:	b29b      	uxth	r3, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	b29b      	uxth	r3, r3
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f876 	bl	800445a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800436e:	e051      	b.n	8004414 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004378:	b29b      	uxth	r3, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d047      	beq.n	8004418 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004388:	8a7b      	ldrh	r3, [r7, #18]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d044      	beq.n	8004418 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800439c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0210 	bic.w	r2, r2, #16
 80043ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043cc:	8a7b      	ldrh	r3, [r7, #18]
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f842 	bl	800445a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043d6:	e01f      	b.n	8004418 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_UART_IRQHandler+0x324>
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f8c9 	bl	8004584 <UART_Transmit_IT>
    return;
 80043f2:	e012      	b.n	800441a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <HAL_UART_IRQHandler+0x34a>
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f90a 	bl	8004622 <UART_EndTransmit_IT>
    return;
 800440e:	e004      	b.n	800441a <HAL_UART_IRQHandler+0x34a>
    return;
 8004410:	bf00      	nop
 8004412:	e002      	b.n	800441a <HAL_UART_IRQHandler+0x34a>
      return;
 8004414:	bf00      	nop
 8004416:	e000      	b.n	800441a <HAL_UART_IRQHandler+0x34a>
      return;
 8004418:	bf00      	nop
  }
}
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	0800455d 	.word	0x0800455d

08004424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	460b      	mov	r3, r1
 8004464:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004480:	e02c      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d028      	beq.n	80044dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004490:	f7fd fe32 	bl	80020f8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	429a      	cmp	r2, r3
 800449e:	d21d      	bcs.n	80044dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e00f      	b.n	80044fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d0c3      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800451a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	2b01      	cmp	r3, #1
 8004532:	d107      	bne.n	8004544 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0210 	bic.w	r2, r2, #16
 8004542:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff ff66 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b21      	cmp	r3, #33	; 0x21
 8004596:	d13e      	bne.n	8004616 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a0:	d114      	bne.n	80045cc <UART_Transmit_IT+0x48>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d110      	bne.n	80045cc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]
 80045ca:	e008      	b.n	80045de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	1c59      	adds	r1, r3, #1
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6211      	str	r1, [r2, #32]
 80045d6:	781a      	ldrb	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4619      	mov	r1, r3
 80045ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004600:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004610:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004616:	2302      	movs	r3, #2
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004638:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff feee 	bl	8004424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b22      	cmp	r3, #34	; 0x22
 8004664:	f040 8099 	bne.w	800479a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004670:	d117      	bne.n	80046a2 <UART_Receive_IT+0x50>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d113      	bne.n	80046a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004690:	b29a      	uxth	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	1c9a      	adds	r2, r3, #2
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
 80046a0:	e026      	b.n	80046f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b4:	d007      	beq.n	80046c6 <UART_Receive_IT+0x74>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <UART_Receive_IT+0x82>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e008      	b.n	80046e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004700:	2b00      	cmp	r3, #0
 8004702:	d148      	bne.n	8004796 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0220 	bic.w	r2, r2, #32
 8004712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b01      	cmp	r3, #1
 8004742:	d123      	bne.n	800478c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0210 	bic.w	r2, r2, #16
 8004758:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b10      	cmp	r3, #16
 8004766:	d10a      	bne.n	800477e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004782:	4619      	mov	r1, r3
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fe68 	bl	800445a <HAL_UARTEx_RxEventCallback>
 800478a:	e002      	b.n	8004792 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fe52 	bl	8004436 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e002      	b.n	800479c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
  }
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047de:	f023 030c 	bic.w	r3, r3, #12
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2c      	ldr	r2, [pc, #176]	; (80048b8 <UART_SetConfig+0x114>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d103      	bne.n	8004814 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fe fbf0 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	e002      	b.n	800481a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004814:	f7fe fbd8 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 8004818:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009a      	lsls	r2, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	4a22      	ldr	r2, [pc, #136]	; (80048bc <UART_SetConfig+0x118>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	0119      	lsls	r1, r3, #4
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009a      	lsls	r2, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <UART_SetConfig+0x118>)
 8004852:	fba3 0302 	umull	r0, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2064      	movs	r0, #100	; 0x64
 800485a:	fb00 f303 	mul.w	r3, r0, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	3332      	adds	r3, #50	; 0x32
 8004864:	4a15      	ldr	r2, [pc, #84]	; (80048bc <UART_SetConfig+0x118>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004870:	4419      	add	r1, r3
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009a      	lsls	r2, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	fbb2 f2f3 	udiv	r2, r2, r3
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <UART_SetConfig+0x118>)
 800488a:	fba3 0302 	umull	r0, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2064      	movs	r0, #100	; 0x64
 8004892:	fb00 f303 	mul.w	r3, r0, r3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	3332      	adds	r3, #50	; 0x32
 800489c:	4a07      	ldr	r2, [pc, #28]	; (80048bc <UART_SetConfig+0x118>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	440a      	add	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40013800 	.word	0x40013800
 80048bc:	51eb851f 	.word	0x51eb851f

080048c0 <__errno>:
 80048c0:	4b01      	ldr	r3, [pc, #4]	; (80048c8 <__errno+0x8>)
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000038 	.word	0x20000038

080048cc <__libc_init_array>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	2600      	movs	r6, #0
 80048d0:	4d0c      	ldr	r5, [pc, #48]	; (8004904 <__libc_init_array+0x38>)
 80048d2:	4c0d      	ldr	r4, [pc, #52]	; (8004908 <__libc_init_array+0x3c>)
 80048d4:	1b64      	subs	r4, r4, r5
 80048d6:	10a4      	asrs	r4, r4, #2
 80048d8:	42a6      	cmp	r6, r4
 80048da:	d109      	bne.n	80048f0 <__libc_init_array+0x24>
 80048dc:	f000 fc9c 	bl	8005218 <_init>
 80048e0:	2600      	movs	r6, #0
 80048e2:	4d0a      	ldr	r5, [pc, #40]	; (800490c <__libc_init_array+0x40>)
 80048e4:	4c0a      	ldr	r4, [pc, #40]	; (8004910 <__libc_init_array+0x44>)
 80048e6:	1b64      	subs	r4, r4, r5
 80048e8:	10a4      	asrs	r4, r4, #2
 80048ea:	42a6      	cmp	r6, r4
 80048ec:	d105      	bne.n	80048fa <__libc_init_array+0x2e>
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f4:	4798      	blx	r3
 80048f6:	3601      	adds	r6, #1
 80048f8:	e7ee      	b.n	80048d8 <__libc_init_array+0xc>
 80048fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fe:	4798      	blx	r3
 8004900:	3601      	adds	r6, #1
 8004902:	e7f2      	b.n	80048ea <__libc_init_array+0x1e>
 8004904:	0800529c 	.word	0x0800529c
 8004908:	0800529c 	.word	0x0800529c
 800490c:	0800529c 	.word	0x0800529c
 8004910:	080052a0 	.word	0x080052a0

08004914 <memset>:
 8004914:	4603      	mov	r3, r0
 8004916:	4402      	add	r2, r0
 8004918:	4293      	cmp	r3, r2
 800491a:	d100      	bne.n	800491e <memset+0xa>
 800491c:	4770      	bx	lr
 800491e:	f803 1b01 	strb.w	r1, [r3], #1
 8004922:	e7f9      	b.n	8004918 <memset+0x4>

08004924 <siprintf>:
 8004924:	b40e      	push	{r1, r2, r3}
 8004926:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800492a:	b500      	push	{lr}
 800492c:	b09c      	sub	sp, #112	; 0x70
 800492e:	ab1d      	add	r3, sp, #116	; 0x74
 8004930:	9002      	str	r0, [sp, #8]
 8004932:	9006      	str	r0, [sp, #24]
 8004934:	9107      	str	r1, [sp, #28]
 8004936:	9104      	str	r1, [sp, #16]
 8004938:	4808      	ldr	r0, [pc, #32]	; (800495c <siprintf+0x38>)
 800493a:	4909      	ldr	r1, [pc, #36]	; (8004960 <siprintf+0x3c>)
 800493c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004940:	9105      	str	r1, [sp, #20]
 8004942:	6800      	ldr	r0, [r0, #0]
 8004944:	a902      	add	r1, sp, #8
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	f000 f868 	bl	8004a1c <_svfiprintf_r>
 800494c:	2200      	movs	r2, #0
 800494e:	9b02      	ldr	r3, [sp, #8]
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	b01c      	add	sp, #112	; 0x70
 8004954:	f85d eb04 	ldr.w	lr, [sp], #4
 8004958:	b003      	add	sp, #12
 800495a:	4770      	bx	lr
 800495c:	20000038 	.word	0x20000038
 8004960:	ffff0208 	.word	0xffff0208

08004964 <__ssputs_r>:
 8004964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004968:	688e      	ldr	r6, [r1, #8]
 800496a:	4682      	mov	sl, r0
 800496c:	429e      	cmp	r6, r3
 800496e:	460c      	mov	r4, r1
 8004970:	4690      	mov	r8, r2
 8004972:	461f      	mov	r7, r3
 8004974:	d838      	bhi.n	80049e8 <__ssputs_r+0x84>
 8004976:	898a      	ldrh	r2, [r1, #12]
 8004978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800497c:	d032      	beq.n	80049e4 <__ssputs_r+0x80>
 800497e:	6825      	ldr	r5, [r4, #0]
 8004980:	6909      	ldr	r1, [r1, #16]
 8004982:	3301      	adds	r3, #1
 8004984:	eba5 0901 	sub.w	r9, r5, r1
 8004988:	6965      	ldr	r5, [r4, #20]
 800498a:	444b      	add	r3, r9
 800498c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004994:	106d      	asrs	r5, r5, #1
 8004996:	429d      	cmp	r5, r3
 8004998:	bf38      	it	cc
 800499a:	461d      	movcc	r5, r3
 800499c:	0553      	lsls	r3, r2, #21
 800499e:	d531      	bpl.n	8004a04 <__ssputs_r+0xa0>
 80049a0:	4629      	mov	r1, r5
 80049a2:	f000 fb6f 	bl	8005084 <_malloc_r>
 80049a6:	4606      	mov	r6, r0
 80049a8:	b950      	cbnz	r0, 80049c0 <__ssputs_r+0x5c>
 80049aa:	230c      	movs	r3, #12
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	f8ca 3000 	str.w	r3, [sl]
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c0:	464a      	mov	r2, r9
 80049c2:	6921      	ldr	r1, [r4, #16]
 80049c4:	f000 face 	bl	8004f64 <memcpy>
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d2:	81a3      	strh	r3, [r4, #12]
 80049d4:	6126      	str	r6, [r4, #16]
 80049d6:	444e      	add	r6, r9
 80049d8:	6026      	str	r6, [r4, #0]
 80049da:	463e      	mov	r6, r7
 80049dc:	6165      	str	r5, [r4, #20]
 80049de:	eba5 0509 	sub.w	r5, r5, r9
 80049e2:	60a5      	str	r5, [r4, #8]
 80049e4:	42be      	cmp	r6, r7
 80049e6:	d900      	bls.n	80049ea <__ssputs_r+0x86>
 80049e8:	463e      	mov	r6, r7
 80049ea:	4632      	mov	r2, r6
 80049ec:	4641      	mov	r1, r8
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	f000 fac6 	bl	8004f80 <memmove>
 80049f4:	68a3      	ldr	r3, [r4, #8]
 80049f6:	2000      	movs	r0, #0
 80049f8:	1b9b      	subs	r3, r3, r6
 80049fa:	60a3      	str	r3, [r4, #8]
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	4433      	add	r3, r6
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	e7db      	b.n	80049bc <__ssputs_r+0x58>
 8004a04:	462a      	mov	r2, r5
 8004a06:	f000 fbb1 	bl	800516c <_realloc_r>
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d1e1      	bne.n	80049d4 <__ssputs_r+0x70>
 8004a10:	4650      	mov	r0, sl
 8004a12:	6921      	ldr	r1, [r4, #16]
 8004a14:	f000 face 	bl	8004fb4 <_free_r>
 8004a18:	e7c7      	b.n	80049aa <__ssputs_r+0x46>
	...

08004a1c <_svfiprintf_r>:
 8004a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	4698      	mov	r8, r3
 8004a22:	898b      	ldrh	r3, [r1, #12]
 8004a24:	4607      	mov	r7, r0
 8004a26:	061b      	lsls	r3, r3, #24
 8004a28:	460d      	mov	r5, r1
 8004a2a:	4614      	mov	r4, r2
 8004a2c:	b09d      	sub	sp, #116	; 0x74
 8004a2e:	d50e      	bpl.n	8004a4e <_svfiprintf_r+0x32>
 8004a30:	690b      	ldr	r3, [r1, #16]
 8004a32:	b963      	cbnz	r3, 8004a4e <_svfiprintf_r+0x32>
 8004a34:	2140      	movs	r1, #64	; 0x40
 8004a36:	f000 fb25 	bl	8005084 <_malloc_r>
 8004a3a:	6028      	str	r0, [r5, #0]
 8004a3c:	6128      	str	r0, [r5, #16]
 8004a3e:	b920      	cbnz	r0, 8004a4a <_svfiprintf_r+0x2e>
 8004a40:	230c      	movs	r3, #12
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	e0d1      	b.n	8004bee <_svfiprintf_r+0x1d2>
 8004a4a:	2340      	movs	r3, #64	; 0x40
 8004a4c:	616b      	str	r3, [r5, #20]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	9309      	str	r3, [sp, #36]	; 0x24
 8004a52:	2320      	movs	r3, #32
 8004a54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a58:	2330      	movs	r3, #48	; 0x30
 8004a5a:	f04f 0901 	mov.w	r9, #1
 8004a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c08 <_svfiprintf_r+0x1ec>
 8004a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	469a      	mov	sl, r3
 8004a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a72:	b10a      	cbz	r2, 8004a78 <_svfiprintf_r+0x5c>
 8004a74:	2a25      	cmp	r2, #37	; 0x25
 8004a76:	d1f9      	bne.n	8004a6c <_svfiprintf_r+0x50>
 8004a78:	ebba 0b04 	subs.w	fp, sl, r4
 8004a7c:	d00b      	beq.n	8004a96 <_svfiprintf_r+0x7a>
 8004a7e:	465b      	mov	r3, fp
 8004a80:	4622      	mov	r2, r4
 8004a82:	4629      	mov	r1, r5
 8004a84:	4638      	mov	r0, r7
 8004a86:	f7ff ff6d 	bl	8004964 <__ssputs_r>
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	f000 80aa 	beq.w	8004be4 <_svfiprintf_r+0x1c8>
 8004a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a92:	445a      	add	r2, fp
 8004a94:	9209      	str	r2, [sp, #36]	; 0x24
 8004a96:	f89a 3000 	ldrb.w	r3, [sl]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80a2 	beq.w	8004be4 <_svfiprintf_r+0x1c8>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aaa:	f10a 0a01 	add.w	sl, sl, #1
 8004aae:	9304      	str	r3, [sp, #16]
 8004ab0:	9307      	str	r3, [sp, #28]
 8004ab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ab8:	4654      	mov	r4, sl
 8004aba:	2205      	movs	r2, #5
 8004abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac0:	4851      	ldr	r0, [pc, #324]	; (8004c08 <_svfiprintf_r+0x1ec>)
 8004ac2:	f000 fa41 	bl	8004f48 <memchr>
 8004ac6:	9a04      	ldr	r2, [sp, #16]
 8004ac8:	b9d8      	cbnz	r0, 8004b02 <_svfiprintf_r+0xe6>
 8004aca:	06d0      	lsls	r0, r2, #27
 8004acc:	bf44      	itt	mi
 8004ace:	2320      	movmi	r3, #32
 8004ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ad4:	0711      	lsls	r1, r2, #28
 8004ad6:	bf44      	itt	mi
 8004ad8:	232b      	movmi	r3, #43	; 0x2b
 8004ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ade:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae4:	d015      	beq.n	8004b12 <_svfiprintf_r+0xf6>
 8004ae6:	4654      	mov	r4, sl
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f04f 0c0a 	mov.w	ip, #10
 8004aee:	9a07      	ldr	r2, [sp, #28]
 8004af0:	4621      	mov	r1, r4
 8004af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004af6:	3b30      	subs	r3, #48	; 0x30
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	d94e      	bls.n	8004b9a <_svfiprintf_r+0x17e>
 8004afc:	b1b0      	cbz	r0, 8004b2c <_svfiprintf_r+0x110>
 8004afe:	9207      	str	r2, [sp, #28]
 8004b00:	e014      	b.n	8004b2c <_svfiprintf_r+0x110>
 8004b02:	eba0 0308 	sub.w	r3, r0, r8
 8004b06:	fa09 f303 	lsl.w	r3, r9, r3
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	46a2      	mov	sl, r4
 8004b0e:	9304      	str	r3, [sp, #16]
 8004b10:	e7d2      	b.n	8004ab8 <_svfiprintf_r+0x9c>
 8004b12:	9b03      	ldr	r3, [sp, #12]
 8004b14:	1d19      	adds	r1, r3, #4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	9103      	str	r1, [sp, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bfbb      	ittet	lt
 8004b1e:	425b      	neglt	r3, r3
 8004b20:	f042 0202 	orrlt.w	r2, r2, #2
 8004b24:	9307      	strge	r3, [sp, #28]
 8004b26:	9307      	strlt	r3, [sp, #28]
 8004b28:	bfb8      	it	lt
 8004b2a:	9204      	strlt	r2, [sp, #16]
 8004b2c:	7823      	ldrb	r3, [r4, #0]
 8004b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b30:	d10c      	bne.n	8004b4c <_svfiprintf_r+0x130>
 8004b32:	7863      	ldrb	r3, [r4, #1]
 8004b34:	2b2a      	cmp	r3, #42	; 0x2a
 8004b36:	d135      	bne.n	8004ba4 <_svfiprintf_r+0x188>
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	3402      	adds	r4, #2
 8004b3c:	1d1a      	adds	r2, r3, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	9203      	str	r2, [sp, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bfb8      	it	lt
 8004b46:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b4a:	9305      	str	r3, [sp, #20]
 8004b4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004c0c <_svfiprintf_r+0x1f0>
 8004b50:	2203      	movs	r2, #3
 8004b52:	4650      	mov	r0, sl
 8004b54:	7821      	ldrb	r1, [r4, #0]
 8004b56:	f000 f9f7 	bl	8004f48 <memchr>
 8004b5a:	b140      	cbz	r0, 8004b6e <_svfiprintf_r+0x152>
 8004b5c:	2340      	movs	r3, #64	; 0x40
 8004b5e:	eba0 000a 	sub.w	r0, r0, sl
 8004b62:	fa03 f000 	lsl.w	r0, r3, r0
 8004b66:	9b04      	ldr	r3, [sp, #16]
 8004b68:	3401      	adds	r4, #1
 8004b6a:	4303      	orrs	r3, r0
 8004b6c:	9304      	str	r3, [sp, #16]
 8004b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b72:	2206      	movs	r2, #6
 8004b74:	4826      	ldr	r0, [pc, #152]	; (8004c10 <_svfiprintf_r+0x1f4>)
 8004b76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b7a:	f000 f9e5 	bl	8004f48 <memchr>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d038      	beq.n	8004bf4 <_svfiprintf_r+0x1d8>
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <_svfiprintf_r+0x1f8>)
 8004b84:	bb1b      	cbnz	r3, 8004bce <_svfiprintf_r+0x1b2>
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	3307      	adds	r3, #7
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	3308      	adds	r3, #8
 8004b90:	9303      	str	r3, [sp, #12]
 8004b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b94:	4433      	add	r3, r6
 8004b96:	9309      	str	r3, [sp, #36]	; 0x24
 8004b98:	e767      	b.n	8004a6a <_svfiprintf_r+0x4e>
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ba2:	e7a5      	b.n	8004af0 <_svfiprintf_r+0xd4>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f04f 0c0a 	mov.w	ip, #10
 8004baa:	4619      	mov	r1, r3
 8004bac:	3401      	adds	r4, #1
 8004bae:	9305      	str	r3, [sp, #20]
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bb6:	3a30      	subs	r2, #48	; 0x30
 8004bb8:	2a09      	cmp	r2, #9
 8004bba:	d903      	bls.n	8004bc4 <_svfiprintf_r+0x1a8>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0c5      	beq.n	8004b4c <_svfiprintf_r+0x130>
 8004bc0:	9105      	str	r1, [sp, #20]
 8004bc2:	e7c3      	b.n	8004b4c <_svfiprintf_r+0x130>
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bcc:	e7f0      	b.n	8004bb0 <_svfiprintf_r+0x194>
 8004bce:	ab03      	add	r3, sp, #12
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	462a      	mov	r2, r5
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <_svfiprintf_r+0x1fc>)
 8004bd8:	a904      	add	r1, sp, #16
 8004bda:	f3af 8000 	nop.w
 8004bde:	1c42      	adds	r2, r0, #1
 8004be0:	4606      	mov	r6, r0
 8004be2:	d1d6      	bne.n	8004b92 <_svfiprintf_r+0x176>
 8004be4:	89ab      	ldrh	r3, [r5, #12]
 8004be6:	065b      	lsls	r3, r3, #25
 8004be8:	f53f af2c 	bmi.w	8004a44 <_svfiprintf_r+0x28>
 8004bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bee:	b01d      	add	sp, #116	; 0x74
 8004bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf4:	ab03      	add	r3, sp, #12
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <_svfiprintf_r+0x1fc>)
 8004bfe:	a904      	add	r1, sp, #16
 8004c00:	f000 f87c 	bl	8004cfc <_printf_i>
 8004c04:	e7eb      	b.n	8004bde <_svfiprintf_r+0x1c2>
 8004c06:	bf00      	nop
 8004c08:	08005268 	.word	0x08005268
 8004c0c:	0800526e 	.word	0x0800526e
 8004c10:	08005272 	.word	0x08005272
 8004c14:	00000000 	.word	0x00000000
 8004c18:	08004965 	.word	0x08004965

08004c1c <_printf_common>:
 8004c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c20:	4616      	mov	r6, r2
 8004c22:	4699      	mov	r9, r3
 8004c24:	688a      	ldr	r2, [r1, #8]
 8004c26:	690b      	ldr	r3, [r1, #16]
 8004c28:	4607      	mov	r7, r0
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	bfb8      	it	lt
 8004c2e:	4613      	movlt	r3, r2
 8004c30:	6033      	str	r3, [r6, #0]
 8004c32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c36:	460c      	mov	r4, r1
 8004c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c3c:	b10a      	cbz	r2, 8004c42 <_printf_common+0x26>
 8004c3e:	3301      	adds	r3, #1
 8004c40:	6033      	str	r3, [r6, #0]
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	0699      	lsls	r1, r3, #26
 8004c46:	bf42      	ittt	mi
 8004c48:	6833      	ldrmi	r3, [r6, #0]
 8004c4a:	3302      	addmi	r3, #2
 8004c4c:	6033      	strmi	r3, [r6, #0]
 8004c4e:	6825      	ldr	r5, [r4, #0]
 8004c50:	f015 0506 	ands.w	r5, r5, #6
 8004c54:	d106      	bne.n	8004c64 <_printf_common+0x48>
 8004c56:	f104 0a19 	add.w	sl, r4, #25
 8004c5a:	68e3      	ldr	r3, [r4, #12]
 8004c5c:	6832      	ldr	r2, [r6, #0]
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	42ab      	cmp	r3, r5
 8004c62:	dc28      	bgt.n	8004cb6 <_printf_common+0x9a>
 8004c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c68:	1e13      	subs	r3, r2, #0
 8004c6a:	6822      	ldr	r2, [r4, #0]
 8004c6c:	bf18      	it	ne
 8004c6e:	2301      	movne	r3, #1
 8004c70:	0692      	lsls	r2, r2, #26
 8004c72:	d42d      	bmi.n	8004cd0 <_printf_common+0xb4>
 8004c74:	4649      	mov	r1, r9
 8004c76:	4638      	mov	r0, r7
 8004c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c7c:	47c0      	blx	r8
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d020      	beq.n	8004cc4 <_printf_common+0xa8>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	68e5      	ldr	r5, [r4, #12]
 8004c86:	f003 0306 	and.w	r3, r3, #6
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	bf18      	it	ne
 8004c8e:	2500      	movne	r5, #0
 8004c90:	6832      	ldr	r2, [r6, #0]
 8004c92:	f04f 0600 	mov.w	r6, #0
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	bf08      	it	eq
 8004c9a:	1aad      	subeq	r5, r5, r2
 8004c9c:	6922      	ldr	r2, [r4, #16]
 8004c9e:	bf08      	it	eq
 8004ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	bfc4      	itt	gt
 8004ca8:	1a9b      	subgt	r3, r3, r2
 8004caa:	18ed      	addgt	r5, r5, r3
 8004cac:	341a      	adds	r4, #26
 8004cae:	42b5      	cmp	r5, r6
 8004cb0:	d11a      	bne.n	8004ce8 <_printf_common+0xcc>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e008      	b.n	8004cc8 <_printf_common+0xac>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4652      	mov	r2, sl
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	47c0      	blx	r8
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d103      	bne.n	8004ccc <_printf_common+0xb0>
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ccc:	3501      	adds	r5, #1
 8004cce:	e7c4      	b.n	8004c5a <_printf_common+0x3e>
 8004cd0:	2030      	movs	r0, #48	; 0x30
 8004cd2:	18e1      	adds	r1, r4, r3
 8004cd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cde:	4422      	add	r2, r4
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ce6:	e7c5      	b.n	8004c74 <_printf_common+0x58>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4622      	mov	r2, r4
 8004cec:	4649      	mov	r1, r9
 8004cee:	4638      	mov	r0, r7
 8004cf0:	47c0      	blx	r8
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d0e6      	beq.n	8004cc4 <_printf_common+0xa8>
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	e7d9      	b.n	8004cae <_printf_common+0x92>
	...

08004cfc <_printf_i>:
 8004cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	7e0f      	ldrb	r7, [r1, #24]
 8004d02:	4691      	mov	r9, r2
 8004d04:	2f78      	cmp	r7, #120	; 0x78
 8004d06:	4680      	mov	r8, r0
 8004d08:	460c      	mov	r4, r1
 8004d0a:	469a      	mov	sl, r3
 8004d0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d12:	d807      	bhi.n	8004d24 <_printf_i+0x28>
 8004d14:	2f62      	cmp	r7, #98	; 0x62
 8004d16:	d80a      	bhi.n	8004d2e <_printf_i+0x32>
 8004d18:	2f00      	cmp	r7, #0
 8004d1a:	f000 80d9 	beq.w	8004ed0 <_printf_i+0x1d4>
 8004d1e:	2f58      	cmp	r7, #88	; 0x58
 8004d20:	f000 80a4 	beq.w	8004e6c <_printf_i+0x170>
 8004d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d2c:	e03a      	b.n	8004da4 <_printf_i+0xa8>
 8004d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d32:	2b15      	cmp	r3, #21
 8004d34:	d8f6      	bhi.n	8004d24 <_printf_i+0x28>
 8004d36:	a101      	add	r1, pc, #4	; (adr r1, 8004d3c <_printf_i+0x40>)
 8004d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004da9 	.word	0x08004da9
 8004d44:	08004d25 	.word	0x08004d25
 8004d48:	08004d25 	.word	0x08004d25
 8004d4c:	08004d25 	.word	0x08004d25
 8004d50:	08004d25 	.word	0x08004d25
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004d25 	.word	0x08004d25
 8004d5c:	08004d25 	.word	0x08004d25
 8004d60:	08004d25 	.word	0x08004d25
 8004d64:	08004d25 	.word	0x08004d25
 8004d68:	08004eb7 	.word	0x08004eb7
 8004d6c:	08004dd9 	.word	0x08004dd9
 8004d70:	08004e99 	.word	0x08004e99
 8004d74:	08004d25 	.word	0x08004d25
 8004d78:	08004d25 	.word	0x08004d25
 8004d7c:	08004ed9 	.word	0x08004ed9
 8004d80:	08004d25 	.word	0x08004d25
 8004d84:	08004dd9 	.word	0x08004dd9
 8004d88:	08004d25 	.word	0x08004d25
 8004d8c:	08004d25 	.word	0x08004d25
 8004d90:	08004ea1 	.word	0x08004ea1
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	1d1a      	adds	r2, r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	602a      	str	r2, [r5, #0]
 8004d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0a4      	b.n	8004ef2 <_printf_i+0x1f6>
 8004da8:	6820      	ldr	r0, [r4, #0]
 8004daa:	6829      	ldr	r1, [r5, #0]
 8004dac:	0606      	lsls	r6, r0, #24
 8004dae:	f101 0304 	add.w	r3, r1, #4
 8004db2:	d50a      	bpl.n	8004dca <_printf_i+0xce>
 8004db4:	680e      	ldr	r6, [r1, #0]
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	2e00      	cmp	r6, #0
 8004dba:	da03      	bge.n	8004dc4 <_printf_i+0xc8>
 8004dbc:	232d      	movs	r3, #45	; 0x2d
 8004dbe:	4276      	negs	r6, r6
 8004dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc4:	230a      	movs	r3, #10
 8004dc6:	485e      	ldr	r0, [pc, #376]	; (8004f40 <_printf_i+0x244>)
 8004dc8:	e019      	b.n	8004dfe <_printf_i+0x102>
 8004dca:	680e      	ldr	r6, [r1, #0]
 8004dcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dd0:	602b      	str	r3, [r5, #0]
 8004dd2:	bf18      	it	ne
 8004dd4:	b236      	sxthne	r6, r6
 8004dd6:	e7ef      	b.n	8004db8 <_printf_i+0xbc>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	6820      	ldr	r0, [r4, #0]
 8004ddc:	1d19      	adds	r1, r3, #4
 8004dde:	6029      	str	r1, [r5, #0]
 8004de0:	0601      	lsls	r1, r0, #24
 8004de2:	d501      	bpl.n	8004de8 <_printf_i+0xec>
 8004de4:	681e      	ldr	r6, [r3, #0]
 8004de6:	e002      	b.n	8004dee <_printf_i+0xf2>
 8004de8:	0646      	lsls	r6, r0, #25
 8004dea:	d5fb      	bpl.n	8004de4 <_printf_i+0xe8>
 8004dec:	881e      	ldrh	r6, [r3, #0]
 8004dee:	2f6f      	cmp	r7, #111	; 0x6f
 8004df0:	bf0c      	ite	eq
 8004df2:	2308      	moveq	r3, #8
 8004df4:	230a      	movne	r3, #10
 8004df6:	4852      	ldr	r0, [pc, #328]	; (8004f40 <_printf_i+0x244>)
 8004df8:	2100      	movs	r1, #0
 8004dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dfe:	6865      	ldr	r5, [r4, #4]
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	bfa8      	it	ge
 8004e04:	6821      	ldrge	r1, [r4, #0]
 8004e06:	60a5      	str	r5, [r4, #8]
 8004e08:	bfa4      	itt	ge
 8004e0a:	f021 0104 	bicge.w	r1, r1, #4
 8004e0e:	6021      	strge	r1, [r4, #0]
 8004e10:	b90e      	cbnz	r6, 8004e16 <_printf_i+0x11a>
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	d04d      	beq.n	8004eb2 <_printf_i+0x1b6>
 8004e16:	4615      	mov	r5, r2
 8004e18:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e1c:	fb03 6711 	mls	r7, r3, r1, r6
 8004e20:	5dc7      	ldrb	r7, [r0, r7]
 8004e22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e26:	4637      	mov	r7, r6
 8004e28:	42bb      	cmp	r3, r7
 8004e2a:	460e      	mov	r6, r1
 8004e2c:	d9f4      	bls.n	8004e18 <_printf_i+0x11c>
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d10b      	bne.n	8004e4a <_printf_i+0x14e>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	07de      	lsls	r6, r3, #31
 8004e36:	d508      	bpl.n	8004e4a <_printf_i+0x14e>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	6861      	ldr	r1, [r4, #4]
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	bfde      	ittt	le
 8004e40:	2330      	movle	r3, #48	; 0x30
 8004e42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e4a:	1b52      	subs	r2, r2, r5
 8004e4c:	6122      	str	r2, [r4, #16]
 8004e4e:	464b      	mov	r3, r9
 8004e50:	4621      	mov	r1, r4
 8004e52:	4640      	mov	r0, r8
 8004e54:	f8cd a000 	str.w	sl, [sp]
 8004e58:	aa03      	add	r2, sp, #12
 8004e5a:	f7ff fedf 	bl	8004c1c <_printf_common>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d14c      	bne.n	8004efc <_printf_i+0x200>
 8004e62:	f04f 30ff 	mov.w	r0, #4294967295
 8004e66:	b004      	add	sp, #16
 8004e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6c:	4834      	ldr	r0, [pc, #208]	; (8004f40 <_printf_i+0x244>)
 8004e6e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e72:	6829      	ldr	r1, [r5, #0]
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e7a:	6029      	str	r1, [r5, #0]
 8004e7c:	061d      	lsls	r5, r3, #24
 8004e7e:	d514      	bpl.n	8004eaa <_printf_i+0x1ae>
 8004e80:	07df      	lsls	r7, r3, #31
 8004e82:	bf44      	itt	mi
 8004e84:	f043 0320 	orrmi.w	r3, r3, #32
 8004e88:	6023      	strmi	r3, [r4, #0]
 8004e8a:	b91e      	cbnz	r6, 8004e94 <_printf_i+0x198>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	f023 0320 	bic.w	r3, r3, #32
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	2310      	movs	r3, #16
 8004e96:	e7af      	b.n	8004df8 <_printf_i+0xfc>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	f043 0320 	orr.w	r3, r3, #32
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	2378      	movs	r3, #120	; 0x78
 8004ea2:	4828      	ldr	r0, [pc, #160]	; (8004f44 <_printf_i+0x248>)
 8004ea4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ea8:	e7e3      	b.n	8004e72 <_printf_i+0x176>
 8004eaa:	0659      	lsls	r1, r3, #25
 8004eac:	bf48      	it	mi
 8004eae:	b2b6      	uxthmi	r6, r6
 8004eb0:	e7e6      	b.n	8004e80 <_printf_i+0x184>
 8004eb2:	4615      	mov	r5, r2
 8004eb4:	e7bb      	b.n	8004e2e <_printf_i+0x132>
 8004eb6:	682b      	ldr	r3, [r5, #0]
 8004eb8:	6826      	ldr	r6, [r4, #0]
 8004eba:	1d18      	adds	r0, r3, #4
 8004ebc:	6961      	ldr	r1, [r4, #20]
 8004ebe:	6028      	str	r0, [r5, #0]
 8004ec0:	0635      	lsls	r5, r6, #24
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	d501      	bpl.n	8004eca <_printf_i+0x1ce>
 8004ec6:	6019      	str	r1, [r3, #0]
 8004ec8:	e002      	b.n	8004ed0 <_printf_i+0x1d4>
 8004eca:	0670      	lsls	r0, r6, #25
 8004ecc:	d5fb      	bpl.n	8004ec6 <_printf_i+0x1ca>
 8004ece:	8019      	strh	r1, [r3, #0]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4615      	mov	r5, r2
 8004ed4:	6123      	str	r3, [r4, #16]
 8004ed6:	e7ba      	b.n	8004e4e <_printf_i+0x152>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	2100      	movs	r1, #0
 8004edc:	1d1a      	adds	r2, r3, #4
 8004ede:	602a      	str	r2, [r5, #0]
 8004ee0:	681d      	ldr	r5, [r3, #0]
 8004ee2:	6862      	ldr	r2, [r4, #4]
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 f82f 	bl	8004f48 <memchr>
 8004eea:	b108      	cbz	r0, 8004ef0 <_printf_i+0x1f4>
 8004eec:	1b40      	subs	r0, r0, r5
 8004eee:	6060      	str	r0, [r4, #4]
 8004ef0:	6863      	ldr	r3, [r4, #4]
 8004ef2:	6123      	str	r3, [r4, #16]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004efa:	e7a8      	b.n	8004e4e <_printf_i+0x152>
 8004efc:	462a      	mov	r2, r5
 8004efe:	4649      	mov	r1, r9
 8004f00:	4640      	mov	r0, r8
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	47d0      	blx	sl
 8004f06:	3001      	adds	r0, #1
 8004f08:	d0ab      	beq.n	8004e62 <_printf_i+0x166>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	079b      	lsls	r3, r3, #30
 8004f0e:	d413      	bmi.n	8004f38 <_printf_i+0x23c>
 8004f10:	68e0      	ldr	r0, [r4, #12]
 8004f12:	9b03      	ldr	r3, [sp, #12]
 8004f14:	4298      	cmp	r0, r3
 8004f16:	bfb8      	it	lt
 8004f18:	4618      	movlt	r0, r3
 8004f1a:	e7a4      	b.n	8004e66 <_printf_i+0x16a>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4632      	mov	r2, r6
 8004f20:	4649      	mov	r1, r9
 8004f22:	4640      	mov	r0, r8
 8004f24:	47d0      	blx	sl
 8004f26:	3001      	adds	r0, #1
 8004f28:	d09b      	beq.n	8004e62 <_printf_i+0x166>
 8004f2a:	3501      	adds	r5, #1
 8004f2c:	68e3      	ldr	r3, [r4, #12]
 8004f2e:	9903      	ldr	r1, [sp, #12]
 8004f30:	1a5b      	subs	r3, r3, r1
 8004f32:	42ab      	cmp	r3, r5
 8004f34:	dcf2      	bgt.n	8004f1c <_printf_i+0x220>
 8004f36:	e7eb      	b.n	8004f10 <_printf_i+0x214>
 8004f38:	2500      	movs	r5, #0
 8004f3a:	f104 0619 	add.w	r6, r4, #25
 8004f3e:	e7f5      	b.n	8004f2c <_printf_i+0x230>
 8004f40:	08005279 	.word	0x08005279
 8004f44:	0800528a 	.word	0x0800528a

08004f48 <memchr>:
 8004f48:	4603      	mov	r3, r0
 8004f4a:	b510      	push	{r4, lr}
 8004f4c:	b2c9      	uxtb	r1, r1
 8004f4e:	4402      	add	r2, r0
 8004f50:	4293      	cmp	r3, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	d101      	bne.n	8004f5a <memchr+0x12>
 8004f56:	2000      	movs	r0, #0
 8004f58:	e003      	b.n	8004f62 <memchr+0x1a>
 8004f5a:	7804      	ldrb	r4, [r0, #0]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	428c      	cmp	r4, r1
 8004f60:	d1f6      	bne.n	8004f50 <memchr+0x8>
 8004f62:	bd10      	pop	{r4, pc}

08004f64 <memcpy>:
 8004f64:	440a      	add	r2, r1
 8004f66:	4291      	cmp	r1, r2
 8004f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f6c:	d100      	bne.n	8004f70 <memcpy+0xc>
 8004f6e:	4770      	bx	lr
 8004f70:	b510      	push	{r4, lr}
 8004f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f76:	4291      	cmp	r1, r2
 8004f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f7c:	d1f9      	bne.n	8004f72 <memcpy+0xe>
 8004f7e:	bd10      	pop	{r4, pc}

08004f80 <memmove>:
 8004f80:	4288      	cmp	r0, r1
 8004f82:	b510      	push	{r4, lr}
 8004f84:	eb01 0402 	add.w	r4, r1, r2
 8004f88:	d902      	bls.n	8004f90 <memmove+0x10>
 8004f8a:	4284      	cmp	r4, r0
 8004f8c:	4623      	mov	r3, r4
 8004f8e:	d807      	bhi.n	8004fa0 <memmove+0x20>
 8004f90:	1e43      	subs	r3, r0, #1
 8004f92:	42a1      	cmp	r1, r4
 8004f94:	d008      	beq.n	8004fa8 <memmove+0x28>
 8004f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f9e:	e7f8      	b.n	8004f92 <memmove+0x12>
 8004fa0:	4601      	mov	r1, r0
 8004fa2:	4402      	add	r2, r0
 8004fa4:	428a      	cmp	r2, r1
 8004fa6:	d100      	bne.n	8004faa <memmove+0x2a>
 8004fa8:	bd10      	pop	{r4, pc}
 8004faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fb2:	e7f7      	b.n	8004fa4 <memmove+0x24>

08004fb4 <_free_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d040      	beq.n	800503e <_free_r+0x8a>
 8004fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc0:	1f0c      	subs	r4, r1, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfb8      	it	lt
 8004fc6:	18e4      	addlt	r4, r4, r3
 8004fc8:	f000 f910 	bl	80051ec <__malloc_lock>
 8004fcc:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <_free_r+0x8c>)
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	b933      	cbnz	r3, 8004fe0 <_free_r+0x2c>
 8004fd2:	6063      	str	r3, [r4, #4]
 8004fd4:	6014      	str	r4, [r2, #0]
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fdc:	f000 b90c 	b.w	80051f8 <__malloc_unlock>
 8004fe0:	42a3      	cmp	r3, r4
 8004fe2:	d908      	bls.n	8004ff6 <_free_r+0x42>
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	1821      	adds	r1, r4, r0
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	bf01      	itttt	eq
 8004fec:	6819      	ldreq	r1, [r3, #0]
 8004fee:	685b      	ldreq	r3, [r3, #4]
 8004ff0:	1809      	addeq	r1, r1, r0
 8004ff2:	6021      	streq	r1, [r4, #0]
 8004ff4:	e7ed      	b.n	8004fd2 <_free_r+0x1e>
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	b10b      	cbz	r3, 8005000 <_free_r+0x4c>
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d9fa      	bls.n	8004ff6 <_free_r+0x42>
 8005000:	6811      	ldr	r1, [r2, #0]
 8005002:	1850      	adds	r0, r2, r1
 8005004:	42a0      	cmp	r0, r4
 8005006:	d10b      	bne.n	8005020 <_free_r+0x6c>
 8005008:	6820      	ldr	r0, [r4, #0]
 800500a:	4401      	add	r1, r0
 800500c:	1850      	adds	r0, r2, r1
 800500e:	4283      	cmp	r3, r0
 8005010:	6011      	str	r1, [r2, #0]
 8005012:	d1e0      	bne.n	8004fd6 <_free_r+0x22>
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4401      	add	r1, r0
 800501a:	6011      	str	r1, [r2, #0]
 800501c:	6053      	str	r3, [r2, #4]
 800501e:	e7da      	b.n	8004fd6 <_free_r+0x22>
 8005020:	d902      	bls.n	8005028 <_free_r+0x74>
 8005022:	230c      	movs	r3, #12
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	e7d6      	b.n	8004fd6 <_free_r+0x22>
 8005028:	6820      	ldr	r0, [r4, #0]
 800502a:	1821      	adds	r1, r4, r0
 800502c:	428b      	cmp	r3, r1
 800502e:	bf01      	itttt	eq
 8005030:	6819      	ldreq	r1, [r3, #0]
 8005032:	685b      	ldreq	r3, [r3, #4]
 8005034:	1809      	addeq	r1, r1, r0
 8005036:	6021      	streq	r1, [r4, #0]
 8005038:	6063      	str	r3, [r4, #4]
 800503a:	6054      	str	r4, [r2, #4]
 800503c:	e7cb      	b.n	8004fd6 <_free_r+0x22>
 800503e:	bd38      	pop	{r3, r4, r5, pc}
 8005040:	20000578 	.word	0x20000578

08005044 <sbrk_aligned>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4e0e      	ldr	r6, [pc, #56]	; (8005080 <sbrk_aligned+0x3c>)
 8005048:	460c      	mov	r4, r1
 800504a:	6831      	ldr	r1, [r6, #0]
 800504c:	4605      	mov	r5, r0
 800504e:	b911      	cbnz	r1, 8005056 <sbrk_aligned+0x12>
 8005050:	f000 f8bc 	bl	80051cc <_sbrk_r>
 8005054:	6030      	str	r0, [r6, #0]
 8005056:	4621      	mov	r1, r4
 8005058:	4628      	mov	r0, r5
 800505a:	f000 f8b7 	bl	80051cc <_sbrk_r>
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	d00a      	beq.n	8005078 <sbrk_aligned+0x34>
 8005062:	1cc4      	adds	r4, r0, #3
 8005064:	f024 0403 	bic.w	r4, r4, #3
 8005068:	42a0      	cmp	r0, r4
 800506a:	d007      	beq.n	800507c <sbrk_aligned+0x38>
 800506c:	1a21      	subs	r1, r4, r0
 800506e:	4628      	mov	r0, r5
 8005070:	f000 f8ac 	bl	80051cc <_sbrk_r>
 8005074:	3001      	adds	r0, #1
 8005076:	d101      	bne.n	800507c <sbrk_aligned+0x38>
 8005078:	f04f 34ff 	mov.w	r4, #4294967295
 800507c:	4620      	mov	r0, r4
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	2000057c 	.word	0x2000057c

08005084 <_malloc_r>:
 8005084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005088:	1ccd      	adds	r5, r1, #3
 800508a:	f025 0503 	bic.w	r5, r5, #3
 800508e:	3508      	adds	r5, #8
 8005090:	2d0c      	cmp	r5, #12
 8005092:	bf38      	it	cc
 8005094:	250c      	movcc	r5, #12
 8005096:	2d00      	cmp	r5, #0
 8005098:	4607      	mov	r7, r0
 800509a:	db01      	blt.n	80050a0 <_malloc_r+0x1c>
 800509c:	42a9      	cmp	r1, r5
 800509e:	d905      	bls.n	80050ac <_malloc_r+0x28>
 80050a0:	230c      	movs	r3, #12
 80050a2:	2600      	movs	r6, #0
 80050a4:	603b      	str	r3, [r7, #0]
 80050a6:	4630      	mov	r0, r6
 80050a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ac:	4e2e      	ldr	r6, [pc, #184]	; (8005168 <_malloc_r+0xe4>)
 80050ae:	f000 f89d 	bl	80051ec <__malloc_lock>
 80050b2:	6833      	ldr	r3, [r6, #0]
 80050b4:	461c      	mov	r4, r3
 80050b6:	bb34      	cbnz	r4, 8005106 <_malloc_r+0x82>
 80050b8:	4629      	mov	r1, r5
 80050ba:	4638      	mov	r0, r7
 80050bc:	f7ff ffc2 	bl	8005044 <sbrk_aligned>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	4604      	mov	r4, r0
 80050c4:	d14d      	bne.n	8005162 <_malloc_r+0xde>
 80050c6:	6834      	ldr	r4, [r6, #0]
 80050c8:	4626      	mov	r6, r4
 80050ca:	2e00      	cmp	r6, #0
 80050cc:	d140      	bne.n	8005150 <_malloc_r+0xcc>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	4631      	mov	r1, r6
 80050d2:	4638      	mov	r0, r7
 80050d4:	eb04 0803 	add.w	r8, r4, r3
 80050d8:	f000 f878 	bl	80051cc <_sbrk_r>
 80050dc:	4580      	cmp	r8, r0
 80050de:	d13a      	bne.n	8005156 <_malloc_r+0xd2>
 80050e0:	6821      	ldr	r1, [r4, #0]
 80050e2:	3503      	adds	r5, #3
 80050e4:	1a6d      	subs	r5, r5, r1
 80050e6:	f025 0503 	bic.w	r5, r5, #3
 80050ea:	3508      	adds	r5, #8
 80050ec:	2d0c      	cmp	r5, #12
 80050ee:	bf38      	it	cc
 80050f0:	250c      	movcc	r5, #12
 80050f2:	4638      	mov	r0, r7
 80050f4:	4629      	mov	r1, r5
 80050f6:	f7ff ffa5 	bl	8005044 <sbrk_aligned>
 80050fa:	3001      	adds	r0, #1
 80050fc:	d02b      	beq.n	8005156 <_malloc_r+0xd2>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	442b      	add	r3, r5
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	e00e      	b.n	8005124 <_malloc_r+0xa0>
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	1b52      	subs	r2, r2, r5
 800510a:	d41e      	bmi.n	800514a <_malloc_r+0xc6>
 800510c:	2a0b      	cmp	r2, #11
 800510e:	d916      	bls.n	800513e <_malloc_r+0xba>
 8005110:	1961      	adds	r1, r4, r5
 8005112:	42a3      	cmp	r3, r4
 8005114:	6025      	str	r5, [r4, #0]
 8005116:	bf18      	it	ne
 8005118:	6059      	strne	r1, [r3, #4]
 800511a:	6863      	ldr	r3, [r4, #4]
 800511c:	bf08      	it	eq
 800511e:	6031      	streq	r1, [r6, #0]
 8005120:	5162      	str	r2, [r4, r5]
 8005122:	604b      	str	r3, [r1, #4]
 8005124:	4638      	mov	r0, r7
 8005126:	f104 060b 	add.w	r6, r4, #11
 800512a:	f000 f865 	bl	80051f8 <__malloc_unlock>
 800512e:	f026 0607 	bic.w	r6, r6, #7
 8005132:	1d23      	adds	r3, r4, #4
 8005134:	1af2      	subs	r2, r6, r3
 8005136:	d0b6      	beq.n	80050a6 <_malloc_r+0x22>
 8005138:	1b9b      	subs	r3, r3, r6
 800513a:	50a3      	str	r3, [r4, r2]
 800513c:	e7b3      	b.n	80050a6 <_malloc_r+0x22>
 800513e:	6862      	ldr	r2, [r4, #4]
 8005140:	42a3      	cmp	r3, r4
 8005142:	bf0c      	ite	eq
 8005144:	6032      	streq	r2, [r6, #0]
 8005146:	605a      	strne	r2, [r3, #4]
 8005148:	e7ec      	b.n	8005124 <_malloc_r+0xa0>
 800514a:	4623      	mov	r3, r4
 800514c:	6864      	ldr	r4, [r4, #4]
 800514e:	e7b2      	b.n	80050b6 <_malloc_r+0x32>
 8005150:	4634      	mov	r4, r6
 8005152:	6876      	ldr	r6, [r6, #4]
 8005154:	e7b9      	b.n	80050ca <_malloc_r+0x46>
 8005156:	230c      	movs	r3, #12
 8005158:	4638      	mov	r0, r7
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	f000 f84c 	bl	80051f8 <__malloc_unlock>
 8005160:	e7a1      	b.n	80050a6 <_malloc_r+0x22>
 8005162:	6025      	str	r5, [r4, #0]
 8005164:	e7de      	b.n	8005124 <_malloc_r+0xa0>
 8005166:	bf00      	nop
 8005168:	20000578 	.word	0x20000578

0800516c <_realloc_r>:
 800516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005170:	4680      	mov	r8, r0
 8005172:	4614      	mov	r4, r2
 8005174:	460e      	mov	r6, r1
 8005176:	b921      	cbnz	r1, 8005182 <_realloc_r+0x16>
 8005178:	4611      	mov	r1, r2
 800517a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800517e:	f7ff bf81 	b.w	8005084 <_malloc_r>
 8005182:	b92a      	cbnz	r2, 8005190 <_realloc_r+0x24>
 8005184:	f7ff ff16 	bl	8004fb4 <_free_r>
 8005188:	4625      	mov	r5, r4
 800518a:	4628      	mov	r0, r5
 800518c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005190:	f000 f838 	bl	8005204 <_malloc_usable_size_r>
 8005194:	4284      	cmp	r4, r0
 8005196:	4607      	mov	r7, r0
 8005198:	d802      	bhi.n	80051a0 <_realloc_r+0x34>
 800519a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800519e:	d812      	bhi.n	80051c6 <_realloc_r+0x5a>
 80051a0:	4621      	mov	r1, r4
 80051a2:	4640      	mov	r0, r8
 80051a4:	f7ff ff6e 	bl	8005084 <_malloc_r>
 80051a8:	4605      	mov	r5, r0
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d0ed      	beq.n	800518a <_realloc_r+0x1e>
 80051ae:	42bc      	cmp	r4, r7
 80051b0:	4622      	mov	r2, r4
 80051b2:	4631      	mov	r1, r6
 80051b4:	bf28      	it	cs
 80051b6:	463a      	movcs	r2, r7
 80051b8:	f7ff fed4 	bl	8004f64 <memcpy>
 80051bc:	4631      	mov	r1, r6
 80051be:	4640      	mov	r0, r8
 80051c0:	f7ff fef8 	bl	8004fb4 <_free_r>
 80051c4:	e7e1      	b.n	800518a <_realloc_r+0x1e>
 80051c6:	4635      	mov	r5, r6
 80051c8:	e7df      	b.n	800518a <_realloc_r+0x1e>
	...

080051cc <_sbrk_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	2300      	movs	r3, #0
 80051d0:	4d05      	ldr	r5, [pc, #20]	; (80051e8 <_sbrk_r+0x1c>)
 80051d2:	4604      	mov	r4, r0
 80051d4:	4608      	mov	r0, r1
 80051d6:	602b      	str	r3, [r5, #0]
 80051d8:	f7fc fec4 	bl	8001f64 <_sbrk>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_sbrk_r+0x1a>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_sbrk_r+0x1a>
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	20000580 	.word	0x20000580

080051ec <__malloc_lock>:
 80051ec:	4801      	ldr	r0, [pc, #4]	; (80051f4 <__malloc_lock+0x8>)
 80051ee:	f000 b811 	b.w	8005214 <__retarget_lock_acquire_recursive>
 80051f2:	bf00      	nop
 80051f4:	20000584 	.word	0x20000584

080051f8 <__malloc_unlock>:
 80051f8:	4801      	ldr	r0, [pc, #4]	; (8005200 <__malloc_unlock+0x8>)
 80051fa:	f000 b80c 	b.w	8005216 <__retarget_lock_release_recursive>
 80051fe:	bf00      	nop
 8005200:	20000584 	.word	0x20000584

08005204 <_malloc_usable_size_r>:
 8005204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005208:	1f18      	subs	r0, r3, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	bfbc      	itt	lt
 800520e:	580b      	ldrlt	r3, [r1, r0]
 8005210:	18c0      	addlt	r0, r0, r3
 8005212:	4770      	bx	lr

08005214 <__retarget_lock_acquire_recursive>:
 8005214:	4770      	bx	lr

08005216 <__retarget_lock_release_recursive>:
 8005216:	4770      	bx	lr

08005218 <_init>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr

08005224 <_fini>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	bf00      	nop
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr
