
ass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005234  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c0  080053c0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080053c0  080053c0  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053c0  080053c0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080053c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000009c  08005464  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08005464  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c838  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f5  00000000  00000000  0002c8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0002eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  0002fe28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb6  00000000  00000000  00030bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001182e  00000000  00000000  00049ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2a1  00000000  00000000  0005b3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f2c  00000000  00000000  000e66c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005328 	.word	0x08005328

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08005328 	.word	0x08005328

0800014c <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <TM1637_ClkHigh+0x14>)
 8000158:	f002 fbb9 	bl	80028ce <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40011000 	.word	0x40011000

08000164 <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <TM1637_ClkLow+0x14>)
 8000170:	f002 fbad 	bl	80028ce <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40011000 	.word	0x40011000

0800017c <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <TM1637_DataHigh+0x14>)
 8000188:	f002 fba1 	bl	80028ce <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40011000 	.word	0x40011000

08000194 <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <TM1637_DataLow+0x14>)
 80001a0:	f002 fb95 	bl	80028ce <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40011000 	.word	0x40011000

080001ac <TM1637_DisplayDecimal>:
    TM1637_SetBrightness(8);
}


void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 80001b6:	2300      	movs	r3, #0
 80001b8:	617b      	str	r3, [r7, #20]
 80001ba:	e032      	b.n	8000222 <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 80001bc:	6879      	ldr	r1, [r7, #4]
 80001be:	4b30      	ldr	r3, [pc, #192]	; (8000280 <TM1637_DisplayDecimal+0xd4>)
 80001c0:	fb83 2301 	smull	r2, r3, r3, r1
 80001c4:	109a      	asrs	r2, r3, #2
 80001c6:	17cb      	asrs	r3, r1, #31
 80001c8:	1ad2      	subs	r2, r2, r3
 80001ca:	4613      	mov	r3, r2
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	4413      	add	r3, r2
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	1aca      	subs	r2, r1, r3
 80001d4:	4b2b      	ldr	r3, [pc, #172]	; (8000284 <TM1637_DisplayDecimal+0xd8>)
 80001d6:	5c99      	ldrb	r1, [r3, r2]
 80001d8:	f107 020c 	add.w	r2, r7, #12
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	4413      	add	r3, r2
 80001e0:	460a      	mov	r2, r1
 80001e2:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 80001e4:	697b      	ldr	r3, [r7, #20]
 80001e6:	2b02      	cmp	r3, #2
 80001e8:	d110      	bne.n	800020c <TM1637_DisplayDecimal+0x60>
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d00d      	beq.n	800020c <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 80001f0:	f107 020c 	add.w	r2, r7, #12
 80001f4:	697b      	ldr	r3, [r7, #20]
 80001f6:	4413      	add	r3, r2
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001fe:	b2d9      	uxtb	r1, r3
 8000200:	f107 020c 	add.w	r2, r7, #12
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	4413      	add	r3, r2
 8000208:	460a      	mov	r2, r1
 800020a:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <TM1637_DisplayDecimal+0xd4>)
 8000210:	fb82 1203 	smull	r1, r2, r2, r3
 8000214:	1092      	asrs	r2, r2, #2
 8000216:	17db      	asrs	r3, r3, #31
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	3301      	adds	r3, #1
 8000220:	617b      	str	r3, [r7, #20]
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	2b03      	cmp	r3, #3
 8000226:	ddc9      	ble.n	80001bc <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 8000228:	f000 f843 	bl	80002b2 <TM1637_Start>
    TM1637_WriteByte(0x40);
 800022c:	2040      	movs	r0, #64	; 0x40
 800022e:	f000 f872 	bl	8000316 <TM1637_WriteByte>
    TM1637_ReadResult();
 8000232:	f000 f860 	bl	80002f6 <TM1637_ReadResult>
    TM1637_Stop();
 8000236:	f000 f849 	bl	80002cc <TM1637_Stop>

    TM1637_Start();
 800023a:	f000 f83a 	bl	80002b2 <TM1637_Start>
    TM1637_WriteByte(0xc0);
 800023e:	20c0      	movs	r0, #192	; 0xc0
 8000240:	f000 f869 	bl	8000316 <TM1637_WriteByte>
    TM1637_ReadResult();
 8000244:	f000 f857 	bl	80002f6 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8000248:	2300      	movs	r3, #0
 800024a:	613b      	str	r3, [r7, #16]
 800024c:	e00e      	b.n	800026c <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	f1c3 0303 	rsb	r3, r3, #3
 8000254:	3318      	adds	r3, #24
 8000256:	443b      	add	r3, r7
 8000258:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f85a 	bl	8000316 <TM1637_WriteByte>
        TM1637_ReadResult();
 8000262:	f000 f848 	bl	80002f6 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	3301      	adds	r3, #1
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	2b03      	cmp	r3, #3
 8000270:	dded      	ble.n	800024e <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 8000272:	f000 f82b 	bl	80002cc <TM1637_Stop>
}
 8000276:	bf00      	nop
 8000278:	3718      	adds	r7, #24
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	66666667 	.word	0x66666667
 8000284:	08005360 	.word	0x08005360

08000288 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 8000292:	f000 f80e 	bl	80002b2 <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	3b79      	subs	r3, #121	; 0x79
 800029a:	b2db      	uxtb	r3, r3
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f83a 	bl	8000316 <TM1637_WriteByte>
    TM1637_ReadResult();
 80002a2:	f000 f828 	bl	80002f6 <TM1637_ReadResult>
    TM1637_Stop();
 80002a6:	f000 f811 	bl	80002cc <TM1637_Stop>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <TM1637_Start>:

void TM1637_Start(void)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 80002b6:	f7ff ff49 	bl	800014c <TM1637_ClkHigh>
    TM1637_DataHigh();
 80002ba:	f7ff ff5f 	bl	800017c <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 80002be:	2002      	movs	r0, #2
 80002c0:	f000 f853 	bl	800036a <TM1637_DelayUsec>
    TM1637_DataLow();
 80002c4:	f7ff ff66 	bl	8000194 <TM1637_DataLow>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}

080002cc <TM1637_Stop>:

void TM1637_Stop(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80002d0:	f7ff ff48 	bl	8000164 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 80002d4:	2002      	movs	r0, #2
 80002d6:	f000 f848 	bl	800036a <TM1637_DelayUsec>
    TM1637_DataLow();
 80002da:	f7ff ff5b 	bl	8000194 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 80002de:	2002      	movs	r0, #2
 80002e0:	f000 f843 	bl	800036a <TM1637_DelayUsec>
    TM1637_ClkHigh();
 80002e4:	f7ff ff32 	bl	800014c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80002e8:	2002      	movs	r0, #2
 80002ea:	f000 f83e 	bl	800036a <TM1637_DelayUsec>
    TM1637_DataHigh();
 80002ee:	f7ff ff45 	bl	800017c <TM1637_DataHigh>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80002fa:	f7ff ff33 	bl	8000164 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 80002fe:	2005      	movs	r0, #5
 8000300:	f000 f833 	bl	800036a <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8000304:	f7ff ff22 	bl	800014c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8000308:	2002      	movs	r0, #2
 800030a:	f000 f82e 	bl	800036a <TM1637_DelayUsec>
    TM1637_ClkLow();
 800030e:	f7ff ff29 	bl	8000164 <TM1637_ClkLow>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}

08000316 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	b084      	sub	sp, #16
 800031a:	af00      	add	r7, sp, #0
 800031c:	4603      	mov	r3, r0
 800031e:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	e019      	b.n	800035a <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 8000326:	f7ff ff1d 	bl	8000164 <TM1637_ClkLow>
		if (b & 0x01) {
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8000334:	f7ff ff22 	bl	800017c <TM1637_DataHigh>
 8000338:	e001      	b.n	800033e <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 800033a:	f7ff ff2b 	bl	8000194 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 f813 	bl	800036a <TM1637_DelayUsec>
		b >>= 1;
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	085b      	lsrs	r3, r3, #1
 8000348:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 800034a:	f7ff feff 	bl	800014c <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 800034e:	2003      	movs	r0, #3
 8000350:	f000 f80b 	bl	800036a <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3301      	adds	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	2b07      	cmp	r3, #7
 800035e:	dde2      	ble.n	8000326 <TM1637_WriteByte+0x10>
	}
}
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 800036a:	b480      	push	{r7}
 800036c:	b085      	sub	sp, #20
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8000372:	e00d      	b.n	8000390 <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	e003      	b.n	8000382 <TM1637_DelayUsec+0x18>
					__NOP();
 800037a:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3301      	adds	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000388:	dbf7      	blt.n	800037a <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3b01      	subs	r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d1ee      	bne.n	8000374 <TM1637_DelayUsec+0xa>
        }
    }
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
	...

080003a4 <fsm_automatic_1_run>:
 */


#include <fsm_automatic_1.h>

void fsm_automatic_1_run(){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	switch (status_ver){
 80003a8:	4b56      	ldr	r3, [pc, #344]	; (8000504 <fsm_automatic_1_run+0x160>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b0e      	cmp	r3, #14
 80003ae:	f200 809a 	bhi.w	80004e6 <fsm_automatic_1_run+0x142>
 80003b2:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <fsm_automatic_1_run+0x14>)
 80003b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b8:	080003f5 	.word	0x080003f5
 80003bc:	080004e7 	.word	0x080004e7
 80003c0:	080004e7 	.word	0x080004e7
 80003c4:	080004e7 	.word	0x080004e7
 80003c8:	080004e7 	.word	0x080004e7
 80003cc:	080004e7 	.word	0x080004e7
 80003d0:	080004e7 	.word	0x080004e7
 80003d4:	080004e7 	.word	0x080004e7
 80003d8:	0800041b 	.word	0x0800041b
 80003dc:	08000449 	.word	0x08000449
 80003e0:	08000477 	.word	0x08000477
 80003e4:	080004e7 	.word	0x080004e7
 80003e8:	080004a5 	.word	0x080004a5
 80003ec:	080004bb 	.word	0x080004bb
 80003f0:	080004d1 	.word	0x080004d1
	case INIT:

		SetOffVer();
 80003f4:	f000 fdc2 	bl	8000f7c <SetOffVer>
		led12 = timered;
 80003f8:	4b43      	ldr	r3, [pc, #268]	; (8000508 <fsm_automatic_1_run+0x164>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a43      	ldr	r2, [pc, #268]	; (800050c <fsm_automatic_1_run+0x168>)
 80003fe:	6013      	str	r3, [r2, #0]
		status_ver = AUTO_RED;
 8000400:	4b40      	ldr	r3, [pc, #256]	; (8000504 <fsm_automatic_1_run+0x160>)
 8000402:	2208      	movs	r2, #8
 8000404:	601a      	str	r2, [r3, #0]

		setTimer1(timeTimer(timered));
 8000406:	4b40      	ldr	r3, [pc, #256]	; (8000508 <fsm_automatic_1_run+0x164>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fb7a 	bl	8000b04 <timeTimer>
 8000410:	4603      	mov	r3, r0
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fbc4 	bl	8001ba0 <setTimer1>
		break;
 8000418:	e072      	b.n	8000500 <fsm_automatic_1_run+0x15c>
	case AUTO_RED:
		SetRedVer();
 800041a:	f000 fdf7 	bl	800100c <SetRedVer>
		if (timer1_flag == 1){
 800041e:	4b3c      	ldr	r3, [pc, #240]	; (8000510 <fsm_automatic_1_run+0x16c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d161      	bne.n	80004ea <fsm_automatic_1_run+0x146>
			status_ver = AUTO_GREEN;
 8000426:	4b37      	ldr	r3, [pc, #220]	; (8000504 <fsm_automatic_1_run+0x160>)
 8000428:	2209      	movs	r2, #9
 800042a:	601a      	str	r2, [r3, #0]
			led12 = timegreen;
 800042c:	4b39      	ldr	r3, [pc, #228]	; (8000514 <fsm_automatic_1_run+0x170>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a36      	ldr	r2, [pc, #216]	; (800050c <fsm_automatic_1_run+0x168>)
 8000432:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timegreen));
 8000434:	4b37      	ldr	r3, [pc, #220]	; (8000514 <fsm_automatic_1_run+0x170>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fb63 	bl	8000b04 <timeTimer>
 800043e:	4603      	mov	r3, r0
 8000440:	4618      	mov	r0, r3
 8000442:	f001 fbad 	bl	8001ba0 <setTimer1>
		}

		break;
 8000446:	e050      	b.n	80004ea <fsm_automatic_1_run+0x146>
	case AUTO_GREEN:

		SetGreenVer();
 8000448:	f000 fdf2 	bl	8001030 <SetGreenVer>
		if (timer1_flag == 1){
 800044c:	4b30      	ldr	r3, [pc, #192]	; (8000510 <fsm_automatic_1_run+0x16c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d14c      	bne.n	80004ee <fsm_automatic_1_run+0x14a>
			status_ver = AUTO_YELLOW;
 8000454:	4b2b      	ldr	r3, [pc, #172]	; (8000504 <fsm_automatic_1_run+0x160>)
 8000456:	220a      	movs	r2, #10
 8000458:	601a      	str	r2, [r3, #0]
			led12 = timeyellow;
 800045a:	4b2f      	ldr	r3, [pc, #188]	; (8000518 <fsm_automatic_1_run+0x174>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a2b      	ldr	r2, [pc, #172]	; (800050c <fsm_automatic_1_run+0x168>)
 8000460:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timeyellow));
 8000462:	4b2d      	ldr	r3, [pc, #180]	; (8000518 <fsm_automatic_1_run+0x174>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fb4c 	bl	8000b04 <timeTimer>
 800046c:	4603      	mov	r3, r0
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fb96 	bl	8001ba0 <setTimer1>
		}

		break;
 8000474:	e03b      	b.n	80004ee <fsm_automatic_1_run+0x14a>
	case AUTO_YELLOW:

		SetYellowVer();
 8000476:	f000 fded 	bl	8001054 <SetYellowVer>
		if (timer1_flag == 1){
 800047a:	4b25      	ldr	r3, [pc, #148]	; (8000510 <fsm_automatic_1_run+0x16c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d137      	bne.n	80004f2 <fsm_automatic_1_run+0x14e>
			status_ver = AUTO_RED;
 8000482:	4b20      	ldr	r3, [pc, #128]	; (8000504 <fsm_automatic_1_run+0x160>)
 8000484:	2208      	movs	r2, #8
 8000486:	601a      	str	r2, [r3, #0]
			led12 = timered;
 8000488:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <fsm_automatic_1_run+0x164>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a1f      	ldr	r2, [pc, #124]	; (800050c <fsm_automatic_1_run+0x168>)
 800048e:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timered));
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <fsm_automatic_1_run+0x164>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fb35 	bl	8000b04 <timeTimer>
 800049a:	4603      	mov	r3, r0
 800049c:	4618      	mov	r0, r3
 800049e:	f001 fb7f 	bl	8001ba0 <setTimer1>
		}

		break;
 80004a2:	e026      	b.n	80004f2 <fsm_automatic_1_run+0x14e>
	case MODIFY_RED:
		if (timer1_flag == 1){
 80004a4:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <fsm_automatic_1_run+0x16c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d124      	bne.n	80004f6 <fsm_automatic_1_run+0x152>
			BlinkyRedVer();
 80004ac:	f000 fcde 	bl	8000e6c <BlinkyRedVer>
			setTimer1(500);
 80004b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004b4:	f001 fb74 	bl	8001ba0 <setTimer1>
		}
		break;
 80004b8:	e01d      	b.n	80004f6 <fsm_automatic_1_run+0x152>
	case MODIFY_GREEN:
		if (timer1_flag == 1){
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <fsm_automatic_1_run+0x16c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d11b      	bne.n	80004fa <fsm_automatic_1_run+0x156>
			BlinkyGreenVer();
 80004c2:	f000 fce5 	bl	8000e90 <BlinkyGreenVer>
			setTimer1(500);
 80004c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ca:	f001 fb69 	bl	8001ba0 <setTimer1>
		}
		break;
 80004ce:	e014      	b.n	80004fa <fsm_automatic_1_run+0x156>
	case MODIFY_YELLOW:
		if (timer1_flag == 1){
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <fsm_automatic_1_run+0x16c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d112      	bne.n	80004fe <fsm_automatic_1_run+0x15a>
			BlinkyYellowVer();
 80004d8:	f000 fcec 	bl	8000eb4 <BlinkyYellowVer>
			setTimer1(500);
 80004dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e0:	f001 fb5e 	bl	8001ba0 <setTimer1>
		}
		break;
 80004e4:	e00b      	b.n	80004fe <fsm_automatic_1_run+0x15a>
	default:
		break;
 80004e6:	bf00      	nop
 80004e8:	e00a      	b.n	8000500 <fsm_automatic_1_run+0x15c>
		break;
 80004ea:	bf00      	nop
 80004ec:	e008      	b.n	8000500 <fsm_automatic_1_run+0x15c>
		break;
 80004ee:	bf00      	nop
 80004f0:	e006      	b.n	8000500 <fsm_automatic_1_run+0x15c>
		break;
 80004f2:	bf00      	nop
 80004f4:	e004      	b.n	8000500 <fsm_automatic_1_run+0x15c>
		break;
 80004f6:	bf00      	nop
 80004f8:	e002      	b.n	8000500 <fsm_automatic_1_run+0x15c>
		break;
 80004fa:	bf00      	nop
 80004fc:	e000      	b.n	8000500 <fsm_automatic_1_run+0x15c>
		break;
 80004fe:	bf00      	nop
	}

}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200000bc 	.word	0x200000bc
 8000508:	2000000c 	.word	0x2000000c
 800050c:	20000018 	.word	0x20000018
 8000510:	2000053c 	.word	0x2000053c
 8000514:	20000010 	.word	0x20000010
 8000518:	20000014 	.word	0x20000014

0800051c <fsm_automatic_2_run>:
 *      Author: pc
 */

#include "fsm_automatic_2.h"

void fsm_automatic_2_run(){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	switch (status_hor){
 8000520:	4b56      	ldr	r3, [pc, #344]	; (800067c <fsm_automatic_2_run+0x160>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b0e      	cmp	r3, #14
 8000526:	f200 809a 	bhi.w	800065e <fsm_automatic_2_run+0x142>
 800052a:	a201      	add	r2, pc, #4	; (adr r2, 8000530 <fsm_automatic_2_run+0x14>)
 800052c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000530:	0800056d 	.word	0x0800056d
 8000534:	0800065f 	.word	0x0800065f
 8000538:	0800065f 	.word	0x0800065f
 800053c:	0800065f 	.word	0x0800065f
 8000540:	0800065f 	.word	0x0800065f
 8000544:	0800065f 	.word	0x0800065f
 8000548:	0800065f 	.word	0x0800065f
 800054c:	0800065f 	.word	0x0800065f
 8000550:	08000593 	.word	0x08000593
 8000554:	080005c1 	.word	0x080005c1
 8000558:	080005ef 	.word	0x080005ef
 800055c:	0800065f 	.word	0x0800065f
 8000560:	0800061d 	.word	0x0800061d
 8000564:	08000633 	.word	0x08000633
 8000568:	08000649 	.word	0x08000649
	case INIT:
		SetOffHor();
 800056c:	f000 fd84 	bl	8001078 <SetOffHor>
		led34 = timegreen;
 8000570:	4b43      	ldr	r3, [pc, #268]	; (8000680 <fsm_automatic_2_run+0x164>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a43      	ldr	r2, [pc, #268]	; (8000684 <fsm_automatic_2_run+0x168>)
 8000576:	6013      	str	r3, [r2, #0]
		status_hor = AUTO_GREEN;
 8000578:	4b40      	ldr	r3, [pc, #256]	; (800067c <fsm_automatic_2_run+0x160>)
 800057a:	2209      	movs	r2, #9
 800057c:	601a      	str	r2, [r3, #0]
		setTimer2(timeTimer(timegreen));
 800057e:	4b40      	ldr	r3, [pc, #256]	; (8000680 <fsm_automatic_2_run+0x164>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fabe 	bl	8000b04 <timeTimer>
 8000588:	4603      	mov	r3, r0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fb22 	bl	8001bd4 <setTimer2>
		break;
 8000590:	e072      	b.n	8000678 <fsm_automatic_2_run+0x15c>
	case AUTO_RED :
		SetRedHor();
 8000592:	f000 fd83 	bl	800109c <SetRedHor>
		if (timer2_flag == 1){
 8000596:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <fsm_automatic_2_run+0x16c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d161      	bne.n	8000662 <fsm_automatic_2_run+0x146>
			status_hor = AUTO_GREEN;
 800059e:	4b37      	ldr	r3, [pc, #220]	; (800067c <fsm_automatic_2_run+0x160>)
 80005a0:	2209      	movs	r2, #9
 80005a2:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 80005a4:	4b36      	ldr	r3, [pc, #216]	; (8000680 <fsm_automatic_2_run+0x164>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a36      	ldr	r2, [pc, #216]	; (8000684 <fsm_automatic_2_run+0x168>)
 80005aa:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timegreen));
 80005ac:	4b34      	ldr	r3, [pc, #208]	; (8000680 <fsm_automatic_2_run+0x164>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 faa7 	bl	8000b04 <timeTimer>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fb0b 	bl	8001bd4 <setTimer2>
		}

		break;
 80005be:	e050      	b.n	8000662 <fsm_automatic_2_run+0x146>
	case AUTO_GREEN:

		SetGreenHor();
 80005c0:	f000 fd7e 	bl	80010c0 <SetGreenHor>
		if (timer2_flag == 1){
 80005c4:	4b30      	ldr	r3, [pc, #192]	; (8000688 <fsm_automatic_2_run+0x16c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d14c      	bne.n	8000666 <fsm_automatic_2_run+0x14a>
			status_hor = AUTO_YELLOW;
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <fsm_automatic_2_run+0x160>)
 80005ce:	220a      	movs	r2, #10
 80005d0:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <fsm_automatic_2_run+0x170>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <fsm_automatic_2_run+0x168>)
 80005d8:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timeyellow));
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <fsm_automatic_2_run+0x170>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fa90 	bl	8000b04 <timeTimer>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 faf4 	bl	8001bd4 <setTimer2>
		}

		break;
 80005ec:	e03b      	b.n	8000666 <fsm_automatic_2_run+0x14a>
	case AUTO_YELLOW:
		SetYellowHor();
 80005ee:	f000 fd79 	bl	80010e4 <SetYellowHor>
		if (timer2_flag == 1){
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <fsm_automatic_2_run+0x16c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d137      	bne.n	800066a <fsm_automatic_2_run+0x14e>
			status_hor = AUTO_RED;
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <fsm_automatic_2_run+0x160>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	601a      	str	r2, [r3, #0]
			led34 = timered;
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <fsm_automatic_2_run+0x174>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <fsm_automatic_2_run+0x168>)
 8000606:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timered));
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <fsm_automatic_2_run+0x174>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fa79 	bl	8000b04 <timeTimer>
 8000612:	4603      	mov	r3, r0
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fadd 	bl	8001bd4 <setTimer2>
		}
		break;
 800061a:	e026      	b.n	800066a <fsm_automatic_2_run+0x14e>
	case MODIFY_RED:
		if (timer2_flag == 1){
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <fsm_automatic_2_run+0x16c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d124      	bne.n	800066e <fsm_automatic_2_run+0x152>
			BlinkyRedHor();
 8000624:	f000 fc56 	bl	8000ed4 <BlinkyRedHor>
			setTimer2(500);
 8000628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800062c:	f001 fad2 	bl	8001bd4 <setTimer2>
		}
		break;
 8000630:	e01d      	b.n	800066e <fsm_automatic_2_run+0x152>
	case MODIFY_GREEN:
		if (timer2_flag == 1){
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <fsm_automatic_2_run+0x16c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d11b      	bne.n	8000672 <fsm_automatic_2_run+0x156>
			BlinkyGreenHor();
 800063a:	f000 fc5d 	bl	8000ef8 <BlinkyGreenHor>
			setTimer2(500);
 800063e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000642:	f001 fac7 	bl	8001bd4 <setTimer2>
		}
		break;
 8000646:	e014      	b.n	8000672 <fsm_automatic_2_run+0x156>
	case MODIFY_YELLOW:
		if (timer2_flag == 1){
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <fsm_automatic_2_run+0x16c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d112      	bne.n	8000676 <fsm_automatic_2_run+0x15a>
			BlinkyYellowHor();
 8000650:	f000 fc64 	bl	8000f1c <BlinkyYellowHor>
			setTimer2(500);
 8000654:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000658:	f001 fabc 	bl	8001bd4 <setTimer2>
		}
		break;
 800065c:	e00b      	b.n	8000676 <fsm_automatic_2_run+0x15a>
	default:
		break;
 800065e:	bf00      	nop
 8000660:	e00a      	b.n	8000678 <fsm_automatic_2_run+0x15c>
		break;
 8000662:	bf00      	nop
 8000664:	e008      	b.n	8000678 <fsm_automatic_2_run+0x15c>
		break;
 8000666:	bf00      	nop
 8000668:	e006      	b.n	8000678 <fsm_automatic_2_run+0x15c>
		break;
 800066a:	bf00      	nop
 800066c:	e004      	b.n	8000678 <fsm_automatic_2_run+0x15c>
		break;
 800066e:	bf00      	nop
 8000670:	e002      	b.n	8000678 <fsm_automatic_2_run+0x15c>
		break;
 8000672:	bf00      	nop
 8000674:	e000      	b.n	8000678 <fsm_automatic_2_run+0x15c>
		break;
 8000676:	bf00      	nop
	}

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000c0 	.word	0x200000c0
 8000680:	20000010 	.word	0x20000010
 8000684:	2000001c 	.word	0x2000001c
 8000688:	20000540 	.word	0x20000540
 800068c:	20000014 	.word	0x20000014
 8000690:	2000000c 	.word	0x2000000c

08000694 <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	switch (status_mode){
 8000698:	4b89      	ldr	r3, [pc, #548]	; (80008c0 <fsm_mode_run+0x22c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b04      	cmp	r3, #4
 800069e:	f200 8103 	bhi.w	80008a8 <fsm_mode_run+0x214>
 80006a2:	a201      	add	r2, pc, #4	; (adr r2, 80006a8 <fsm_mode_run+0x14>)
 80006a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a8:	080006bd 	.word	0x080006bd
 80006ac:	080006e3 	.word	0x080006e3
 80006b0:	08000735 	.word	0x08000735
 80006b4:	080007bd 	.word	0x080007bd
 80006b8:	08000845 	.word	0x08000845
	case INIT:
		status_mode = MODE1;
 80006bc:	4b80      	ldr	r3, [pc, #512]	; (80008c0 <fsm_mode_run+0x22c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
		status_ver = INIT;
 80006c2:	4b80      	ldr	r3, [pc, #512]	; (80008c4 <fsm_mode_run+0x230>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
		status_hor = INIT;
 80006c8:	4b7f      	ldr	r3, [pc, #508]	; (80008c8 <fsm_mode_run+0x234>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
		status_pedes = Pedes_Off;
 80006ce:	4b7f      	ldr	r3, [pc, #508]	; (80008cc <fsm_mode_run+0x238>)
 80006d0:	2228      	movs	r2, #40	; 0x28
 80006d2:	601a      	str	r2, [r3, #0]
		status_led7seg = INIT;
 80006d4:	4b7e      	ldr	r3, [pc, #504]	; (80008d0 <fsm_mode_run+0x23c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
		index_led = 0;
 80006da:	4b7e      	ldr	r3, [pc, #504]	; (80008d4 <fsm_mode_run+0x240>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
		//setTimer1(500);
		break;
 80006e0:	e0eb      	b.n	80008ba <fsm_mode_run+0x226>
	case MODE1 :

		if (isButtonflag(but1) == 1){
 80006e2:	4b7d      	ldr	r3, [pc, #500]	; (80008d8 <fsm_mode_run+0x244>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fa1a 	bl	8000b20 <isButtonflag>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	f040 80dc 	bne.w	80008ac <fsm_mode_run+0x218>
			clearTimer1();
 80006f4:	f001 fa14 	bl	8001b20 <clearTimer1>
			clearTimer2();
 80006f8:	f001 fa22 	bl	8001b40 <clearTimer2>
			clearTimer3();
 80006fc:	f001 fa30 	bl	8001b60 <clearTimer3>
			status_mode = MODE2;
 8000700:	4b6f      	ldr	r3, [pc, #444]	; (80008c0 <fsm_mode_run+0x22c>)
 8000702:	2202      	movs	r2, #2
 8000704:	601a      	str	r2, [r3, #0]
			SetOffVerHor();// to when blinky, led red ver and hor are the same
 8000706:	f000 fc19 	bl	8000f3c <SetOffVerHor>
			status_ver = MODIFY_RED;
 800070a:	4b6e      	ldr	r3, [pc, #440]	; (80008c4 <fsm_mode_run+0x230>)
 800070c:	220c      	movs	r2, #12
 800070e:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_RED;
 8000710:	4b6d      	ldr	r3, [pc, #436]	; (80008c8 <fsm_mode_run+0x234>)
 8000712:	220c      	movs	r2, #12
 8000714:	601a      	str	r2, [r3, #0]
			led12 = MODE2;
 8000716:	4b71      	ldr	r3, [pc, #452]	; (80008dc <fsm_mode_run+0x248>)
 8000718:	2202      	movs	r2, #2
 800071a:	601a      	str	r2, [r3, #0]
			led34 = timered;
 800071c:	4b70      	ldr	r3, [pc, #448]	; (80008e0 <fsm_mode_run+0x24c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a70      	ldr	r2, [pc, #448]	; (80008e4 <fsm_mode_run+0x250>)
 8000722:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 8000724:	4b6a      	ldr	r3, [pc, #424]	; (80008d0 <fsm_mode_run+0x23c>)
 8000726:	221e      	movs	r2, #30
 8000728:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 800072a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072e:	f001 fa6b 	bl	8001c08 <setTimer3>
		}

		break;
 8000732:	e0bb      	b.n	80008ac <fsm_mode_run+0x218>
	case MODE2:
		if (isButtonflag(but1) == 1){
 8000734:	4b68      	ldr	r3, [pc, #416]	; (80008d8 <fsm_mode_run+0x244>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f9f1 	bl	8000b20 <isButtonflag>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d11a      	bne.n	800077a <fsm_mode_run+0xe6>
			clearTimer1();
 8000744:	f001 f9ec 	bl	8001b20 <clearTimer1>
			clearTimer2();
 8000748:	f001 f9fa 	bl	8001b40 <clearTimer2>
			clearTimer3();
 800074c:	f001 fa08 	bl	8001b60 <clearTimer3>
			status_mode = MODE3;
 8000750:	4b5b      	ldr	r3, [pc, #364]	; (80008c0 <fsm_mode_run+0x22c>)
 8000752:	2203      	movs	r2, #3
 8000754:	601a      	str	r2, [r3, #0]
			SetOffVerHor();
 8000756:	f000 fbf1 	bl	8000f3c <SetOffVerHor>
			status_ver = MODIFY_YELLOW;
 800075a:	4b5a      	ldr	r3, [pc, #360]	; (80008c4 <fsm_mode_run+0x230>)
 800075c:	220e      	movs	r2, #14
 800075e:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_YELLOW;
 8000760:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <fsm_mode_run+0x234>)
 8000762:	220e      	movs	r2, #14
 8000764:	601a      	str	r2, [r3, #0]
			led12 = MODE3;
 8000766:	4b5d      	ldr	r3, [pc, #372]	; (80008dc <fsm_mode_run+0x248>)
 8000768:	2203      	movs	r2, #3
 800076a:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 800076c:	4b5e      	ldr	r3, [pc, #376]	; (80008e8 <fsm_mode_run+0x254>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a5c      	ldr	r2, [pc, #368]	; (80008e4 <fsm_mode_run+0x250>)
 8000772:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 8000774:	4b56      	ldr	r3, [pc, #344]	; (80008d0 <fsm_mode_run+0x23c>)
 8000776:	221e      	movs	r2, #30
 8000778:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 800077a:	4b5c      	ldr	r3, [pc, #368]	; (80008ec <fsm_mode_run+0x258>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f9ce 	bl	8000b20 <isButtonflag>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d10b      	bne.n	80007a2 <fsm_mode_run+0x10e>
			led34++;
 800078a:	4b56      	ldr	r3, [pc, #344]	; (80008e4 <fsm_mode_run+0x250>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	4a54      	ldr	r2, [pc, #336]	; (80008e4 <fsm_mode_run+0x250>)
 8000792:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 8000794:	4b53      	ldr	r3, [pc, #332]	; (80008e4 <fsm_mode_run+0x250>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b63      	cmp	r3, #99	; 0x63
 800079a:	dd02      	ble.n	80007a2 <fsm_mode_run+0x10e>
				led34 = 0;
 800079c:	4b51      	ldr	r3, [pc, #324]	; (80008e4 <fsm_mode_run+0x250>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 80007a2:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <fsm_mode_run+0x25c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f9ba 	bl	8000b20 <isButtonflag>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d17e      	bne.n	80008b0 <fsm_mode_run+0x21c>
			timered  = led34;
 80007b2:	4b4c      	ldr	r3, [pc, #304]	; (80008e4 <fsm_mode_run+0x250>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a4a      	ldr	r2, [pc, #296]	; (80008e0 <fsm_mode_run+0x24c>)
 80007b8:	6013      	str	r3, [r2, #0]
		}
		break;
 80007ba:	e079      	b.n	80008b0 <fsm_mode_run+0x21c>
	case MODE3:

		if (isButtonflag(but1) == 1){
 80007bc:	4b46      	ldr	r3, [pc, #280]	; (80008d8 <fsm_mode_run+0x244>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f9ad 	bl	8000b20 <isButtonflag>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d11a      	bne.n	8000802 <fsm_mode_run+0x16e>
			clearTimer1();
 80007cc:	f001 f9a8 	bl	8001b20 <clearTimer1>
			clearTimer2();
 80007d0:	f001 f9b6 	bl	8001b40 <clearTimer2>
			clearTimer3();
 80007d4:	f001 f9c4 	bl	8001b60 <clearTimer3>
			status_mode = MODE4;
 80007d8:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <fsm_mode_run+0x22c>)
 80007da:	2204      	movs	r2, #4
 80007dc:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_GREEN;
 80007de:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <fsm_mode_run+0x230>)
 80007e0:	220d      	movs	r2, #13
 80007e2:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_GREEN;
 80007e4:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <fsm_mode_run+0x234>)
 80007e6:	220d      	movs	r2, #13
 80007e8:	601a      	str	r2, [r3, #0]
			SetOffVerHor();
 80007ea:	f000 fba7 	bl	8000f3c <SetOffVerHor>
			led12 = MODE4;
 80007ee:	4b3b      	ldr	r3, [pc, #236]	; (80008dc <fsm_mode_run+0x248>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 80007f4:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <fsm_mode_run+0x260>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a3a      	ldr	r2, [pc, #232]	; (80008e4 <fsm_mode_run+0x250>)
 80007fa:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80007fc:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <fsm_mode_run+0x23c>)
 80007fe:	221e      	movs	r2, #30
 8000800:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000802:	4b3a      	ldr	r3, [pc, #232]	; (80008ec <fsm_mode_run+0x258>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f98a 	bl	8000b20 <isButtonflag>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d10b      	bne.n	800082a <fsm_mode_run+0x196>
			led34++;
 8000812:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <fsm_mode_run+0x250>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a32      	ldr	r2, [pc, #200]	; (80008e4 <fsm_mode_run+0x250>)
 800081a:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 800081c:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <fsm_mode_run+0x250>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b63      	cmp	r3, #99	; 0x63
 8000822:	dd02      	ble.n	800082a <fsm_mode_run+0x196>
				led34 = 0;
 8000824:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <fsm_mode_run+0x250>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <fsm_mode_run+0x25c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f976 	bl	8000b20 <isButtonflag>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d13c      	bne.n	80008b4 <fsm_mode_run+0x220>
			timeyellow  = led34;
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <fsm_mode_run+0x250>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <fsm_mode_run+0x254>)
 8000840:	6013      	str	r3, [r2, #0]
		}

		break;
 8000842:	e037      	b.n	80008b4 <fsm_mode_run+0x220>
	case MODE4:
		if (isButtonflag(but1) == 1){
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <fsm_mode_run+0x244>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f969 	bl	8000b20 <isButtonflag>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d108      	bne.n	8000866 <fsm_mode_run+0x1d2>
			clearTimer1();
 8000854:	f001 f964 	bl	8001b20 <clearTimer1>
			clearTimer2();
 8000858:	f001 f972 	bl	8001b40 <clearTimer2>
			clearTimer3();
 800085c:	f001 f980 	bl	8001b60 <clearTimer3>
			status_mode = INIT;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <fsm_mode_run+0x22c>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
//			status_ver = INIT;
//			status_hor = INIT;
//			status_led7seg = MODE1_led7seg_1;
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <fsm_mode_run+0x258>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f958 	bl	8000b20 <isButtonflag>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d10b      	bne.n	800088e <fsm_mode_run+0x1fa>
			led34++;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <fsm_mode_run+0x250>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <fsm_mode_run+0x250>)
 800087e:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <fsm_mode_run+0x250>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b63      	cmp	r3, #99	; 0x63
 8000886:	dd02      	ble.n	800088e <fsm_mode_run+0x1fa>
				led34 = 0;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <fsm_mode_run+0x250>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <fsm_mode_run+0x25c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f944 	bl	8000b20 <isButtonflag>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10c      	bne.n	80008b8 <fsm_mode_run+0x224>
			timegreen = led34;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <fsm_mode_run+0x250>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <fsm_mode_run+0x260>)
 80008a4:	6013      	str	r3, [r2, #0]
		}
		break;
 80008a6:	e007      	b.n	80008b8 <fsm_mode_run+0x224>
	default:
		break;
 80008a8:	bf00      	nop
 80008aa:	e006      	b.n	80008ba <fsm_mode_run+0x226>
		break;
 80008ac:	bf00      	nop
 80008ae:	e004      	b.n	80008ba <fsm_mode_run+0x226>
		break;
 80008b0:	bf00      	nop
 80008b2:	e002      	b.n	80008ba <fsm_mode_run+0x226>
		break;
 80008b4:	bf00      	nop
 80008b6:	e000      	b.n	80008ba <fsm_mode_run+0x226>
		break;
 80008b8:	bf00      	nop
	}


}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000b8 	.word	0x200000b8
 80008c4:	200000bc 	.word	0x200000bc
 80008c8:	200000c0 	.word	0x200000c0
 80008cc:	200000c8 	.word	0x200000c8
 80008d0:	200000c4 	.word	0x200000c4
 80008d4:	200000cc 	.word	0x200000cc
 80008d8:	200000d0 	.word	0x200000d0
 80008dc:	20000018 	.word	0x20000018
 80008e0:	2000000c 	.word	0x2000000c
 80008e4:	2000001c 	.word	0x2000001c
 80008e8:	20000014 	.word	0x20000014
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000004 	.word	0x20000004
 80008f4:	20000010 	.word	0x20000010

080008f8 <fsm_mode_led7seg>:
 */

#include "fsm_mode_Led7Seg.h"
//int Ts = 10;
//int count = 1;
void fsm_mode_led7seg(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

	switch (status_led7seg){
 80008fc:	4b7c      	ldr	r3, [pc, #496]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b21      	cmp	r3, #33	; 0x21
 8000902:	f200 80e2 	bhi.w	8000aca <fsm_mode_led7seg+0x1d2>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <fsm_mode_led7seg+0x14>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000995 	.word	0x08000995
 8000910:	08000acb 	.word	0x08000acb
 8000914:	08000acb 	.word	0x08000acb
 8000918:	08000acb 	.word	0x08000acb
 800091c:	08000acb 	.word	0x08000acb
 8000920:	08000acb 	.word	0x08000acb
 8000924:	08000acb 	.word	0x08000acb
 8000928:	08000acb 	.word	0x08000acb
 800092c:	08000acb 	.word	0x08000acb
 8000930:	08000acb 	.word	0x08000acb
 8000934:	08000acb 	.word	0x08000acb
 8000938:	08000acb 	.word	0x08000acb
 800093c:	08000acb 	.word	0x08000acb
 8000940:	08000acb 	.word	0x08000acb
 8000944:	08000acb 	.word	0x08000acb
 8000948:	08000acb 	.word	0x08000acb
 800094c:	08000acb 	.word	0x08000acb
 8000950:	08000acb 	.word	0x08000acb
 8000954:	08000acb 	.word	0x08000acb
 8000958:	08000acb 	.word	0x08000acb
 800095c:	080009ad 	.word	0x080009ad
 8000960:	080009cf 	.word	0x080009cf
 8000964:	080009ef 	.word	0x080009ef
 8000968:	08000a2f 	.word	0x08000a2f
 800096c:	08000acb 	.word	0x08000acb
 8000970:	08000acb 	.word	0x08000acb
 8000974:	08000acb 	.word	0x08000acb
 8000978:	08000acb 	.word	0x08000acb
 800097c:	08000acb 	.word	0x08000acb
 8000980:	08000acb 	.word	0x08000acb
 8000984:	08000a4f 	.word	0x08000a4f
 8000988:	08000a6f 	.word	0x08000a6f
 800098c:	08000a8f 	.word	0x08000a8f
 8000990:	08000aab 	.word	0x08000aab
		case INIT:
				status_led7seg = MODE1_led7seg_1;
 8000994:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 8000996:	2214      	movs	r2, #20
 8000998:	601a      	str	r2, [r3, #0]
				//updateLedBuffer(led12,led34);
				//SetLed7Seg1On();
				//update7SEG(index_led);
				index_led++;
 800099a:	4b56      	ldr	r3, [pc, #344]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 80009a2:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 80009a4:	20fa      	movs	r0, #250	; 0xfa
 80009a6:	f001 f92f 	bl	8001c08 <setTimer3>
			break;
 80009aa:	e09f      	b.n	8000aec <fsm_mode_led7seg+0x1f4>
		case MODE1_led7seg_1:
			if (timer3_flag == 1){
 80009ac:	4b52      	ldr	r3, [pc, #328]	; (8000af8 <fsm_mode_led7seg+0x200>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	f040 808c 	bne.w	8000ace <fsm_mode_led7seg+0x1d6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_2;
 80009b6:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 80009b8:	2215      	movs	r2, #21
 80009ba:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 80009bc:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a4c      	ldr	r2, [pc, #304]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 80009c4:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 80009c6:	20fa      	movs	r0, #250	; 0xfa
 80009c8:	f001 f91e 	bl	8001c08 <setTimer3>
			}
			break;
 80009cc:	e07f      	b.n	8000ace <fsm_mode_led7seg+0x1d6>
		case MODE1_led7seg_2:
			if (timer3_flag == 1){
 80009ce:	4b4a      	ldr	r3, [pc, #296]	; (8000af8 <fsm_mode_led7seg+0x200>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d17d      	bne.n	8000ad2 <fsm_mode_led7seg+0x1da>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_3;
 80009d6:	4b46      	ldr	r3, [pc, #280]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 80009d8:	2216      	movs	r2, #22
 80009da:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 80009dc:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a44      	ldr	r2, [pc, #272]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 80009e4:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(255);
 80009e6:	20ff      	movs	r0, #255	; 0xff
 80009e8:	f001 f90e 	bl	8001c08 <setTimer3>
			}
			break;
 80009ec:	e071      	b.n	8000ad2 <fsm_mode_led7seg+0x1da>
		case MODE1_led7seg_3:

			if (timer3_flag == 1){
 80009ee:	4b42      	ldr	r3, [pc, #264]	; (8000af8 <fsm_mode_led7seg+0x200>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d16f      	bne.n	8000ad6 <fsm_mode_led7seg+0x1de>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_4;
 80009f6:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 80009f8:	2217      	movs	r2, #23
 80009fa:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 80009fc:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
//			    	led34--;
//			    	count = 1;
//			    }
//			    else count++;
//				setTimer3(Ts);
				if (led12 - 1 != 0 ) led12--;
 8000a02:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <fsm_mode_led7seg+0x204>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d004      	beq.n	8000a14 <fsm_mode_led7seg+0x11c>
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <fsm_mode_led7seg+0x204>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <fsm_mode_led7seg+0x204>)
 8000a12:	6013      	str	r3, [r2, #0]
				if (led34 - 1 != 0 ) led34--;
 8000a14:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <fsm_mode_led7seg+0x208>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d004      	beq.n	8000a26 <fsm_mode_led7seg+0x12e>
 8000a1c:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <fsm_mode_led7seg+0x208>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	4a37      	ldr	r2, [pc, #220]	; (8000b00 <fsm_mode_led7seg+0x208>)
 8000a24:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 8000a26:	20fa      	movs	r0, #250	; 0xfa
 8000a28:	f001 f8ee 	bl	8001c08 <setTimer3>
			}
			break;
 8000a2c:	e053      	b.n	8000ad6 <fsm_mode_led7seg+0x1de>
		case MODE1_led7seg_4:
			if (timer3_flag == 1){
 8000a2e:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <fsm_mode_led7seg+0x200>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d151      	bne.n	8000ada <fsm_mode_led7seg+0x1e2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_1;
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 8000a38:	2214      	movs	r2, #20
 8000a3a:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a2c      	ldr	r2, [pc, #176]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 8000a44:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 8000a46:	20fa      	movs	r0, #250	; 0xfa
 8000a48:	f001 f8de 	bl	8001c08 <setTimer3>
			}
			break;
 8000a4c:	e045      	b.n	8000ada <fsm_mode_led7seg+0x1e2>
		case MODE_MODIFY_led7seg_1:
			if (timer3_flag == 1){
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <fsm_mode_led7seg+0x200>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d143      	bne.n	8000ade <fsm_mode_led7seg+0x1e6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_2;
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 8000a58:	221f      	movs	r2, #31
 8000a5a:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	4a24      	ldr	r2, [pc, #144]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 8000a64:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 8000a66:	20fa      	movs	r0, #250	; 0xfa
 8000a68:	f001 f8ce 	bl	8001c08 <setTimer3>
			}
			break;
 8000a6c:	e037      	b.n	8000ade <fsm_mode_led7seg+0x1e6>
		case MODE_MODIFY_led7seg_2:
			if (timer3_flag == 1){
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <fsm_mode_led7seg+0x200>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d135      	bne.n	8000ae2 <fsm_mode_led7seg+0x1ea>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_3;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 8000a78:	2220      	movs	r2, #32
 8000a7a:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 8000a84:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 8000a86:	20fa      	movs	r0, #250	; 0xfa
 8000a88:	f001 f8be 	bl	8001c08 <setTimer3>
			}
			break;
 8000a8c:	e029      	b.n	8000ae2 <fsm_mode_led7seg+0x1ea>
		case MODE_MODIFY_led7seg_3:
			if (timer3_flag == 1){
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <fsm_mode_led7seg+0x200>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d127      	bne.n	8000ae6 <fsm_mode_led7seg+0x1ee>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_4;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 8000a98:	2221      	movs	r2, #33	; 0x21
 8000a9a:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000aa2:	20fa      	movs	r0, #250	; 0xfa
 8000aa4:	f001 f8b0 	bl	8001c08 <setTimer3>
			}
			break;
 8000aa8:	e01d      	b.n	8000ae6 <fsm_mode_led7seg+0x1ee>
		case MODE_MODIFY_led7seg_4:
			if (timer3_flag == 1){
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <fsm_mode_led7seg+0x200>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d11b      	bne.n	8000aea <fsm_mode_led7seg+0x1f2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_1;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <fsm_mode_led7seg+0x1f8>)
 8000ab4:	221e      	movs	r2, #30
 8000ab6:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <fsm_mode_led7seg+0x1fc>)
 8000ac0:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 8000ac2:	20fa      	movs	r0, #250	; 0xfa
 8000ac4:	f001 f8a0 	bl	8001c08 <setTimer3>
			}
			break;
 8000ac8:	e00f      	b.n	8000aea <fsm_mode_led7seg+0x1f2>
		default:
			break;
 8000aca:	bf00      	nop
 8000acc:	e00e      	b.n	8000aec <fsm_mode_led7seg+0x1f4>
			break;
 8000ace:	bf00      	nop
 8000ad0:	e00c      	b.n	8000aec <fsm_mode_led7seg+0x1f4>
			break;
 8000ad2:	bf00      	nop
 8000ad4:	e00a      	b.n	8000aec <fsm_mode_led7seg+0x1f4>
			break;
 8000ad6:	bf00      	nop
 8000ad8:	e008      	b.n	8000aec <fsm_mode_led7seg+0x1f4>
			break;
 8000ada:	bf00      	nop
 8000adc:	e006      	b.n	8000aec <fsm_mode_led7seg+0x1f4>
			break;
 8000ade:	bf00      	nop
 8000ae0:	e004      	b.n	8000aec <fsm_mode_led7seg+0x1f4>
			break;
 8000ae2:	bf00      	nop
 8000ae4:	e002      	b.n	8000aec <fsm_mode_led7seg+0x1f4>
			break;
 8000ae6:	bf00      	nop
 8000ae8:	e000      	b.n	8000aec <fsm_mode_led7seg+0x1f4>
			break;
 8000aea:	bf00      	nop
	}
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000c4 	.word	0x200000c4
 8000af4:	200000cc 	.word	0x200000cc
 8000af8:	20000544 	.word	0x20000544
 8000afc:	20000018 	.word	0x20000018
 8000b00:	2000001c 	.word	0x2000001c

08000b04 <timeTimer>:
int timeyellow = 2;

int led12 = 5;
int led34 = 3;

int timeTimer(int time){
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	return time * 1000;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <isButtonflag+0x30>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d106      	bne.n	8000b42 <isButtonflag+0x22>
		flagForButton[index] = 0;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <isButtonflag+0x30>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
		return 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <isButtonflag+0x24>
	}
	return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200000e8 	.word	0x200000e8

08000b54 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d901      	bls.n	8000b68 <is_button_pressed+0x14>
 8000b64:	2300      	movs	r3, #0
 8000b66:	e007      	b.n	8000b78 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <is_button_pressed+0x30>)
 8000b6c:	5cd3      	ldrb	r3, [r2, r3]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bf0c      	ite	eq
 8000b72:	2301      	moveq	r3, #1
 8000b74:	2300      	movne	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200000d4 	.word	0x200000d4

08000b88 <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d901      	bls.n	8000b9c <is_button_pressed_3s+0x14>
 8000b98:	23ff      	movs	r3, #255	; 0xff
 8000b9a:	e007      	b.n	8000bac <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <is_button_pressed_3s+0x30>)
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	bf0c      	ite	eq
 8000ba6:	2301      	moveq	r3, #1
 8000ba8:	2300      	movne	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200000e4 	.word	0x200000e4

08000bbc <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
int counter10S = 0;
void fsm_for_input_processing(uint8_t index ){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4a63      	ldr	r2, [pc, #396]	; (8000d58 <fsm_for_input_processing+0x19c>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	f000 8089 	beq.w	8000ce4 <fsm_for_input_processing+0x128>
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	f300 80bb 	bgt.w	8000d4e <fsm_for_input_processing+0x192>
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <fsm_for_input_processing+0x26>
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d037      	beq.n	8000c50 <fsm_for_input_processing+0x94>
					}
				}

			break ;
	}
}
 8000be0:	e0b5      	b.n	8000d4e <fsm_for_input_processing+0x192>
			if( is_button_pressed(index)){
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffb5 	bl	8000b54 <is_button_pressed>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d011      	beq.n	8000c14 <fsm_for_input_processing+0x58>
				buttonState[index] = BUTTON_PRESSED ;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4a59      	ldr	r2, [pc, #356]	; (8000d58 <fsm_for_input_processing+0x19c>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4a58      	ldr	r2, [pc, #352]	; (8000d5c <fsm_for_input_processing+0x1a0>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4a56      	ldr	r2, [pc, #344]	; (8000d60 <fsm_for_input_processing+0x1a4>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4a55      	ldr	r2, [pc, #340]	; (8000d64 <fsm_for_input_processing+0x1a8>)
 8000c0e:	2101      	movs	r1, #1
 8000c10:	54d1      	strb	r1, [r2, r3]
			break ;
 8000c12:	e099      	b.n	8000d48 <fsm_for_input_processing+0x18c>
				if(timer4_flag==1 && status_mode != MODE1){
 8000c14:	4b54      	ldr	r3, [pc, #336]	; (8000d68 <fsm_for_input_processing+0x1ac>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	f040 8095 	bne.w	8000d48 <fsm_for_input_processing+0x18c>
 8000c1e:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <fsm_for_input_processing+0x1b0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	f000 8090 	beq.w	8000d48 <fsm_for_input_processing+0x18c>
					counter10S++;
 8000c28:	4b51      	ldr	r3, [pc, #324]	; (8000d70 <fsm_for_input_processing+0x1b4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	4a50      	ldr	r2, [pc, #320]	; (8000d70 <fsm_for_input_processing+0x1b4>)
 8000c30:	6013      	str	r3, [r2, #0]
					if(counter10S >= 10){
 8000c32:	4b4f      	ldr	r3, [pc, #316]	; (8000d70 <fsm_for_input_processing+0x1b4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b09      	cmp	r3, #9
 8000c38:	dd05      	ble.n	8000c46 <fsm_for_input_processing+0x8a>
						counter10S = 0;
 8000c3a:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <fsm_for_input_processing+0x1b4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
						status_mode = INIT;
 8000c40:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <fsm_for_input_processing+0x1b0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
					setTimer4(1000);
 8000c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4a:	f000 fff7 	bl	8001c3c <setTimer4>
			break ;
 8000c4e:	e07b      	b.n	8000d48 <fsm_for_input_processing+0x18c>
			counter10S = 0;
 8000c50:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <fsm_for_input_processing+0x1b4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
			if (!is_button_pressed(index)){
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff7b 	bl	8000b54 <is_button_pressed>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10d      	bne.n	8000c80 <fsm_for_input_processing+0xc4>
				buttonState[index] =	 BUTTON_RELEASED ;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4a3c      	ldr	r2, [pc, #240]	; (8000d58 <fsm_for_input_processing+0x19c>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a3d      	ldr	r2, [pc, #244]	; (8000d64 <fsm_for_input_processing+0x1a8>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4a39      	ldr	r2, [pc, #228]	; (8000d5c <fsm_for_input_processing+0x1a0>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000c7e:	e065      	b.n	8000d4c <fsm_for_input_processing+0x190>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4a36      	ldr	r2, [pc, #216]	; (8000d5c <fsm_for_input_processing+0x1a0>)
 8000c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c88:	2b63      	cmp	r3, #99	; 0x63
 8000c8a:	d809      	bhi.n	8000ca0 <fsm_for_input_processing+0xe4>
						counterForButtonPress1s[index]++;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a33      	ldr	r2, [pc, #204]	; (8000d5c <fsm_for_input_processing+0x1a0>)
 8000c90:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c94:	3201      	adds	r2, #1
 8000c96:	b291      	uxth	r1, r2
 8000c98:	4a30      	ldr	r2, [pc, #192]	; (8000d5c <fsm_for_input_processing+0x1a0>)
 8000c9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c9e:	e011      	b.n	8000cc4 <fsm_for_input_processing+0x108>
					flagForButtonPress1s[index] = 1;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a2f      	ldr	r2, [pc, #188]	; (8000d60 <fsm_for_input_processing+0x1a4>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4a2e      	ldr	r2, [pc, #184]	; (8000d64 <fsm_for_input_processing+0x1a8>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4a30      	ldr	r2, [pc, #192]	; (8000d74 <fsm_for_input_processing+0x1b8>)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4a27      	ldr	r2, [pc, #156]	; (8000d5c <fsm_for_input_processing+0x1a0>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff5e 	bl	8000b88 <is_button_pressed_3s>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d03c      	beq.n	8000d4c <fsm_for_input_processing+0x190>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <fsm_for_input_processing+0x19c>)
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	4a20      	ldr	r2, [pc, #128]	; (8000d60 <fsm_for_input_processing+0x1a4>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	54d1      	strb	r1, [r2, r3]
			break ;
 8000ce2:	e033      	b.n	8000d4c <fsm_for_input_processing+0x190>
			counter10S = 0;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <fsm_for_input_processing+0x1b4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
			if (! is_button_pressed(index)){
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff31 	bl	8000b54 <is_button_pressed>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10d      	bne.n	8000d14 <fsm_for_input_processing+0x158>
				buttonState[index] = BUTTON_RELEASED;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <fsm_for_input_processing+0x19c>)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <fsm_for_input_processing+0x1a8>)
 8000d04:	2100      	movs	r1, #0
 8000d06:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	; (8000d74 <fsm_for_input_processing+0x1b8>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000d12:	e01c      	b.n	8000d4e <fsm_for_input_processing+0x192>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <fsm_for_input_processing+0x1b8>)
 8000d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1c:	2b13      	cmp	r3, #19
 8000d1e:	d809      	bhi.n	8000d34 <fsm_for_input_processing+0x178>
							counterForButtonAfterPress1s[index]++;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <fsm_for_input_processing+0x1b8>)
 8000d24:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d28:	3201      	adds	r2, #1
 8000d2a:	b291      	uxth	r1, r2
 8000d2c:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <fsm_for_input_processing+0x1b8>)
 8000d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000d32:	e00c      	b.n	8000d4e <fsm_for_input_processing+0x192>
						flagForButton[index] = 1;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <fsm_for_input_processing+0x1a8>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <fsm_for_input_processing+0x1b8>)
 8000d40:	2100      	movs	r1, #0
 8000d42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000d46:	e002      	b.n	8000d4e <fsm_for_input_processing+0x192>
			break ;
 8000d48:	bf00      	nop
 8000d4a:	e000      	b.n	8000d4e <fsm_for_input_processing+0x192>
			break ;
 8000d4c:	bf00      	nop
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000fc 	.word	0x200000fc
 8000d5c:	200000ec 	.word	0x200000ec
 8000d60:	200000e4 	.word	0x200000e4
 8000d64:	200000e8 	.word	0x200000e8
 8000d68:	20000548 	.word	0x20000548
 8000d6c:	200000b8 	.word	0x200000b8
 8000d70:	20000100 	.word	0x20000100
 8000d74:	200000f4 	.word	0x200000f4

08000d78 <button_reading>:




void button_reading(void){
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	e05f      	b.n	8000e44 <button_reading+0xcc>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	4932      	ldr	r1, [pc, #200]	; (8000e54 <button_reading+0xdc>)
 8000d8a:	5c89      	ldrb	r1, [r1, r2]
 8000d8c:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <button_reading+0xe0>)
 8000d8e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4931      	ldr	r1, [pc, #196]	; (8000e5c <button_reading+0xe4>)
 8000d96:	5c89      	ldrb	r1, [r1, r2]
 8000d98:	4a2e      	ldr	r2, [pc, #184]	; (8000e54 <button_reading+0xdc>)
 8000d9a:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d832      	bhi.n	8000e08 <button_reading+0x90>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <button_reading+0x30>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dcd 	.word	0x08000dcd
 8000db0:	08000de1 	.word	0x08000de1
 8000db4:	08000df5 	.word	0x08000df5
		  case 0: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000db8:	79fc      	ldrb	r4, [r7, #7]
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <button_reading+0xe8>)
 8000dbe:	f001 fd6f 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <button_reading+0xe4>)
 8000dc8:	551a      	strb	r2, [r3, r4]
			  break;
 8000dca:	e01e      	b.n	8000e0a <button_reading+0x92>
		  case 1: // read data from Button 2
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000dcc:	79fc      	ldrb	r4, [r7, #7]
 8000dce:	2140      	movs	r1, #64	; 0x40
 8000dd0:	4824      	ldr	r0, [pc, #144]	; (8000e64 <button_reading+0xec>)
 8000dd2:	f001 fd65 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <button_reading+0xe4>)
 8000ddc:	551a      	strb	r2, [r3, r4]
			  break;
 8000dde:	e014      	b.n	8000e0a <button_reading+0x92>
		  case 2: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000de0:	79fc      	ldrb	r4, [r7, #7]
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	481f      	ldr	r0, [pc, #124]	; (8000e64 <button_reading+0xec>)
 8000de6:	f001 fd5b 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <button_reading+0xe4>)
 8000df0:	551a      	strb	r2, [r3, r4]
			  break;
 8000df2:	e00a      	b.n	8000e0a <button_reading+0x92>
		  case 3: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_P_GPIO_Port, BUTTON_P_Pin);
 8000df4:	79fc      	ldrb	r4, [r7, #7]
 8000df6:	2101      	movs	r1, #1
 8000df8:	4819      	ldr	r0, [pc, #100]	; (8000e60 <button_reading+0xe8>)
 8000dfa:	f001 fd51 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <button_reading+0xe4>)
 8000e04:	551a      	strb	r2, [r3, r4]
			  break;
 8000e06:	e000      	b.n	8000e0a <button_reading+0x92>
		  default:
			  break;
 8000e08:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <button_reading+0xe4>)
 8000e0e:	5cd2      	ldrb	r2, [r2, r3]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4910      	ldr	r1, [pc, #64]	; (8000e54 <button_reading+0xdc>)
 8000e14:	5ccb      	ldrb	r3, [r1, r3]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d111      	bne.n	8000e3e <button_reading+0xc6>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <button_reading+0xdc>)
 8000e1e:	5cd2      	ldrb	r2, [r2, r3]
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <button_reading+0xe0>)
 8000e24:	5ccb      	ldrb	r3, [r1, r3]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d109      	bne.n	8000e3e <button_reading+0xc6>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000e2a:	79fa      	ldrb	r2, [r7, #7]
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	490a      	ldr	r1, [pc, #40]	; (8000e58 <button_reading+0xe0>)
 8000e30:	5c89      	ldrb	r1, [r1, r2]
 8000e32:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <button_reading+0xf0>)
 8000e34:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff febf 	bl	8000bbc <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	3301      	adds	r3, #1
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d99c      	bls.n	8000d84 <button_reading+0xc>
		  }

	}
}
 8000e4a:	bf00      	nop
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	200000dc 	.word	0x200000dc
 8000e58:	200000e0 	.word	0x200000e0
 8000e5c:	200000d8 	.word	0x200000d8
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40011000 	.word	0x40011000
 8000e68:	200000d4 	.word	0x200000d4

08000e6c <BlinkyRedVer>:
//	led_buffer[1] = led1_2 % 10;
//	led_buffer[2] = led3_4 / 10;
//	led_buffer[3] = led3_4 % 10;
//}

void BlinkyRedVer(){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);

//	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
	//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <BlinkyRedVer+0x20>)
 8000e78:	f001 fd29 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8000e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <BlinkyRedVer+0x20>)
 8000e82:	f001 fd3c 	bl	80028fe <HAL_GPIO_TogglePin>

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40011000 	.word	0x40011000

08000e90 <BlinkyGreenVer>:
void BlinkyGreenVer(){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8000e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <BlinkyGreenVer+0x20>)
 8000e9a:	f001 fd30 	bl	80028fe <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <BlinkyGreenVer+0x20>)
 8000ea6:	f001 fd12 	bl	80028ce <HAL_GPIO_WritePin>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40011000 	.word	0x40011000

08000eb4 <BlinkyYellowVer>:
void BlinkyYellowVer(){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8000eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <BlinkyYellowVer+0x1c>)
 8000ebe:	f001 fd1e 	bl	80028fe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8000ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec6:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <BlinkyYellowVer+0x1c>)
 8000ec8:	f001 fd19 	bl	80028fe <HAL_GPIO_TogglePin>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40011000 	.word	0x40011000

08000ed4 <BlinkyRedHor>:

void BlinkyRedHor(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_TogglePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2110      	movs	r1, #16
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <BlinkyRedHor+0x1c>)
 8000ede:	f001 fcf6 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <BlinkyRedHor+0x20>)
 8000ee6:	f001 fd0a 	bl	80028fe <HAL_GPIO_TogglePin>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	40010c00 	.word	0x40010c00

08000ef8 <BlinkyGreenHor>:
void BlinkyGreenHor(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000efc:	2110      	movs	r1, #16
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <BlinkyGreenHor+0x1c>)
 8000f00:	f001 fcfd 	bl	80028fe <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2101      	movs	r1, #1
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <BlinkyGreenHor+0x20>)
 8000f0a:	f001 fce0 	bl	80028ce <HAL_GPIO_WritePin>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40010800 	.word	0x40010800
 8000f18:	40010c00 	.word	0x40010c00

08000f1c <BlinkyYellowHor>:
void BlinkyYellowHor(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000f20:	2110      	movs	r1, #16
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <BlinkyYellowHor+0x18>)
 8000f24:	f001 fceb 	bl	80028fe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <BlinkyYellowHor+0x1c>)
 8000f2c:	f001 fce7 	bl	80028fe <HAL_GPIO_TogglePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010800 	.word	0x40010800
 8000f38:	40010c00 	.word	0x40010c00

08000f3c <SetOffVerHor>:
//	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
//	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
//	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
//}

void SetOffVerHor(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <SetOffVerHor+0x34>)
 8000f48:	f001 fcc1 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <SetOffVerHor+0x34>)
 8000f54:	f001 fcbb 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <SetOffVerHor+0x38>)
 8000f5e:	f001 fcb6 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2101      	movs	r1, #1
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <SetOffVerHor+0x3c>)
 8000f68:	f001 fcb1 	bl	80028ce <HAL_GPIO_WritePin>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40010800 	.word	0x40010800
 8000f78:	40010c00 	.word	0x40010c00

08000f7c <SetOffVer>:


void SetOffVer(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <SetOffVer+0x20>)
 8000f88:	f001 fca1 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4802      	ldr	r0, [pc, #8]	; (8000f9c <SetOffVer+0x20>)
 8000f94:	f001 fc9b 	bl	80028ce <HAL_GPIO_WritePin>

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40011000 	.word	0x40011000

08000fa0 <SetPedesRed>:

void SetPedesRed(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <SetPedesRed+0x20>)
 8000fac:	f001 fc8f 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <SetPedesRed+0x20>)
 8000fb8:	f001 fc89 	bl	80028ce <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010c00 	.word	0x40010c00

08000fc4 <SetPedesGreen>:
void SetPedesGreen(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <SetPedesGreen+0x20>)
 8000fd0:	f001 fc7d 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fda:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <SetPedesGreen+0x20>)
 8000fdc:	f001 fc77 	bl	80028ce <HAL_GPIO_WritePin>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40010c00 	.word	0x40010c00

08000fe8 <SetPedesOff>:

void SetPedesOff(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <SetPedesOff+0x20>)
 8000ff4:	f001 fc6b 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffe:	4802      	ldr	r0, [pc, #8]	; (8001008 <SetPedesOff+0x20>)
 8001000:	f001 fc65 	bl	80028ce <HAL_GPIO_WritePin>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40010c00 	.word	0x40010c00

0800100c <SetRedVer>:

void SetRedVer(){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <SetRedVer+0x20>)
 8001018:	f001 fc59 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001022:	4802      	ldr	r0, [pc, #8]	; (800102c <SetRedVer+0x20>)
 8001024:	f001 fc53 	bl	80028ce <HAL_GPIO_WritePin>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40011000 	.word	0x40011000

08001030 <SetGreenVer>:

void SetGreenVer(){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <SetGreenVer+0x20>)
 800103c:	f001 fc47 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001046:	4802      	ldr	r0, [pc, #8]	; (8001050 <SetGreenVer+0x20>)
 8001048:	f001 fc41 	bl	80028ce <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40011000 	.word	0x40011000

08001054 <SetYellowVer>:

void SetYellowVer(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <SetYellowVer+0x20>)
 8001060:	f001 fc35 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106a:	4802      	ldr	r0, [pc, #8]	; (8001074 <SetYellowVer+0x20>)
 800106c:	f001 fc2f 	bl	80028ce <HAL_GPIO_WritePin>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40011000 	.word	0x40011000

08001078 <SetOffHor>:


void SetOffHor(){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2110      	movs	r1, #16
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <SetOffHor+0x1c>)
 8001082:	f001 fc24 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <SetOffHor+0x20>)
 800108c:	f001 fc1f 	bl	80028ce <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40010800 	.word	0x40010800
 8001098:	40010c00 	.word	0x40010c00

0800109c <SetRedHor>:

void SetRedHor(){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2110      	movs	r1, #16
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <SetRedHor+0x1c>)
 80010a6:	f001 fc12 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2101      	movs	r1, #1
 80010ae:	4803      	ldr	r0, [pc, #12]	; (80010bc <SetRedHor+0x20>)
 80010b0:	f001 fc0d 	bl	80028ce <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00

080010c0 <SetGreenHor>:

void SetGreenHor(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2110      	movs	r1, #16
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <SetGreenHor+0x1c>)
 80010ca:	f001 fc00 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2101      	movs	r1, #1
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <SetGreenHor+0x20>)
 80010d4:	f001 fbfb 	bl	80028ce <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010800 	.word	0x40010800
 80010e0:	40010c00 	.word	0x40010c00

080010e4 <SetYellowHor>:

void SetYellowHor(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2110      	movs	r1, #16
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <SetYellowHor+0x1c>)
 80010ee:	f001 fbee 	bl	80028ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2101      	movs	r1, #1
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <SetYellowHor+0x20>)
 80010f8:	f001 fbe9 	bl	80028ce <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40010800 	.word	0x40010800
 8001104:	40010c00 	.word	0x40010c00

08001108 <Buzzer_On>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char str[50];
int increase = 30;
//int delay = 380;
void Buzzer_On(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
		if (timer6_flag == 1){
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <Buzzer_On+0x70>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d12e      	bne.n	8001172 <Buzzer_On+0x6a>
			dutycycle += 1000 / ((timered)*5);
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <Buzzer_On+0x74>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001122:	fb92 f2f3 	sdiv	r2, r2, r3
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <Buzzer_On+0x78>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <Buzzer_On+0x78>)
 800112e:	6013      	str	r3, [r2, #0]
			if (dutycycle > 1000) dutycycle = 1000;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <Buzzer_On+0x78>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001138:	dd03      	ble.n	8001142 <Buzzer_On+0x3a>
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <Buzzer_On+0x78>)
 800113c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001140:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <Buzzer_On+0x78>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <Buzzer_On+0x7c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	635a      	str	r2, [r3, #52]	; 0x34
//			HAL_Delay(delay);
			setTimer6(delay);
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <Buzzer_On+0x80>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fda7 	bl	8001ca4 <setTimer6>
			delay -= increase;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <Buzzer_On+0x80>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <Buzzer_On+0x84>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <Buzzer_On+0x80>)
 8001162:	6013      	str	r3, [r2, #0]
			if (delay <= 0) delay = 10;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <Buzzer_On+0x80>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	dc02      	bgt.n	8001172 <Buzzer_On+0x6a>
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <Buzzer_On+0x80>)
 800116e:	220a      	movs	r2, #10
 8001170:	601a      	str	r2, [r3, #0]
	}
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000550 	.word	0x20000550
 800117c:	2000000c 	.word	0x2000000c
 8001180:	2000020c 	.word	0x2000020c
 8001184:	2000014c 	.word	0x2000014c
 8001188:	20000024 	.word	0x20000024
 800118c:	20000020 	.word	0x20000020

08001190 <Buzzer_Off>:
void Buzzer_Off(){
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	dutycycle = 0;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <Buzzer_Off+0x1c>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <Buzzer_Off+0x1c>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <Buzzer_Off+0x20>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	2000020c 	.word	0x2000020c
 80011b0:	2000014c 	.word	0x2000014c

080011b4 <Uart_transmit>:
void Uart_transmit(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d#","!7SEG:",led12), 1000);
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <Uart_transmit+0x28>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <Uart_transmit+0x2c>)
 80011be:	4909      	ldr	r1, [pc, #36]	; (80011e4 <Uart_transmit+0x30>)
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <Uart_transmit+0x34>)
 80011c2:	f003 fc37 	bl	8004a34 <siprintf>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	4906      	ldr	r1, [pc, #24]	; (80011e8 <Uart_transmit+0x34>)
 80011d0:	4806      	ldr	r0, [pc, #24]	; (80011ec <Uart_transmit+0x38>)
 80011d2:	f002 ff72 	bl	80040ba <HAL_UART_Transmit>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000018 	.word	0x20000018
 80011e0:	08005340 	.word	0x08005340
 80011e4:	08005348 	.word	0x08005348
 80011e8:	200001d8 	.word	0x200001d8
 80011ec:	20000194 	.word	0x20000194

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f4:	f000 ffb0 	bl	8002158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f8:	f000 f88a 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fc:	f000 f9b6 	bl	800156c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001200:	f000 f8c8 	bl	8001394 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001204:	f000 f912 	bl	800142c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001208:	f000 f986 	bl	8001518 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800120c:	4832      	ldr	r0, [pc, #200]	; (80012d8 <main+0xe8>)
 800120e:	f001 fff9 	bl	8003204 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001212:	2100      	movs	r1, #0
 8001214:	4831      	ldr	r0, [pc, #196]	; (80012dc <main+0xec>)
 8001216:	f002 f89f 	bl	8003358 <HAL_TIM_PWM_Start>

  status_mode = INIT;
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <main+0xf0>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

  setTimer1(1000);
 8001220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001224:	f000 fcbc 	bl	8001ba0 <setTimer1>
  setTimer2(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122c:	f000 fcd2 	bl	8001bd4 <setTimer2>
  setTimer3(1000);
 8001230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001234:	f000 fce8 	bl	8001c08 <setTimer3>
  setTimer4(1000);
 8001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123c:	f000 fcfe 	bl	8001c3c <setTimer4>
  setTimer5(1000);
 8001240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001244:	f000 fd14 	bl	8001c70 <setTimer5>
  setTimer6(1000);
 8001248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124c:	f000 fd2a 	bl	8001ca4 <setTimer6>

  SCH_Init();
 8001250:	f000 fad8 	bl	8001804 <SCH_Init>
  SCH_Add_Task(timerRun, 0, 10);
 8001254:	220a      	movs	r2, #10
 8001256:	2100      	movs	r1, #0
 8001258:	4822      	ldr	r0, [pc, #136]	; (80012e4 <main+0xf4>)
 800125a:	f000 fadf 	bl	800181c <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 10);
 800125e:	220a      	movs	r2, #10
 8001260:	2100      	movs	r1, #0
 8001262:	4821      	ldr	r0, [pc, #132]	; (80012e8 <main+0xf8>)
 8001264:	f000 fada 	bl	800181c <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_run, 0 , 10);
 8001268:	220a      	movs	r2, #10
 800126a:	2100      	movs	r1, #0
 800126c:	481f      	ldr	r0, [pc, #124]	; (80012ec <main+0xfc>)
 800126e:	f000 fad5 	bl	800181c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_1_run, 0 , 10);
 8001272:	220a      	movs	r2, #10
 8001274:	2100      	movs	r1, #0
 8001276:	481e      	ldr	r0, [pc, #120]	; (80012f0 <main+0x100>)
 8001278:	f000 fad0 	bl	800181c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_2_run, 0 , 10);
 800127c:	220a      	movs	r2, #10
 800127e:	2100      	movs	r1, #0
 8001280:	481c      	ldr	r0, [pc, #112]	; (80012f4 <main+0x104>)
 8001282:	f000 facb 	bl	800181c <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_led7seg, 0, 10);
 8001286:	220a      	movs	r2, #10
 8001288:	2100      	movs	r1, #0
 800128a:	481b      	ldr	r0, [pc, #108]	; (80012f8 <main+0x108>)
 800128c:	f000 fac6 	bl	800181c <SCH_Add_Task>
  SCH_Add_Task(pedestrian_cramble, 0, 10);
 8001290:	220a      	movs	r2, #10
 8001292:	2100      	movs	r1, #0
 8001294:	4819      	ldr	r0, [pc, #100]	; (80012fc <main+0x10c>)
 8001296:	f000 fac1 	bl	800181c <SCH_Add_Task>
  SCH_Add_Task(Uart_transmit, 0, 10);
 800129a:	220a      	movs	r2, #10
 800129c:	2100      	movs	r1, #0
 800129e:	4818      	ldr	r0, [pc, #96]	; (8001300 <main+0x110>)
 80012a0:	f000 fabc 	bl	800181c <SCH_Add_Task>

  TM1637_SetBrightness(7);
 80012a4:	2007      	movs	r0, #7
 80012a6:	f7fe ffef 	bl	8000288 <TM1637_SetBrightness>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80012aa:	f000 fb77 	bl	800199c <SCH_Dispatch_Tasks>
	  if (timer5_flag == 1){
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <main+0x114>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d1f9      	bne.n	80012aa <main+0xba>
//		 HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d#","!7SEG:",led12), 1000);
		  TM1637_DisplayDecimal(led12*100+led34,1);
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <main+0x118>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2264      	movs	r2, #100	; 0x64
 80012bc:	fb03 f202 	mul.w	r2, r3, r2
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <main+0x11c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	2101      	movs	r1, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7fe ff6f 	bl	80001ac <TM1637_DisplayDecimal>
		  setTimer5(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f000 fcce 	bl	8001c70 <setTimer5>
	  SCH_Dispatch_Tasks();
 80012d4:	e7e9      	b.n	80012aa <main+0xba>
 80012d6:	bf00      	nop
 80012d8:	20000104 	.word	0x20000104
 80012dc:	2000014c 	.word	0x2000014c
 80012e0:	200000b8 	.word	0x200000b8
 80012e4:	08001cd9 	.word	0x08001cd9
 80012e8:	08000d79 	.word	0x08000d79
 80012ec:	08000695 	.word	0x08000695
 80012f0:	080003a5 	.word	0x080003a5
 80012f4:	0800051d 	.word	0x0800051d
 80012f8:	080008f9 	.word	0x080008f9
 80012fc:	080016d1 	.word	0x080016d1
 8001300:	080011b5 	.word	0x080011b5
 8001304:	2000054c 	.word	0x2000054c
 8001308:	20000018 	.word	0x20000018
 800130c:	2000001c 	.word	0x2000001c

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	2228      	movs	r2, #40	; 0x28
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fb80 	bl	8004a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001336:	2301      	movs	r3, #1
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133a:	2310      	movs	r3, #16
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001342:	2300      	movs	r3, #0
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001346:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f001 faed 	bl	8002930 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800135c:	f000 f9b2 	bl	80016c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fd5a 	bl	8002e34 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001386:	f000 f99d 	bl	80016c4 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3740      	adds	r7, #64	; 0x40
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_TIM2_Init+0x94>)
 80013b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_TIM2_Init+0x94>)
 80013ba:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80013be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_TIM2_Init+0x94>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_TIM2_Init+0x94>)
 80013c8:	2209      	movs	r2, #9
 80013ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_TIM2_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_TIM2_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <MX_TIM2_Init+0x94>)
 80013da:	f001 fec3 	bl	8003164 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013e4:	f000 f96e 	bl	80016c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_TIM2_Init+0x94>)
 80013f6:	f002 fa17 	bl	8003828 <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001400:	f000 f960 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_TIM2_Init+0x94>)
 8001412:	f002 fd95 	bl	8003f40 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 f952 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000104 	.word	0x20000104

0800142c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08e      	sub	sp, #56	; 0x38
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
 8001458:	615a      	str	r2, [r3, #20]
 800145a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800145c:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM3_Init+0xe4>)
 800145e:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <MX_TIM3_Init+0xe8>)
 8001460:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001462:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <MX_TIM3_Init+0xe4>)
 8001464:	223f      	movs	r2, #63	; 0x3f
 8001466:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_TIM3_Init+0xe4>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800146e:	4b28      	ldr	r3, [pc, #160]	; (8001510 <MX_TIM3_Init+0xe4>)
 8001470:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001474:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_TIM3_Init+0xe4>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_TIM3_Init+0xe4>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001482:	4823      	ldr	r0, [pc, #140]	; (8001510 <MX_TIM3_Init+0xe4>)
 8001484:	f001 fe6e 	bl	8003164 <HAL_TIM_Base_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800148e:	f000 f919 	bl	80016c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149c:	4619      	mov	r1, r3
 800149e:	481c      	ldr	r0, [pc, #112]	; (8001510 <MX_TIM3_Init+0xe4>)
 80014a0:	f002 f9c2 	bl	8003828 <HAL_TIM_ConfigClockSource>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014aa:	f000 f90b 	bl	80016c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014ae:	4818      	ldr	r0, [pc, #96]	; (8001510 <MX_TIM3_Init+0xe4>)
 80014b0:	f001 fefa 	bl	80032a8 <HAL_TIM_PWM_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014ba:	f000 f903 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	4619      	mov	r1, r3
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <MX_TIM3_Init+0xe4>)
 80014ce:	f002 fd37 	bl	8003f40 <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014d8:	f000 f8f4 	bl	80016c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014dc:	2360      	movs	r3, #96	; 0x60
 80014de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM3_Init+0xe4>)
 80014f4:	f002 f8da 	bl	80036ac <HAL_TIM_PWM_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014fe:	f000 f8e1 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM3_Init+0xe4>)
 8001504:	f000 fcec 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 8001508:	bf00      	nop
 800150a:	3738      	adds	r7, #56	; 0x38
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000014c 	.word	0x2000014c
 8001514:	40000400 	.word	0x40000400

08001518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART2_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001524:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001550:	f002 fd66 	bl	8004020 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f000 f8b3 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000194 	.word	0x20000194
 8001568:	40004400 	.word	0x40004400

0800156c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <MX_GPIO_Init+0x148>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <MX_GPIO_Init+0x148>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <MX_GPIO_Init+0x148>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <MX_GPIO_Init+0x148>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a45      	ldr	r2, [pc, #276]	; (80016b4 <MX_GPIO_Init+0x148>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <MX_GPIO_Init+0x148>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <MX_GPIO_Init+0x148>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a3f      	ldr	r2, [pc, #252]	; (80016b4 <MX_GPIO_Init+0x148>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <MX_GPIO_Init+0x148>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	483a      	ldr	r0, [pc, #232]	; (80016b8 <MX_GPIO_Init+0x14c>)
 80015ce:	f001 f97e 	bl	80028ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f240 3101 	movw	r1, #769	; 0x301
 80015d8:	4838      	ldr	r0, [pc, #224]	; (80016bc <MX_GPIO_Init+0x150>)
 80015da:	f001 f978 	bl	80028ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLK_Pin|DATA_Pin|LIGHT1_B_Pin|LIGHT1_A_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80015e4:	4836      	ldr	r0, [pc, #216]	; (80016c0 <MX_GPIO_Init+0x154>)
 80015e6:	f001 f972 	bl	80028ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_P_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_P_Pin|BUTTON_1_Pin;
 80015ea:	2303      	movs	r3, #3
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	482e      	ldr	r0, [pc, #184]	; (80016b8 <MX_GPIO_Init+0x14c>)
 80015fe:	f000 ffcb 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIGHT2_A_Pin */
  GPIO_InitStruct.Pin = LIGHT2_A_Pin;
 8001602:	2310      	movs	r3, #16
 8001604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2302      	movs	r3, #2
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIGHT2_A_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4619      	mov	r1, r3
 8001618:	4827      	ldr	r0, [pc, #156]	; (80016b8 <MX_GPIO_Init+0x14c>)
 800161a:	f000 ffbd 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT2_B_Pin P_LIGHT_A_Pin P_LIGHT_B_Pin */
  GPIO_InitStruct.Pin = LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin;
 800161e:	f240 3301 	movw	r3, #769	; 0x301
 8001622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2302      	movs	r3, #2
 800162e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4821      	ldr	r0, [pc, #132]	; (80016bc <MX_GPIO_Init+0x150>)
 8001638:	f000 ffae 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800163c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001642:	2312      	movs	r3, #18
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	4619      	mov	r1, r3
 8001650:	481a      	ldr	r0, [pc, #104]	; (80016bc <MX_GPIO_Init+0x150>)
 8001652:	f000 ffa1 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin;
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165e:	2301      	movs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	4815      	ldr	r0, [pc, #84]	; (80016c0 <MX_GPIO_Init+0x154>)
 800166a:	f000 ff95 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 800166e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4619      	mov	r1, r3
 8001686:	480e      	ldr	r0, [pc, #56]	; (80016c0 <MX_GPIO_Init+0x154>)
 8001688:	f000 ff86 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT1_B_Pin LIGHT1_A_Pin */
  GPIO_InitStruct.Pin = LIGHT1_B_Pin|LIGHT1_A_Pin;
 800168c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2302      	movs	r3, #2
 800169c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	4619      	mov	r1, r3
 80016a4:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_GPIO_Init+0x154>)
 80016a6:	f000 ff77 	bl	8002598 <HAL_GPIO_Init>

}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010800 	.word	0x40010800
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	40011000 	.word	0x40011000

080016c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016cc:	e7fe      	b.n	80016cc <Error_Handler+0x8>
	...

080016d0 <pedestrian_cramble>:
//int counter_Pedes_On = 0;
//
int dutycycle = 0;
int delay = 380;
int count = 0;
void pedestrian_cramble(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	switch (status_pedes){
 80016d4:	4b45      	ldr	r3, [pc, #276]	; (80017ec <pedestrian_cramble+0x11c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b29      	cmp	r3, #41	; 0x29
 80016da:	d037      	beq.n	800174c <pedestrian_cramble+0x7c>
 80016dc:	2b29      	cmp	r3, #41	; 0x29
 80016de:	dc7c      	bgt.n	80017da <pedestrian_cramble+0x10a>
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d054      	beq.n	800178e <pedestrian_cramble+0xbe>
 80016e4:	2b28      	cmp	r3, #40	; 0x28
 80016e6:	d178      	bne.n	80017da <pedestrian_cramble+0x10a>
	case Pedes_Off:
		SetPedesOff();
 80016e8:	f7ff fc7e 	bl	8000fe8 <SetPedesOff>
		Buzzer_Off();
 80016ec:	f7ff fd50 	bl	8001190 <Buzzer_Off>
		if (isButtonflag(butp) == 1){
 80016f0:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <pedestrian_cramble+0x120>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fa13 	bl	8000b20 <isButtonflag>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d16e      	bne.n	80017de <pedestrian_cramble+0x10e>
			count = 0;
 8001700:	4b3c      	ldr	r3, [pc, #240]	; (80017f4 <pedestrian_cramble+0x124>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
			if (status_ver == AUTO_RED){
 8001706:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <pedestrian_cramble+0x128>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b08      	cmp	r3, #8
 800170c:	d113      	bne.n	8001736 <pedestrian_cramble+0x66>
				status_pedes = Pedes_Go;
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <pedestrian_cramble+0x11c>)
 8001710:	2229      	movs	r2, #41	; 0x29
 8001712:	601a      	str	r2, [r3, #0]
				dutycycle = 0;
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <pedestrian_cramble+0x12c>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
				delay = 380;
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <pedestrian_cramble+0x130>)
 800171c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001720:	601a      	str	r2, [r3, #0]
				clearTimer6();
 8001722:	f000 fa2d 	bl	8001b80 <clearTimer6>
				Buzzer_On();
 8001726:	f7ff fcef 	bl	8001108 <Buzzer_On>
				count++;
 800172a:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <pedestrian_cramble+0x124>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <pedestrian_cramble+0x124>)
 8001732:	6013      	str	r3, [r2, #0]
				status_pedes = Pedes_Stop;
				Buzzer_Off();
				count++;
			}
		}
		break;
 8001734:	e053      	b.n	80017de <pedestrian_cramble+0x10e>
				status_pedes = Pedes_Stop;
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <pedestrian_cramble+0x11c>)
 8001738:	2220      	movs	r2, #32
 800173a:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 800173c:	f7ff fd28 	bl	8001190 <Buzzer_Off>
				count++;
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <pedestrian_cramble+0x124>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <pedestrian_cramble+0x124>)
 8001748:	6013      	str	r3, [r2, #0]
		break;
 800174a:	e048      	b.n	80017de <pedestrian_cramble+0x10e>
	case Pedes_Go:
		SetPedesGreen();
 800174c:	f7ff fc3a 	bl	8000fc4 <SetPedesGreen>
		Buzzer_On();
 8001750:	f7ff fcda 	bl	8001108 <Buzzer_On>
		if (status_ver == AUTO_GREEN || status_ver == AUTO_YELLOW){
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <pedestrian_cramble+0x128>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b09      	cmp	r3, #9
 800175a:	d003      	beq.n	8001764 <pedestrian_cramble+0x94>
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <pedestrian_cramble+0x128>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b0a      	cmp	r3, #10
 8001762:	d13e      	bne.n	80017e2 <pedestrian_cramble+0x112>
			if (count >= Ncycle_Pe_off * 2) { // 2 cycle => Off
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <pedestrian_cramble+0x124>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b03      	cmp	r3, #3
 800176a:	dd05      	ble.n	8001778 <pedestrian_cramble+0xa8>
				status_pedes = Pedes_Off;
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <pedestrian_cramble+0x11c>)
 800176e:	2228      	movs	r2, #40	; 0x28
 8001770:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 8001772:	f7ff fd0d 	bl	8001190 <Buzzer_Off>
				status_pedes = Pedes_Stop;
				Buzzer_Off();
				count++;
			}
		}
		break;
 8001776:	e034      	b.n	80017e2 <pedestrian_cramble+0x112>
				status_pedes = Pedes_Stop;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <pedestrian_cramble+0x11c>)
 800177a:	2220      	movs	r2, #32
 800177c:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 800177e:	f7ff fd07 	bl	8001190 <Buzzer_Off>
				count++;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <pedestrian_cramble+0x124>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <pedestrian_cramble+0x124>)
 800178a:	6013      	str	r3, [r2, #0]
		break;
 800178c:	e029      	b.n	80017e2 <pedestrian_cramble+0x112>
	case Pedes_Stop:
		SetPedesRed();
 800178e:	f7ff fc07 	bl	8000fa0 <SetPedesRed>
		Buzzer_Off();
 8001792:	f7ff fcfd 	bl	8001190 <Buzzer_Off>
		if (status_ver == AUTO_RED){
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <pedestrian_cramble+0x128>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b08      	cmp	r3, #8
 800179c:	d123      	bne.n	80017e6 <pedestrian_cramble+0x116>
			if (count >= Ncycle_Pe_off * 2) {//2 cycle => Off
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <pedestrian_cramble+0x124>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	dd05      	ble.n	80017b2 <pedestrian_cramble+0xe2>
				status_pedes = Pedes_Off;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <pedestrian_cramble+0x11c>)
 80017a8:	2228      	movs	r2, #40	; 0x28
 80017aa:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 80017ac:	f7ff fcf0 	bl	8001190 <Buzzer_Off>
				clearTimer6();
				Buzzer_On();
				count++;
			}
		}
		break;
 80017b0:	e019      	b.n	80017e6 <pedestrian_cramble+0x116>
				status_pedes = Pedes_Go;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <pedestrian_cramble+0x11c>)
 80017b4:	2229      	movs	r2, #41	; 0x29
 80017b6:	601a      	str	r2, [r3, #0]
				dutycycle = 0;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <pedestrian_cramble+0x12c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
				delay = 380;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <pedestrian_cramble+0x130>)
 80017c0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80017c4:	601a      	str	r2, [r3, #0]
				clearTimer6();
 80017c6:	f000 f9db 	bl	8001b80 <clearTimer6>
				Buzzer_On();
 80017ca:	f7ff fc9d 	bl	8001108 <Buzzer_On>
				count++;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <pedestrian_cramble+0x124>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <pedestrian_cramble+0x124>)
 80017d6:	6013      	str	r3, [r2, #0]
		break;
 80017d8:	e005      	b.n	80017e6 <pedestrian_cramble+0x116>
	default:
		break;
 80017da:	bf00      	nop
 80017dc:	e004      	b.n	80017e8 <pedestrian_cramble+0x118>
		break;
 80017de:	bf00      	nop
 80017e0:	e002      	b.n	80017e8 <pedestrian_cramble+0x118>
		break;
 80017e2:	bf00      	nop
 80017e4:	e000      	b.n	80017e8 <pedestrian_cramble+0x118>
		break;
 80017e6:	bf00      	nop
	}
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200000c8 	.word	0x200000c8
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000210 	.word	0x20000210
 80017f8:	200000bc 	.word	0x200000bc
 80017fc:	2000020c 	.word	0x2000020c
 8001800:	20000024 	.word	0x20000024

08001804 <SCH_Init>:
 */
#include "scheduler.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <SCH_Init+0x14>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000534 	.word	0x20000534

0800181c <SCH_Add_Task>:

//int Tick = 10; // 10ms

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8001828:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <SCH_Add_Task+0xb4>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b27      	cmp	r3, #39	; 0x27
 800182e:	d84a      	bhi.n	80018c6 <SCH_Add_Task+0xaa>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <SCH_Add_Task+0xb4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <SCH_Add_Task+0xb8>)
 8001838:	460b      	mov	r3, r1
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TICK;
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <SCH_Add_Task+0xb4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <SCH_Add_Task+0xbc>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	491f      	ldr	r1, [pc, #124]	; (80018d4 <SCH_Add_Task+0xb8>)
 8001858:	4603      	mov	r3, r0
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4403      	add	r3, r0
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	3304      	adds	r3, #4
 8001864:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD/TICK;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <SCH_Add_Task+0xb4>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <SCH_Add_Task+0xbc>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	4917      	ldr	r1, [pc, #92]	; (80018d4 <SCH_Add_Task+0xb8>)
 8001878:	4603      	mov	r3, r0
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4403      	add	r3, r0
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	3308      	adds	r3, #8
 8001884:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <SCH_Add_Task+0xb4>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <SCH_Add_Task+0xb8>)
 800188e:	460b      	mov	r3, r1
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	330c      	adds	r3, #12
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <SCH_Add_Task+0xb4>)
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <SCH_Add_Task+0xb4>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <SCH_Add_Task+0xb8>)
 80018ac:	460b      	mov	r3, r1
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3310      	adds	r3, #16
 80018b8:	6018      	str	r0, [r3, #0]


		current_index_task++;
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SCH_Add_Task+0xb4>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <SCH_Add_Task+0xb4>)
 80018c4:	701a      	strb	r2, [r3, #0]
	}
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000534 	.word	0x20000534
 80018d4:	20000214 	.word	0x20000214
 80018d8:	cccccccd 	.word	0xcccccccd

080018dc <SCH_Update>:

void SCH_Update(void){
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	e048      	b.n	800197a <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0 ){
 80018e8:	492a      	ldr	r1, [pc, #168]	; (8001994 <SCH_Update+0xb8>)
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	3304      	adds	r3, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d013      	beq.n	8001926 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 80018fe:	4925      	ldr	r1, [pc, #148]	; (8001994 <SCH_Update+0xb8>)
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3304      	adds	r3, #4
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	1e59      	subs	r1, r3, #1
 8001912:	4820      	ldr	r0, [pc, #128]	; (8001994 <SCH_Update+0xb8>)
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4403      	add	r3, r0
 8001920:	3304      	adds	r3, #4
 8001922:	6019      	str	r1, [r3, #0]
 8001924:	e026      	b.n	8001974 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay =SCH_tasks_G[i].Period;
 8001926:	491b      	ldr	r1, [pc, #108]	; (8001994 <SCH_Update+0xb8>)
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	3308      	adds	r3, #8
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	4816      	ldr	r0, [pc, #88]	; (8001994 <SCH_Update+0xb8>)
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4403      	add	r3, r0
 8001946:	3304      	adds	r3, #4
 8001948:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 800194a:	4912      	ldr	r1, [pc, #72]	; (8001994 <SCH_Update+0xb8>)
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	330c      	adds	r3, #12
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	b2d8      	uxtb	r0, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <SCH_Update+0xb8>)
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	330c      	adds	r3, #12
 8001970:	4602      	mov	r2, r0
 8001972:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < current_index_task; i++){
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <SCH_Update+0xbc>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4293      	cmp	r3, r2
 8001984:	dbb0      	blt.n	80018e8 <SCH_Update+0xc>
		}
	}
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000214 	.word	0x20000214
 8001998:	20000534 	.word	0x20000534

0800199c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	e039      	b.n	8001a1c <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[i].RunMe > 0 ){
 80019a8:	4922      	ldr	r1, [pc, #136]	; (8001a34 <SCH_Dispatch_Tasks+0x98>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	330c      	adds	r3, #12
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d02b      	beq.n	8001a16 <SCH_Dispatch_Tasks+0x7a>
			SCH_tasks_G[i].RunMe--;
 80019be:	491d      	ldr	r1, [pc, #116]	; (8001a34 <SCH_Dispatch_Tasks+0x98>)
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	330c      	adds	r3, #12
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b2d8      	uxtb	r0, r3
 80019d4:	4917      	ldr	r1, [pc, #92]	; (8001a34 <SCH_Dispatch_Tasks+0x98>)
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	330c      	adds	r3, #12
 80019e4:	4602      	mov	r2, r0
 80019e6:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)(); // Run the task
 80019e8:	4912      	ldr	r1, [pc, #72]	; (8001a34 <SCH_Dispatch_Tasks+0x98>)
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4798      	blx	r3
			if (SCH_tasks_G[i].Period == 0 ){ // one shot task
 80019fa:	490e      	ldr	r1, [pc, #56]	; (8001a34 <SCH_Dispatch_Tasks+0x98>)
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3308      	adds	r3, #8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(i);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f813 	bl	8001a3c <SCH_Delete_Task>
	for (int i = 0 ; i < current_index_task; i++){
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SCH_Dispatch_Tasks+0x9c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4293      	cmp	r3, r2
 8001a26:	dbbf      	blt.n	80019a8 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000214 	.word	0x20000214
 8001a38:	20000534 	.word	0x20000534

08001a3c <SCH_Delete_Task>:


void SCH_Delete_Task(int index){
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	if (index >= current_index_task ){ //
 8001a44:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <SCH_Delete_Task+0xdc>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	da5d      	bge.n	8001b0c <SCH_Delete_Task+0xd0>

		return;
	}else {
		for (int i = index; i <current_index_task - 1; i++){
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e04d      	b.n	8001af2 <SCH_Delete_Task+0xb6>
			SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	4930      	ldr	r1, [pc, #192]	; (8001b1c <SCH_Delete_Task+0xe0>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	6819      	ldr	r1, [r3, #0]
 8001a68:	482c      	ldr	r0, [pc, #176]	; (8001b1c <SCH_Delete_Task+0xe0>)
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4403      	add	r3, r0
 8001a76:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	4927      	ldr	r1, [pc, #156]	; (8001b1c <SCH_Delete_Task+0xe0>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3308      	adds	r3, #8
 8001a8a:	6819      	ldr	r1, [r3, #0]
 8001a8c:	4823      	ldr	r0, [pc, #140]	; (8001b1c <SCH_Delete_Task+0xe0>)
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4403      	add	r3, r0
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i+1].RunMe;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	491e      	ldr	r1, [pc, #120]	; (8001b1c <SCH_Delete_Task+0xe0>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	330c      	adds	r3, #12
 8001ab0:	7818      	ldrb	r0, [r3, #0]
 8001ab2:	491a      	ldr	r1, [pc, #104]	; (8001b1c <SCH_Delete_Task+0xe0>)
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	4914      	ldr	r1, [pc, #80]	; (8001b1c <SCH_Delete_Task+0xe0>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	4810      	ldr	r0, [pc, #64]	; (8001b1c <SCH_Delete_Task+0xe0>)
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4403      	add	r3, r0
 8001ae8:	3304      	adds	r3, #4
 8001aea:	6019      	str	r1, [r3, #0]
		for (int i = index; i <current_index_task - 1; i++){
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3301      	adds	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <SCH_Delete_Task+0xdc>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	dbab      	blt.n	8001a56 <SCH_Delete_Task+0x1a>
		}
		current_index_task--;
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SCH_Delete_Task+0xdc>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SCH_Delete_Task+0xdc>)
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e000      	b.n	8001b0e <SCH_Delete_Task+0xd2>
		return;
 8001b0c:	bf00      	nop
	}
}
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000534 	.word	0x20000534
 8001b1c:	20000214 	.word	0x20000214

08001b20 <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <clearTimer1+0x18>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <clearTimer1+0x1c>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	20000558 	.word	0x20000558
 8001b3c:	2000053c 	.word	0x2000053c

08001b40 <clearTimer2>:
void clearTimer2(){
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <clearTimer2+0x18>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <clearTimer2+0x1c>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	2000055c 	.word	0x2000055c
 8001b5c:	20000540 	.word	0x20000540

08001b60 <clearTimer3>:
void clearTimer3(){
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <clearTimer3+0x18>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <clearTimer3+0x1c>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000560 	.word	0x20000560
 8001b7c:	20000544 	.word	0x20000544

08001b80 <clearTimer6>:
}
void clearTimer5(){
	timer5_counter = 0;
	timer5_flag = 1;
}
void clearTimer6(){
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
	timer6_counter = 0;
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <clearTimer6+0x18>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
	timer6_flag = 1;
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <clearTimer6+0x1c>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	2000056c 	.word	0x2000056c
 8001b9c:	20000550 	.word	0x20000550

08001ba0 <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <setTimer1+0x28>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bb2:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <setTimer1+0x2c>)
 8001bb4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <setTimer1+0x30>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000028 	.word	0x20000028
 8001bcc:	20000558 	.word	0x20000558
 8001bd0:	2000053c 	.word	0x2000053c

08001bd4 <setTimer2>:

void setTimer2( int duration){
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <setTimer2+0x28>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001be6:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <setTimer2+0x2c>)
 8001be8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <setTimer2+0x30>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000028 	.word	0x20000028
 8001c00:	2000055c 	.word	0x2000055c
 8001c04:	20000540 	.word	0x20000540

08001c08 <setTimer3>:

void setTimer3( int duration){
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <setTimer3+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c1a:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <setTimer3+0x2c>)
 8001c1c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <setTimer3+0x30>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000028 	.word	0x20000028
 8001c34:	20000560 	.word	0x20000560
 8001c38:	20000544 	.word	0x20000544

08001c3c <setTimer4>:

void setTimer4( int duration){
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <setTimer4+0x28>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c4e:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <setTimer4+0x2c>)
 8001c50:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <setTimer4+0x30>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000028 	.word	0x20000028
 8001c68:	20000564 	.word	0x20000564
 8001c6c:	20000548 	.word	0x20000548

08001c70 <setTimer5>:

void setTimer5( int duration){
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <setTimer5+0x28>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c82:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <setTimer5+0x2c>)
 8001c84:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <setTimer5+0x30>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000028 	.word	0x20000028
 8001c9c:	20000568 	.word	0x20000568
 8001ca0:	2000054c 	.word	0x2000054c

08001ca4 <setTimer6>:
void setTimer6( int duration){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <setTimer6+0x28>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <setTimer6+0x2c>)
 8001cb8:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <setTimer6+0x30>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000028 	.word	0x20000028
 8001cd0:	2000056c 	.word	0x2000056c
 8001cd4:	20000550 	.word	0x20000550

08001cd8 <timerRun>:

void timerRun (){
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 8001cdc:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <timerRun+0xec>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	dd0b      	ble.n	8001cfc <timerRun+0x24>
		timer0_counter --;
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <timerRun+0xec>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	4a36      	ldr	r2, [pc, #216]	; (8001dc4 <timerRun+0xec>)
 8001cec:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 8001cee:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <timerRun+0xec>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	dc02      	bgt.n	8001cfc <timerRun+0x24>
			timer0_flag = 1;
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <timerRun+0xf0>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <timerRun+0xf4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	dd0b      	ble.n	8001d1c <timerRun+0x44>
		timer1_counter--;
 8001d04:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <timerRun+0xf4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	4a30      	ldr	r2, [pc, #192]	; (8001dcc <timerRun+0xf4>)
 8001d0c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <timerRun+0xf4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	dc02      	bgt.n	8001d1c <timerRun+0x44>
			timer1_flag = 1;
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <timerRun+0xf8>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <timerRun+0xfc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	dd0b      	ble.n	8001d3c <timerRun+0x64>
		timer2_counter--;
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <timerRun+0xfc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	4a2a      	ldr	r2, [pc, #168]	; (8001dd4 <timerRun+0xfc>)
 8001d2c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001d2e:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <timerRun+0xfc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	dc02      	bgt.n	8001d3c <timerRun+0x64>
			timer2_flag = 1;
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <timerRun+0x100>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <timerRun+0x104>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	dd0b      	ble.n	8001d5c <timerRun+0x84>
		timer3_counter--;
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <timerRun+0x104>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <timerRun+0x104>)
 8001d4c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <timerRun+0x104>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	dc02      	bgt.n	8001d5c <timerRun+0x84>
			timer3_flag = 1;
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <timerRun+0x108>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <timerRun+0x10c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	dd0b      	ble.n	8001d7c <timerRun+0xa4>
		timer4_counter--;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <timerRun+0x10c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <timerRun+0x10c>)
 8001d6c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <timerRun+0x10c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	dc02      	bgt.n	8001d7c <timerRun+0xa4>
			timer4_flag = 1;
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <timerRun+0x110>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <timerRun+0x114>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	dd0b      	ble.n	8001d9c <timerRun+0xc4>
			timer5_counter--;
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <timerRun+0x114>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	4a18      	ldr	r2, [pc, #96]	; (8001dec <timerRun+0x114>)
 8001d8c:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <timerRun+0x114>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	dc02      	bgt.n	8001d9c <timerRun+0xc4>
				timer5_flag = 1;
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <timerRun+0x118>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <timerRun+0x11c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	dd0b      	ble.n	8001dbc <timerRun+0xe4>
			timer6_counter--;
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <timerRun+0x11c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <timerRun+0x11c>)
 8001dac:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <timerRun+0x11c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	dc02      	bgt.n	8001dbc <timerRun+0xe4>
				timer6_flag = 1;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <timerRun+0x120>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000554 	.word	0x20000554
 8001dc8:	20000538 	.word	0x20000538
 8001dcc:	20000558 	.word	0x20000558
 8001dd0:	2000053c 	.word	0x2000053c
 8001dd4:	2000055c 	.word	0x2000055c
 8001dd8:	20000540 	.word	0x20000540
 8001ddc:	20000560 	.word	0x20000560
 8001de0:	20000544 	.word	0x20000544
 8001de4:	20000564 	.word	0x20000564
 8001de8:	20000548 	.word	0x20000548
 8001dec:	20000568 	.word	0x20000568
 8001df0:	2000054c 	.word	0x2000054c
 8001df4:	2000056c 	.word	0x2000056c
 8001df8:	20000550 	.word	0x20000550

08001dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6193      	str	r3, [r2, #24]
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_MspInit+0x60>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_MspInit+0x60>)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010000 	.word	0x40010000

08001e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e70:	d114      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_TIM_Base_MspInit+0x78>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_TIM_Base_MspInit+0x78>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_TIM_Base_MspInit+0x78>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	201c      	movs	r0, #28
 8001e90:	f000 fa9b 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e94:	201c      	movs	r0, #28
 8001e96:	f000 fab4 	bl	8002402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e9a:	e018      	b.n	8001ece <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_TIM_Base_MspInit+0x7c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d113      	bne.n	8001ece <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_TIM_Base_MspInit+0x78>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_TIM_Base_MspInit+0x78>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_TIM_Base_MspInit+0x78>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	201d      	movs	r0, #29
 8001ec4:	f000 fa81 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ec8:	201d      	movs	r0, #29
 8001eca:	f000 fa9a 	bl	8002402 <HAL_NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40000400 	.word	0x40000400

08001ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_TIM_MspPostInit+0x58>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d117      	bne.n	8001f30 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_TIM_MspPostInit+0x5c>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_TIM_MspPostInit+0x5c>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_TIM_MspPostInit+0x5c>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f18:	2340      	movs	r3, #64	; 0x40
 8001f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_TIM_MspPostInit+0x60>)
 8001f2c:	f000 fb34 	bl	8002598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40000400 	.word	0x40000400
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010800 	.word	0x40010800

08001f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <HAL_UART_MspInit+0x98>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d137      	bne.n	8001fd4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_UART_MspInit+0x9c>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_UART_MspInit+0x9c>)
 8001f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6e:	61d3      	str	r3, [r2, #28]
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_UART_MspInit+0x9c>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_UART_MspInit+0x9c>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_UART_MspInit+0x9c>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_UART_MspInit+0x9c>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f94:	2304      	movs	r3, #4
 8001f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480f      	ldr	r0, [pc, #60]	; (8001fe4 <HAL_UART_MspInit+0xa0>)
 8001fa8:	f000 faf6 	bl	8002598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fac:	2308      	movs	r3, #8
 8001fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4809      	ldr	r0, [pc, #36]	; (8001fe4 <HAL_UART_MspInit+0xa0>)
 8001fc0:	f000 faea 	bl	8002598 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2026      	movs	r0, #38	; 0x26
 8001fca:	f000 f9fe 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fce:	2026      	movs	r0, #38	; 0x26
 8001fd0:	f000 fa17 	bl	8002402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40004400 	.word	0x40004400
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010800 	.word	0x40010800

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <NMI_Handler+0x4>

08001fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <UsageFault_Handler+0x4>

08002006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202e:	f000 f8d9 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <TIM2_IRQHandler+0x10>)
 800203e:	f001 fa2d 	bl	800349c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000104 	.word	0x20000104

0800204c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <TIM3_IRQHandler+0x10>)
 8002052:	f001 fa23 	bl	800349c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000014c 	.word	0x2000014c

08002060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <USART2_IRQHandler+0x10>)
 8002066:	f002 f8bb 	bl	80041e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000194 	.word	0x20000194

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a4:	f002 fc94 	bl	80049d0 <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e009      	b.n	80020c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <_sbrk+0x64>)
 80020c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20005000 	.word	0x20005000
 80020d4:	00000400 	.word	0x00000400
 80020d8:	20000570 	.word	0x20000570
 80020dc:	20000588 	.word	0x20000588

080020e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_PeriodElapsedCallback+0x16>
//		button_reading();
//		timerRun();
		//getKeyInput();
		SCH_Update();
 80020fe:	f7ff fbed 	bl	80018dc <SCH_Update>
	}
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800210c:	480c      	ldr	r0, [pc, #48]	; (8002140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210e:	490d      	ldr	r1, [pc, #52]	; (8002144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002124:	4c0a      	ldr	r4, [pc, #40]	; (8002150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002132:	f7ff ffd5 	bl	80020e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002136:	f002 fc51 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800213a:	f7ff f859 	bl	80011f0 <main>
  bx lr
 800213e:	4770      	bx	lr
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002148:	080053c8 	.word	0x080053c8
  ldr r2, =_sbss
 800214c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002150:	20000588 	.word	0x20000588

08002154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC1_2_IRQHandler>
	...

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_Init+0x28>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_Init+0x28>)
 8002162:	f043 0310 	orr.w	r3, r3, #16
 8002166:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f000 f923 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216e:	200f      	movs	r0, #15
 8002170:	f000 f808 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002174:	f7ff fe42 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x54>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_InitTick+0x58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f93b 	bl	800241e <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00e      	b.n	80021d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d80a      	bhi.n	80021ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f000 f903 	bl	80023ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <HAL_InitTick+0x5c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	2000002c 	.word	0x2000002c
 80021dc:	20000034 	.word	0x20000034
 80021e0:	20000030 	.word	0x20000030

080021e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_IncTick+0x1c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_IncTick+0x20>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a03      	ldr	r2, [pc, #12]	; (8002204 <HAL_IncTick+0x20>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000034 	.word	0x20000034
 8002204:	20000574 	.word	0x20000574

08002208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b02      	ldr	r3, [pc, #8]	; (8002218 <HAL_GetTick+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000574 	.word	0x20000574

0800221c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60d3      	str	r3, [r2, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <__NVIC_GetPriorityGrouping+0x18>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0307 	and.w	r3, r3, #7
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db0b      	blt.n	80022aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4906      	ldr	r1, [pc, #24]	; (80022b4 <__NVIC_EnableIRQ+0x34>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	2001      	movs	r0, #1
 80022a2:	fa00 f202 	lsl.w	r2, r0, r2
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	; (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	; (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f7ff ff90 	bl	80022b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff2d 	bl	800221c <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023dc:	f7ff ff42 	bl	8002264 <__NVIC_GetPriorityGrouping>
 80023e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff ff90 	bl	800230c <NVIC_EncodePriority>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff5f 	bl	80022b8 <__NVIC_SetPriority>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff35 	bl	8002280 <__NVIC_EnableIRQ>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ffa2 	bl	8002370 <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002448:	2b02      	cmp	r3, #2
 800244a:	d008      	beq.n	800245e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2204      	movs	r2, #4
 8002450:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e020      	b.n	80024a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 020e 	bic.w	r2, r2, #14
 800246c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d005      	beq.n	80024ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e051      	b.n	8002572 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 020e 	bic.w	r2, r2, #14
 80024dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a22      	ldr	r2, [pc, #136]	; (800257c <HAL_DMA_Abort_IT+0xd0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d029      	beq.n	800254c <HAL_DMA_Abort_IT+0xa0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a20      	ldr	r2, [pc, #128]	; (8002580 <HAL_DMA_Abort_IT+0xd4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_DMA_Abort_IT+0x9c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_DMA_Abort_IT+0xd8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d01a      	beq.n	8002542 <HAL_DMA_Abort_IT+0x96>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_DMA_Abort_IT+0xdc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d012      	beq.n	800253c <HAL_DMA_Abort_IT+0x90>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1c      	ldr	r2, [pc, #112]	; (800258c <HAL_DMA_Abort_IT+0xe0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00a      	beq.n	8002536 <HAL_DMA_Abort_IT+0x8a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_DMA_Abort_IT+0xe4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d102      	bne.n	8002530 <HAL_DMA_Abort_IT+0x84>
 800252a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800252e:	e00e      	b.n	800254e <HAL_DMA_Abort_IT+0xa2>
 8002530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002534:	e00b      	b.n	800254e <HAL_DMA_Abort_IT+0xa2>
 8002536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253a:	e008      	b.n	800254e <HAL_DMA_Abort_IT+0xa2>
 800253c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002540:	e005      	b.n	800254e <HAL_DMA_Abort_IT+0xa2>
 8002542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002546:	e002      	b.n	800254e <HAL_DMA_Abort_IT+0xa2>
 8002548:	2310      	movs	r3, #16
 800254a:	e000      	b.n	800254e <HAL_DMA_Abort_IT+0xa2>
 800254c:	2301      	movs	r3, #1
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_DMA_Abort_IT+0xe8>)
 8002550:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
    } 
  }
  return status;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40020008 	.word	0x40020008
 8002580:	4002001c 	.word	0x4002001c
 8002584:	40020030 	.word	0x40020030
 8002588:	40020044 	.word	0x40020044
 800258c:	40020058 	.word	0x40020058
 8002590:	4002006c 	.word	0x4002006c
 8002594:	40020000 	.word	0x40020000

08002598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002598:	b480      	push	{r7}
 800259a:	b08b      	sub	sp, #44	; 0x2c
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	e169      	b.n	8002880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025ac:	2201      	movs	r2, #1
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f040 8158 	bne.w	800287a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a9a      	ldr	r2, [pc, #616]	; (8002838 <HAL_GPIO_Init+0x2a0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d05e      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025d4:	4a98      	ldr	r2, [pc, #608]	; (8002838 <HAL_GPIO_Init+0x2a0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d875      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025da:	4a98      	ldr	r2, [pc, #608]	; (800283c <HAL_GPIO_Init+0x2a4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d058      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025e0:	4a96      	ldr	r2, [pc, #600]	; (800283c <HAL_GPIO_Init+0x2a4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d86f      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025e6:	4a96      	ldr	r2, [pc, #600]	; (8002840 <HAL_GPIO_Init+0x2a8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d052      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025ec:	4a94      	ldr	r2, [pc, #592]	; (8002840 <HAL_GPIO_Init+0x2a8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d869      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025f2:	4a94      	ldr	r2, [pc, #592]	; (8002844 <HAL_GPIO_Init+0x2ac>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d04c      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025f8:	4a92      	ldr	r2, [pc, #584]	; (8002844 <HAL_GPIO_Init+0x2ac>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d863      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025fe:	4a92      	ldr	r2, [pc, #584]	; (8002848 <HAL_GPIO_Init+0x2b0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d046      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 8002604:	4a90      	ldr	r2, [pc, #576]	; (8002848 <HAL_GPIO_Init+0x2b0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d85d      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 800260a:	2b12      	cmp	r3, #18
 800260c:	d82a      	bhi.n	8002664 <HAL_GPIO_Init+0xcc>
 800260e:	2b12      	cmp	r3, #18
 8002610:	d859      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 8002612:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <HAL_GPIO_Init+0x80>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	08002693 	.word	0x08002693
 800261c:	0800266d 	.word	0x0800266d
 8002620:	0800267f 	.word	0x0800267f
 8002624:	080026c1 	.word	0x080026c1
 8002628:	080026c7 	.word	0x080026c7
 800262c:	080026c7 	.word	0x080026c7
 8002630:	080026c7 	.word	0x080026c7
 8002634:	080026c7 	.word	0x080026c7
 8002638:	080026c7 	.word	0x080026c7
 800263c:	080026c7 	.word	0x080026c7
 8002640:	080026c7 	.word	0x080026c7
 8002644:	080026c7 	.word	0x080026c7
 8002648:	080026c7 	.word	0x080026c7
 800264c:	080026c7 	.word	0x080026c7
 8002650:	080026c7 	.word	0x080026c7
 8002654:	080026c7 	.word	0x080026c7
 8002658:	080026c7 	.word	0x080026c7
 800265c:	08002675 	.word	0x08002675
 8002660:	08002689 	.word	0x08002689
 8002664:	4a79      	ldr	r2, [pc, #484]	; (800284c <HAL_GPIO_Init+0x2b4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800266a:	e02c      	b.n	80026c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	623b      	str	r3, [r7, #32]
          break;
 8002672:	e029      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	3304      	adds	r3, #4
 800267a:	623b      	str	r3, [r7, #32]
          break;
 800267c:	e024      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	3308      	adds	r3, #8
 8002684:	623b      	str	r3, [r7, #32]
          break;
 8002686:	e01f      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	330c      	adds	r3, #12
 800268e:	623b      	str	r3, [r7, #32]
          break;
 8002690:	e01a      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800269a:	2304      	movs	r3, #4
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e013      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a8:	2308      	movs	r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	611a      	str	r2, [r3, #16]
          break;
 80026b2:	e009      	b.n	80026c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b4:	2308      	movs	r3, #8
 80026b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	615a      	str	r2, [r3, #20]
          break;
 80026be:	e003      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
          break;
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          break;
 80026c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2bff      	cmp	r3, #255	; 0xff
 80026cc:	d801      	bhi.n	80026d2 <HAL_GPIO_Init+0x13a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_Init+0x13e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2bff      	cmp	r3, #255	; 0xff
 80026dc:	d802      	bhi.n	80026e4 <HAL_GPIO_Init+0x14c>
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_Init+0x152>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	3b08      	subs	r3, #8
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	210f      	movs	r1, #15
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	431a      	orrs	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80b1 	beq.w	800287a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002718:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <HAL_GPIO_Init+0x2b8>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a4c      	ldr	r2, [pc, #304]	; (8002850 <HAL_GPIO_Init+0x2b8>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <HAL_GPIO_Init+0x2b8>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002730:	4a48      	ldr	r2, [pc, #288]	; (8002854 <HAL_GPIO_Init+0x2bc>)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a40      	ldr	r2, [pc, #256]	; (8002858 <HAL_GPIO_Init+0x2c0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <HAL_GPIO_Init+0x1ec>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3f      	ldr	r2, [pc, #252]	; (800285c <HAL_GPIO_Init+0x2c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00d      	beq.n	8002780 <HAL_GPIO_Init+0x1e8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3e      	ldr	r2, [pc, #248]	; (8002860 <HAL_GPIO_Init+0x2c8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <HAL_GPIO_Init+0x1e4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3d      	ldr	r2, [pc, #244]	; (8002864 <HAL_GPIO_Init+0x2cc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_GPIO_Init+0x1e0>
 8002774:	2303      	movs	r3, #3
 8002776:	e006      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002778:	2304      	movs	r3, #4
 800277a:	e004      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 800277c:	2302      	movs	r3, #2
 800277e:	e002      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002784:	2300      	movs	r3, #0
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	f002 0203 	and.w	r2, r2, #3
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	4093      	lsls	r3, r2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002796:	492f      	ldr	r1, [pc, #188]	; (8002854 <HAL_GPIO_Init+0x2bc>)
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027b0:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	492c      	ldr	r1, [pc, #176]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027be:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4928      	ldr	r1, [pc, #160]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027d8:	4b23      	ldr	r3, [pc, #140]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4922      	ldr	r1, [pc, #136]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	491e      	ldr	r1, [pc, #120]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	4918      	ldr	r1, [pc, #96]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	43db      	mvns	r3, r3
 8002816:	4914      	ldr	r1, [pc, #80]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 8002818:	4013      	ands	r3, r2
 800281a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d021      	beq.n	800286c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	60cb      	str	r3, [r1, #12]
 8002834:	e021      	b.n	800287a <HAL_GPIO_Init+0x2e2>
 8002836:	bf00      	nop
 8002838:	10320000 	.word	0x10320000
 800283c:	10310000 	.word	0x10310000
 8002840:	10220000 	.word	0x10220000
 8002844:	10210000 	.word	0x10210000
 8002848:	10120000 	.word	0x10120000
 800284c:	10110000 	.word	0x10110000
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	40010800 	.word	0x40010800
 800285c:	40010c00 	.word	0x40010c00
 8002860:	40011000 	.word	0x40011000
 8002864:	40011400 	.word	0x40011400
 8002868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_GPIO_Init+0x304>)
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	43db      	mvns	r3, r3
 8002874:	4909      	ldr	r1, [pc, #36]	; (800289c <HAL_GPIO_Init+0x304>)
 8002876:	4013      	ands	r3, r2
 8002878:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	3301      	adds	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	f47f ae8e 	bne.w	80025ac <HAL_GPIO_Init+0x14>
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	372c      	adds	r7, #44	; 0x2c
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	807b      	strh	r3, [r7, #2]
 80028da:	4613      	mov	r3, r2
 80028dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028de:	787b      	ldrb	r3, [r7, #1]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028ea:	e003      	b.n	80028f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	041a      	lsls	r2, r3, #16
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002910:	887a      	ldrh	r2, [r7, #2]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	041a      	lsls	r2, r3, #16
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43d9      	mvns	r1, r3
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	400b      	ands	r3, r1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e272      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8087 	beq.w	8002a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002950:	4b92      	ldr	r3, [pc, #584]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b04      	cmp	r3, #4
 800295a:	d00c      	beq.n	8002976 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800295c:	4b8f      	ldr	r3, [pc, #572]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	d112      	bne.n	800298e <HAL_RCC_OscConfig+0x5e>
 8002968:	4b8c      	ldr	r3, [pc, #560]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002974:	d10b      	bne.n	800298e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002976:	4b89      	ldr	r3, [pc, #548]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d06c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x12c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d168      	bne.n	8002a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e24c      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_OscConfig+0x76>
 8002998:	4b80      	ldr	r3, [pc, #512]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7f      	ldr	r2, [pc, #508]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e02e      	b.n	8002a04 <HAL_RCC_OscConfig+0xd4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x98>
 80029ae:	4b7b      	ldr	r3, [pc, #492]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7a      	ldr	r2, [pc, #488]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b78      	ldr	r3, [pc, #480]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a77      	ldr	r2, [pc, #476]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0xd4>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0xbc>
 80029d2:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a71      	ldr	r2, [pc, #452]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6e      	ldr	r2, [pc, #440]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xd4>
 80029ec:	4b6b      	ldr	r3, [pc, #428]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6a      	ldr	r2, [pc, #424]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a67      	ldr	r2, [pc, #412]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fbfc 	bl	8002208 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7ff fbf8 	bl	8002208 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e200      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0xe4>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff fbe8 	bl	8002208 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7ff fbe4 	bl	8002208 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1ec      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x10c>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d063      	beq.n	8002b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6a:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a76:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d11c      	bne.n	8002abc <HAL_RCC_OscConfig+0x18c>
 8002a82:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d116      	bne.n	8002abc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x176>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e1c0      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4939      	ldr	r1, [pc, #228]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	e03a      	b.n	8002b32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac4:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7ff fb9d 	bl	8002208 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad2:	f7ff fb99 	bl	8002208 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e1a1      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4927      	ldr	r1, [pc, #156]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
 8002b04:	e015      	b.n	8002b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff fb7c 	bl	8002208 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b14:	f7ff fb78 	bl	8002208 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e180      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d03a      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d019      	beq.n	8002b7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4c:	f7ff fb5c 	bl	8002208 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b54:	f7ff fb58 	bl	8002208 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e160      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b72:	2001      	movs	r0, #1
 8002b74:	f000 fad8 	bl	8003128 <RCC_Delay>
 8002b78:	e01c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b80:	f7ff fb42 	bl	8002208 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b86:	e00f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b88:	f7ff fb3e 	bl	8002208 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d908      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e146      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	42420000 	.word	0x42420000
 8002ba4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	4b92      	ldr	r3, [pc, #584]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e9      	bne.n	8002b88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a6 	beq.w	8002d0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b8b      	ldr	r3, [pc, #556]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4b88      	ldr	r3, [pc, #544]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4a87      	ldr	r2, [pc, #540]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	61d3      	str	r3, [r2, #28]
 8002bde:	4b85      	ldr	r3, [pc, #532]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bee:	4b82      	ldr	r3, [pc, #520]	; (8002df8 <HAL_RCC_OscConfig+0x4c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d118      	bne.n	8002c2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfa:	4b7f      	ldr	r3, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x4c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7e      	ldr	r2, [pc, #504]	; (8002df8 <HAL_RCC_OscConfig+0x4c8>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c06:	f7ff faff 	bl	8002208 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0e:	f7ff fafb 	bl	8002208 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b64      	cmp	r3, #100	; 0x64
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e103      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	4b75      	ldr	r3, [pc, #468]	; (8002df8 <HAL_RCC_OscConfig+0x4c8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x312>
 8002c34:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4a6e      	ldr	r2, [pc, #440]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6213      	str	r3, [r2, #32]
 8002c40:	e02d      	b.n	8002c9e <HAL_RCC_OscConfig+0x36e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x334>
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4a69      	ldr	r2, [pc, #420]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6213      	str	r3, [r2, #32]
 8002c56:	4b67      	ldr	r3, [pc, #412]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4a66      	ldr	r2, [pc, #408]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	f023 0304 	bic.w	r3, r3, #4
 8002c60:	6213      	str	r3, [r2, #32]
 8002c62:	e01c      	b.n	8002c9e <HAL_RCC_OscConfig+0x36e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x356>
 8002c6c:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a60      	ldr	r2, [pc, #384]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	4b5e      	ldr	r3, [pc, #376]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a5d      	ldr	r2, [pc, #372]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6213      	str	r3, [r2, #32]
 8002c84:	e00b      	b.n	8002c9e <HAL_RCC_OscConfig+0x36e>
 8002c86:	4b5b      	ldr	r3, [pc, #364]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a5a      	ldr	r2, [pc, #360]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	4b58      	ldr	r3, [pc, #352]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4a57      	ldr	r2, [pc, #348]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d015      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca6:	f7ff faaf 	bl	8002208 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7ff faab 	bl	8002208 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0b1      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	4b4b      	ldr	r3, [pc, #300]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ee      	beq.n	8002cae <HAL_RCC_OscConfig+0x37e>
 8002cd0:	e014      	b.n	8002cfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7ff fa99 	bl	8002208 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7ff fa95 	bl	8002208 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e09b      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ee      	bne.n	8002cda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d02:	4b3c      	ldr	r3, [pc, #240]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	4a3b      	ldr	r2, [pc, #236]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8087 	beq.w	8002e26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d061      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d146      	bne.n	8002dba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7ff fa69 	bl	8002208 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7ff fa65 	bl	8002208 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e06d      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d108      	bne.n	8002d74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4921      	ldr	r1, [pc, #132]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a19      	ldr	r1, [r3, #32]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	430b      	orrs	r3, r1
 8002d86:	491b      	ldr	r1, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7ff fa39 	bl	8002208 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7ff fa35 	bl	8002208 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e03d      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x46a>
 8002db8:	e035      	b.n	8002e26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fa22 	bl	8002208 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7ff fa1e 	bl	8002208 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e026      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x498>
 8002de6:	e01e      	b.n	8002e26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e019      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_OscConfig+0x500>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000

08002e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0d0      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d910      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b67      	ldr	r3, [pc, #412]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 0207 	bic.w	r2, r3, #7
 8002e5e:	4965      	ldr	r1, [pc, #404]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b63      	ldr	r3, [pc, #396]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0b8      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea8:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a52      	ldr	r2, [pc, #328]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	494d      	ldr	r1, [pc, #308]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d040      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d115      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e073      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e06b      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4936      	ldr	r1, [pc, #216]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f24:	f7ff f970 	bl	8002208 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7ff f96c 	bl	8002208 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e053      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d210      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e032      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f821 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	490a      	ldr	r1, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	5ccb      	ldrb	r3, [r1, r3]
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1cc>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_ClockConfig+0x1d0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff f8ce 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	08005374 	.word	0x08005374
 8003000:	2000002c 	.word	0x2000002c
 8003004:	20000030 	.word	0x20000030

08003008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	b490      	push	{r4, r7}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003010:	1d3c      	adds	r4, r7, #4
 8003012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003018:	f240 2301 	movw	r3, #513	; 0x201
 800301c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003032:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x40>
 8003042:	2b08      	cmp	r3, #8
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x46>
 8003046:	e02b      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003048:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800304a:	623b      	str	r3, [r7, #32]
      break;
 800304c:	e02b      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	0c9b      	lsrs	r3, r3, #18
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3328      	adds	r3, #40	; 0x28
 8003058:	443b      	add	r3, r7
 800305a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800305e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d012      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0c5b      	lsrs	r3, r3, #17
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	3328      	adds	r3, #40	; 0x28
 8003076:	443b      	add	r3, r7
 8003078:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800307c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003082:	fb03 f202 	mul.w	r2, r3, r2
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	e004      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	623b      	str	r3, [r7, #32]
      break;
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80030a2:	623b      	str	r3, [r7, #32]
      break;
 80030a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a6:	6a3b      	ldr	r3, [r7, #32]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc90      	pop	{r4, r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	08005350 	.word	0x08005350
 80030b8:	40021000 	.word	0x40021000
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	003d0900 	.word	0x003d0900

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	2000002c 	.word	0x2000002c

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030dc:	f7ff fff2 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08005384 	.word	0x08005384

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003104:	f7ff ffde 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	0adb      	lsrs	r3, r3, #11
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4903      	ldr	r1, [pc, #12]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	08005384 	.word	0x08005384

08003128 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <RCC_Delay+0x34>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <RCC_Delay+0x38>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0a5b      	lsrs	r3, r3, #9
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003144:	bf00      	nop
  }
  while (Delay --);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	60fa      	str	r2, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f9      	bne.n	8003144 <RCC_Delay+0x1c>
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	2000002c 	.word	0x2000002c
 8003160:	10624dd3 	.word	0x10624dd3

08003164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e041      	b.n	80031fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fe68 	bl	8001e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 fc28 	bl	80039f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d001      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e03a      	b.n	8003292 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_TIM_Base_Start_IT+0x98>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00e      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x58>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d009      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x58>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x58>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d111      	bne.n	8003280 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d010      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	e007      	b.n	8003290 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40000800 	.word	0x40000800

080032a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e041      	b.n	800333e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f839 	bl	8003346 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 fb86 	bl	80039f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_TIM_PWM_Start+0x24>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e022      	b.n	80033c2 <HAL_TIM_PWM_Start+0x6a>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d109      	bne.n	8003396 <HAL_TIM_PWM_Start+0x3e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e015      	b.n	80033c2 <HAL_TIM_PWM_Start+0x6a>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d109      	bne.n	80033b0 <HAL_TIM_PWM_Start+0x58>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e008      	b.n	80033c2 <HAL_TIM_PWM_Start+0x6a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e05e      	b.n	8003488 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d104      	bne.n	80033da <HAL_TIM_PWM_Start+0x82>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d8:	e013      	b.n	8003402 <HAL_TIM_PWM_Start+0xaa>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d104      	bne.n	80033ea <HAL_TIM_PWM_Start+0x92>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e8:	e00b      	b.n	8003402 <HAL_TIM_PWM_Start+0xaa>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d104      	bne.n	80033fa <HAL_TIM_PWM_Start+0xa2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f8:	e003      	b.n	8003402 <HAL_TIM_PWM_Start+0xaa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	6839      	ldr	r1, [r7, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fd74 	bl	8003ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <HAL_TIM_PWM_Start+0x138>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d107      	bne.n	800342a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_TIM_PWM_Start+0x138>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_TIM_PWM_Start+0xfa>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d009      	beq.n	8003452 <HAL_TIM_PWM_Start+0xfa>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_TIM_PWM_Start+0x13c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_TIM_PWM_Start+0xfa>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a12      	ldr	r2, [pc, #72]	; (8003498 <HAL_TIM_PWM_Start+0x140>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d010      	beq.n	8003486 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	e007      	b.n	8003486 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800

0800349c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0202 	mvn.w	r2, #2
 80034c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa6f 	bl	80039c2 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa62 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa71 	bl	80039d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b04      	cmp	r3, #4
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0204 	mvn.w	r2, #4
 800351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa45 	bl	80039c2 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fa38 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fa47 	bl	80039d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b08      	cmp	r3, #8
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b08      	cmp	r3, #8
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0208 	mvn.w	r2, #8
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa1b 	bl	80039c2 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa0e 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fa1d 	bl	80039d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2208      	movs	r2, #8
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9f1 	bl	80039c2 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f9e4 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f9f3 	bl	80039d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10e      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0201 	mvn.w	r2, #1
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fe fd66 	bl	80020ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d10e      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	d107      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fce1 	bl	800400e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d10e      	bne.n	8003678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d107      	bne.n	8003678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9b7 	bl	80039e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b20      	cmp	r3, #32
 8003684:	d10e      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b20      	cmp	r3, #32
 8003692:	d107      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0220 	mvn.w	r2, #32
 800369c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fcac 	bl	8003ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0ac      	b.n	8003820 <HAL_TIM_PWM_ConfigChannel+0x174>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	f200 809f 	bhi.w	8003814 <HAL_TIM_PWM_ConfigChannel+0x168>
 80036d6:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80036d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003815 	.word	0x08003815
 80036e4:	08003815 	.word	0x08003815
 80036e8:	08003815 	.word	0x08003815
 80036ec:	08003751 	.word	0x08003751
 80036f0:	08003815 	.word	0x08003815
 80036f4:	08003815 	.word	0x08003815
 80036f8:	08003815 	.word	0x08003815
 80036fc:	08003793 	.word	0x08003793
 8003700:	08003815 	.word	0x08003815
 8003704:	08003815 	.word	0x08003815
 8003708:	08003815 	.word	0x08003815
 800370c:	080037d3 	.word	0x080037d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f9d0 	bl	8003abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0208 	orr.w	r2, r2, #8
 800372a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6999      	ldr	r1, [r3, #24]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	619a      	str	r2, [r3, #24]
      break;
 800374e:	e062      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fa16 	bl	8003b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6999      	ldr	r1, [r3, #24]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	619a      	str	r2, [r3, #24]
      break;
 8003790:	e041      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fa5f 	bl	8003c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0208 	orr.w	r2, r2, #8
 80037ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0204 	bic.w	r2, r2, #4
 80037bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	61da      	str	r2, [r3, #28]
      break;
 80037d0:	e021      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 faa9 	bl	8003d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69d9      	ldr	r1, [r3, #28]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	021a      	lsls	r2, r3, #8
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	61da      	str	r2, [r3, #28]
      break;
 8003812:	e000      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_TIM_ConfigClockSource+0x18>
 800383c:	2302      	movs	r3, #2
 800383e:	e0b3      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x180>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800385e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003866:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003878:	d03e      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0xd0>
 800387a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387e:	f200 8087 	bhi.w	8003990 <HAL_TIM_ConfigClockSource+0x168>
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003886:	f000 8085 	beq.w	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d87f      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x168>
 8003890:	2b70      	cmp	r3, #112	; 0x70
 8003892:	d01a      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0xa2>
 8003894:	2b70      	cmp	r3, #112	; 0x70
 8003896:	d87b      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x168>
 8003898:	2b60      	cmp	r3, #96	; 0x60
 800389a:	d050      	beq.n	800393e <HAL_TIM_ConfigClockSource+0x116>
 800389c:	2b60      	cmp	r3, #96	; 0x60
 800389e:	d877      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x168>
 80038a0:	2b50      	cmp	r3, #80	; 0x50
 80038a2:	d03c      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xf6>
 80038a4:	2b50      	cmp	r3, #80	; 0x50
 80038a6:	d873      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x168>
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d058      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x136>
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d86f      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x168>
 80038b0:	2b30      	cmp	r3, #48	; 0x30
 80038b2:	d064      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x156>
 80038b4:	2b30      	cmp	r3, #48	; 0x30
 80038b6:	d86b      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x168>
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d060      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x156>
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d867      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x168>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05c      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x156>
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d05a      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038c8:	e062      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f000 faee 	bl	8003eba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	609a      	str	r2, [r3, #8]
      break;
 80038f6:	e04e      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6899      	ldr	r1, [r3, #8]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f000 fad7 	bl	8003eba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391a:	609a      	str	r2, [r3, #8]
      break;
 800391c:	e03b      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6859      	ldr	r1, [r3, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	461a      	mov	r2, r3
 800392c:	f000 fa4e 	bl	8003dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2150      	movs	r1, #80	; 0x50
 8003936:	4618      	mov	r0, r3
 8003938:	f000 faa5 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 800393c:	e02b      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	461a      	mov	r2, r3
 800394c:	f000 fa6c 	bl	8003e28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2160      	movs	r1, #96	; 0x60
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fa95 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 800395c:	e01b      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	461a      	mov	r2, r3
 800396c:	f000 fa2e 	bl	8003dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2140      	movs	r1, #64	; 0x40
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fa85 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 800397c:	e00b      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4619      	mov	r1, r3
 8003988:	4610      	mov	r0, r2
 800398a:	f000 fa7c 	bl	8003e86 <TIM_ITRx_SetConfig>
        break;
 800398e:	e002      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003994:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a29      	ldr	r2, [pc, #164]	; (8003ab0 <TIM_Base_SetConfig+0xb8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <TIM_Base_SetConfig+0x30>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0x30>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <TIM_Base_SetConfig+0xbc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0x30>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a25      	ldr	r2, [pc, #148]	; (8003ab8 <TIM_Base_SetConfig+0xc0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d108      	bne.n	8003a3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <TIM_Base_SetConfig+0xb8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_Base_SetConfig+0x62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d007      	beq.n	8003a5a <TIM_Base_SetConfig+0x62>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <TIM_Base_SetConfig+0xbc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <TIM_Base_SetConfig+0xc0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <TIM_Base_SetConfig+0xb8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d103      	bne.n	8003aa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	615a      	str	r2, [r3, #20]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800

08003abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0201 	bic.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 0302 	bic.w	r3, r3, #2
 8003b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <TIM_OC1_SetConfig+0xc8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10c      	bne.n	8003b32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0308 	bic.w	r3, r3, #8
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <TIM_OC1_SetConfig+0xc8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d111      	bne.n	8003b5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00

08003b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0210 	bic.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0320 	bic.w	r3, r3, #32
 8003bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <TIM_OC2_SetConfig+0xd0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10d      	bne.n	8003c04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <TIM_OC2_SetConfig+0xd0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d113      	bne.n	8003c34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	40012c00 	.word	0x40012c00

08003c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <TIM_OC3_SetConfig+0xd0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10d      	bne.n	8003cd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <TIM_OC3_SetConfig+0xd0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d113      	bne.n	8003d06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	621a      	str	r2, [r3, #32]
}
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00

08003d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	031b      	lsls	r3, r3, #12
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	; (8003dc8 <TIM_OC4_SetConfig+0x98>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d109      	bne.n	8003da4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	40012c00 	.word	0x40012c00

08003dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0201 	bic.w	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 030a 	bic.w	r3, r3, #10
 8003e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0210 	bic.w	r2, r3, #16
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	031b      	lsls	r3, r3, #12
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f043 0307 	orr.w	r3, r3, #7
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	609a      	str	r2, [r3, #8]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b087      	sub	sp, #28
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	021a      	lsls	r2, r3, #8
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	609a      	str	r2, [r3, #8]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1a      	ldr	r2, [r3, #32]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1a      	ldr	r2, [r3, #32]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e046      	b.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a16      	ldr	r2, [pc, #88]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa4:	d009      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a10      	ldr	r2, [pc, #64]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800

08003ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e03f      	b.n	80040b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd ff7c 	bl	8001f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	; 0x24
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fc25 	bl	80048b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b08a      	sub	sp, #40	; 0x28
 80040be:	af02      	add	r7, sp, #8
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d17c      	bne.n	80041d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_UART_Transmit+0x2c>
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e075      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Transmit+0x3e>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e06e      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	; 0x21
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410e:	f7fe f87b 	bl	8002208 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d108      	bne.n	800413c <HAL_UART_Transmit+0x82>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e003      	b.n	8004144 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800414c:	e02a      	b.n	80041a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fa11 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e036      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800417c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	3302      	adds	r3, #2
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e007      	b.n	8004196 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	3301      	adds	r3, #1
 8004194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1cf      	bne.n	800414e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2140      	movs	r1, #64	; 0x40
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f9e1 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e006      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10d      	bne.n	8004232 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_UART_IRQHandler+0x52>
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa99 	bl	8004762 <UART_Receive_IT>
      return;
 8004230:	e17b      	b.n	800452a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80b1 	beq.w	800439c <HAL_UART_IRQHandler+0x1bc>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <HAL_UART_IRQHandler+0x70>
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80a6 	beq.w	800439c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_UART_IRQHandler+0x90>
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_UART_IRQHandler+0xb0>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0202 	orr.w	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_UART_IRQHandler+0xd0>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f043 0204 	orr.w	r2, r3, #4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00f      	beq.n	80042da <HAL_UART_IRQHandler+0xfa>
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_UART_IRQHandler+0xee>
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f043 0208 	orr.w	r2, r3, #8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 811e 	beq.w	8004520 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_UART_IRQHandler+0x11e>
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fa32 	bl	8004762 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf14      	ite	ne
 800430c:	2301      	movne	r3, #1
 800430e:	2300      	moveq	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <HAL_UART_IRQHandler+0x146>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d031      	beq.n	800438a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f974 	bl	8004614 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d023      	beq.n	8004382 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695a      	ldr	r2, [r3, #20]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004348:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	2b00      	cmp	r3, #0
 8004350:	d013      	beq.n	800437a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	4a76      	ldr	r2, [pc, #472]	; (8004530 <HAL_UART_IRQHandler+0x350>)
 8004358:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe f8a4 	bl	80024ac <HAL_DMA_Abort_IT>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d016      	beq.n	8004398 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004374:	4610      	mov	r0, r2
 8004376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004378:	e00e      	b.n	8004398 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8ec 	bl	8004558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	e00a      	b.n	8004398 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8e8 	bl	8004558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004388:	e006      	b.n	8004398 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8e4 	bl	8004558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004396:	e0c3      	b.n	8004520 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	bf00      	nop
    return;
 800439a:	e0c1      	b.n	8004520 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 80a1 	bne.w	80044e8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 809b 	beq.w	80044e8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8095 	beq.w	80044e8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04e      	beq.n	8004480 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043ec:	8a3b      	ldrh	r3, [r7, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8098 	beq.w	8004524 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043f8:	8a3a      	ldrh	r2, [r7, #16]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	f080 8092 	bcs.w	8004524 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8a3a      	ldrh	r2, [r7, #16]
 8004404:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	2b20      	cmp	r3, #32
 800440e:	d02b      	beq.n	8004468 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800441e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0210 	bic.w	r2, r2, #16
 800445c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd ffe7 	bl	8002436 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004470:	b29b      	uxth	r3, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	b29b      	uxth	r3, r3
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f876 	bl	800456a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800447e:	e051      	b.n	8004524 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004488:	b29b      	uxth	r3, r3
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d047      	beq.n	8004528 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004498:	8a7b      	ldrh	r3, [r7, #18]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d044      	beq.n	8004528 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044ac:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0210 	bic.w	r2, r2, #16
 80044da:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044dc:	8a7b      	ldrh	r3, [r7, #18]
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f842 	bl	800456a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044e6:	e01f      	b.n	8004528 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_UART_IRQHandler+0x324>
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f8c9 	bl	8004694 <UART_Transmit_IT>
    return;
 8004502:	e012      	b.n	800452a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <HAL_UART_IRQHandler+0x34a>
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f90a 	bl	8004732 <UART_EndTransmit_IT>
    return;
 800451e:	e004      	b.n	800452a <HAL_UART_IRQHandler+0x34a>
    return;
 8004520:	bf00      	nop
 8004522:	e002      	b.n	800452a <HAL_UART_IRQHandler+0x34a>
      return;
 8004524:	bf00      	nop
 8004526:	e000      	b.n	800452a <HAL_UART_IRQHandler+0x34a>
      return;
 8004528:	bf00      	nop
  }
}
 800452a:	3728      	adds	r7, #40	; 0x28
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	0800466d 	.word	0x0800466d

08004534 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004590:	e02c      	b.n	80045ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d028      	beq.n	80045ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d007      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045a0:	f7fd fe32 	bl	8002208 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d21d      	bcs.n	80045ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e00f      	b.n	800460c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4013      	ands	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	429a      	cmp	r2, r3
 8004608:	d0c3      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800462a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0210 	bic.w	r2, r2, #16
 8004652:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff ff66 	bl	8004558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b21      	cmp	r3, #33	; 0x21
 80046a6:	d13e      	bne.n	8004726 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b0:	d114      	bne.n	80046dc <UART_Transmit_IT+0x48>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d110      	bne.n	80046dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	1c9a      	adds	r2, r3, #2
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	621a      	str	r2, [r3, #32]
 80046da:	e008      	b.n	80046ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	1c59      	adds	r1, r3, #1
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6211      	str	r1, [r2, #32]
 80046e6:	781a      	ldrb	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	4619      	mov	r1, r3
 80046fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004710:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004720:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
  }
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004748:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff feee 	bl	8004534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b086      	sub	sp, #24
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b22      	cmp	r3, #34	; 0x22
 8004774:	f040 8099 	bne.w	80048aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004780:	d117      	bne.n	80047b2 <UART_Receive_IT+0x50>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d113      	bne.n	80047b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	1c9a      	adds	r2, r3, #2
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28
 80047b0:	e026      	b.n	8004800 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	d007      	beq.n	80047d6 <UART_Receive_IT+0x74>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <UART_Receive_IT+0x82>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e008      	b.n	80047f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4619      	mov	r1, r3
 800480e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004810:	2b00      	cmp	r3, #0
 8004812:	d148      	bne.n	80048a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0220 	bic.w	r2, r2, #32
 8004822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	2b01      	cmp	r3, #1
 8004852:	d123      	bne.n	800489c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0210 	bic.w	r2, r2, #16
 8004868:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b10      	cmp	r3, #16
 8004876:	d10a      	bne.n	800488e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004892:	4619      	mov	r1, r3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fe68 	bl	800456a <HAL_UARTEx_RxEventCallback>
 800489a:	e002      	b.n	80048a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe52 	bl	8004546 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e002      	b.n	80048ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048ee:	f023 030c 	bic.w	r3, r3, #12
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2c      	ldr	r2, [pc, #176]	; (80049c8 <UART_SetConfig+0x114>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d103      	bne.n	8004924 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800491c:	f7fe fbf0 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	e002      	b.n	800492a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004924:	f7fe fbd8 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8004928:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009a      	lsls	r2, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <UART_SetConfig+0x118>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	0119      	lsls	r1, r3, #4
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <UART_SetConfig+0x118>)
 8004962:	fba3 0302 	umull	r0, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2064      	movs	r0, #100	; 0x64
 800496a:	fb00 f303 	mul.w	r3, r0, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	3332      	adds	r3, #50	; 0x32
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <UART_SetConfig+0x118>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004980:	4419      	add	r1, r3
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	fbb2 f2f3 	udiv	r2, r2, r3
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <UART_SetConfig+0x118>)
 800499a:	fba3 0302 	umull	r0, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2064      	movs	r0, #100	; 0x64
 80049a2:	fb00 f303 	mul.w	r3, r0, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	3332      	adds	r3, #50	; 0x32
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <UART_SetConfig+0x118>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f003 020f 	and.w	r2, r3, #15
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	440a      	add	r2, r1
 80049be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40013800 	.word	0x40013800
 80049cc:	51eb851f 	.word	0x51eb851f

080049d0 <__errno>:
 80049d0:	4b01      	ldr	r3, [pc, #4]	; (80049d8 <__errno+0x8>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000038 	.word	0x20000038

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	2600      	movs	r6, #0
 80049e0:	4d0c      	ldr	r5, [pc, #48]	; (8004a14 <__libc_init_array+0x38>)
 80049e2:	4c0d      	ldr	r4, [pc, #52]	; (8004a18 <__libc_init_array+0x3c>)
 80049e4:	1b64      	subs	r4, r4, r5
 80049e6:	10a4      	asrs	r4, r4, #2
 80049e8:	42a6      	cmp	r6, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	f000 fc9c 	bl	8005328 <_init>
 80049f0:	2600      	movs	r6, #0
 80049f2:	4d0a      	ldr	r5, [pc, #40]	; (8004a1c <__libc_init_array+0x40>)
 80049f4:	4c0a      	ldr	r4, [pc, #40]	; (8004a20 <__libc_init_array+0x44>)
 80049f6:	1b64      	subs	r4, r4, r5
 80049f8:	10a4      	asrs	r4, r4, #2
 80049fa:	42a6      	cmp	r6, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a04:	4798      	blx	r3
 8004a06:	3601      	adds	r6, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0e:	4798      	blx	r3
 8004a10:	3601      	adds	r6, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	080053c0 	.word	0x080053c0
 8004a18:	080053c0 	.word	0x080053c0
 8004a1c:	080053c0 	.word	0x080053c0
 8004a20:	080053c4 	.word	0x080053c4

08004a24 <memset>:
 8004a24:	4603      	mov	r3, r0
 8004a26:	4402      	add	r2, r0
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d100      	bne.n	8004a2e <memset+0xa>
 8004a2c:	4770      	bx	lr
 8004a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a32:	e7f9      	b.n	8004a28 <memset+0x4>

08004a34 <siprintf>:
 8004a34:	b40e      	push	{r1, r2, r3}
 8004a36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a3a:	b500      	push	{lr}
 8004a3c:	b09c      	sub	sp, #112	; 0x70
 8004a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a40:	9002      	str	r0, [sp, #8]
 8004a42:	9006      	str	r0, [sp, #24]
 8004a44:	9107      	str	r1, [sp, #28]
 8004a46:	9104      	str	r1, [sp, #16]
 8004a48:	4808      	ldr	r0, [pc, #32]	; (8004a6c <siprintf+0x38>)
 8004a4a:	4909      	ldr	r1, [pc, #36]	; (8004a70 <siprintf+0x3c>)
 8004a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a50:	9105      	str	r1, [sp, #20]
 8004a52:	6800      	ldr	r0, [r0, #0]
 8004a54:	a902      	add	r1, sp, #8
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	f000 f868 	bl	8004b2c <_svfiprintf_r>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	9b02      	ldr	r3, [sp, #8]
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	b01c      	add	sp, #112	; 0x70
 8004a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a68:	b003      	add	sp, #12
 8004a6a:	4770      	bx	lr
 8004a6c:	20000038 	.word	0x20000038
 8004a70:	ffff0208 	.word	0xffff0208

08004a74 <__ssputs_r>:
 8004a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	688e      	ldr	r6, [r1, #8]
 8004a7a:	4682      	mov	sl, r0
 8004a7c:	429e      	cmp	r6, r3
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4690      	mov	r8, r2
 8004a82:	461f      	mov	r7, r3
 8004a84:	d838      	bhi.n	8004af8 <__ssputs_r+0x84>
 8004a86:	898a      	ldrh	r2, [r1, #12]
 8004a88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a8c:	d032      	beq.n	8004af4 <__ssputs_r+0x80>
 8004a8e:	6825      	ldr	r5, [r4, #0]
 8004a90:	6909      	ldr	r1, [r1, #16]
 8004a92:	3301      	adds	r3, #1
 8004a94:	eba5 0901 	sub.w	r9, r5, r1
 8004a98:	6965      	ldr	r5, [r4, #20]
 8004a9a:	444b      	add	r3, r9
 8004a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aa4:	106d      	asrs	r5, r5, #1
 8004aa6:	429d      	cmp	r5, r3
 8004aa8:	bf38      	it	cc
 8004aaa:	461d      	movcc	r5, r3
 8004aac:	0553      	lsls	r3, r2, #21
 8004aae:	d531      	bpl.n	8004b14 <__ssputs_r+0xa0>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f000 fb6f 	bl	8005194 <_malloc_r>
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	b950      	cbnz	r0, 8004ad0 <__ssputs_r+0x5c>
 8004aba:	230c      	movs	r3, #12
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	f8ca 3000 	str.w	r3, [sl]
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad0:	464a      	mov	r2, r9
 8004ad2:	6921      	ldr	r1, [r4, #16]
 8004ad4:	f000 face 	bl	8005074 <memcpy>
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae2:	81a3      	strh	r3, [r4, #12]
 8004ae4:	6126      	str	r6, [r4, #16]
 8004ae6:	444e      	add	r6, r9
 8004ae8:	6026      	str	r6, [r4, #0]
 8004aea:	463e      	mov	r6, r7
 8004aec:	6165      	str	r5, [r4, #20]
 8004aee:	eba5 0509 	sub.w	r5, r5, r9
 8004af2:	60a5      	str	r5, [r4, #8]
 8004af4:	42be      	cmp	r6, r7
 8004af6:	d900      	bls.n	8004afa <__ssputs_r+0x86>
 8004af8:	463e      	mov	r6, r7
 8004afa:	4632      	mov	r2, r6
 8004afc:	4641      	mov	r1, r8
 8004afe:	6820      	ldr	r0, [r4, #0]
 8004b00:	f000 fac6 	bl	8005090 <memmove>
 8004b04:	68a3      	ldr	r3, [r4, #8]
 8004b06:	2000      	movs	r0, #0
 8004b08:	1b9b      	subs	r3, r3, r6
 8004b0a:	60a3      	str	r3, [r4, #8]
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	4433      	add	r3, r6
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	e7db      	b.n	8004acc <__ssputs_r+0x58>
 8004b14:	462a      	mov	r2, r5
 8004b16:	f000 fbb1 	bl	800527c <_realloc_r>
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d1e1      	bne.n	8004ae4 <__ssputs_r+0x70>
 8004b20:	4650      	mov	r0, sl
 8004b22:	6921      	ldr	r1, [r4, #16]
 8004b24:	f000 face 	bl	80050c4 <_free_r>
 8004b28:	e7c7      	b.n	8004aba <__ssputs_r+0x46>
	...

08004b2c <_svfiprintf_r>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	4698      	mov	r8, r3
 8004b32:	898b      	ldrh	r3, [r1, #12]
 8004b34:	4607      	mov	r7, r0
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	460d      	mov	r5, r1
 8004b3a:	4614      	mov	r4, r2
 8004b3c:	b09d      	sub	sp, #116	; 0x74
 8004b3e:	d50e      	bpl.n	8004b5e <_svfiprintf_r+0x32>
 8004b40:	690b      	ldr	r3, [r1, #16]
 8004b42:	b963      	cbnz	r3, 8004b5e <_svfiprintf_r+0x32>
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	f000 fb25 	bl	8005194 <_malloc_r>
 8004b4a:	6028      	str	r0, [r5, #0]
 8004b4c:	6128      	str	r0, [r5, #16]
 8004b4e:	b920      	cbnz	r0, 8004b5a <_svfiprintf_r+0x2e>
 8004b50:	230c      	movs	r3, #12
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	e0d1      	b.n	8004cfe <_svfiprintf_r+0x1d2>
 8004b5a:	2340      	movs	r3, #64	; 0x40
 8004b5c:	616b      	str	r3, [r5, #20]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9309      	str	r3, [sp, #36]	; 0x24
 8004b62:	2320      	movs	r3, #32
 8004b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b68:	2330      	movs	r3, #48	; 0x30
 8004b6a:	f04f 0901 	mov.w	r9, #1
 8004b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d18 <_svfiprintf_r+0x1ec>
 8004b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b82:	b10a      	cbz	r2, 8004b88 <_svfiprintf_r+0x5c>
 8004b84:	2a25      	cmp	r2, #37	; 0x25
 8004b86:	d1f9      	bne.n	8004b7c <_svfiprintf_r+0x50>
 8004b88:	ebba 0b04 	subs.w	fp, sl, r4
 8004b8c:	d00b      	beq.n	8004ba6 <_svfiprintf_r+0x7a>
 8004b8e:	465b      	mov	r3, fp
 8004b90:	4622      	mov	r2, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff ff6d 	bl	8004a74 <__ssputs_r>
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f000 80aa 	beq.w	8004cf4 <_svfiprintf_r+0x1c8>
 8004ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba2:	445a      	add	r2, fp
 8004ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80a2 	beq.w	8004cf4 <_svfiprintf_r+0x1c8>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bba:	f10a 0a01 	add.w	sl, sl, #1
 8004bbe:	9304      	str	r3, [sp, #16]
 8004bc0:	9307      	str	r3, [sp, #28]
 8004bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc8:	4654      	mov	r4, sl
 8004bca:	2205      	movs	r2, #5
 8004bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd0:	4851      	ldr	r0, [pc, #324]	; (8004d18 <_svfiprintf_r+0x1ec>)
 8004bd2:	f000 fa41 	bl	8005058 <memchr>
 8004bd6:	9a04      	ldr	r2, [sp, #16]
 8004bd8:	b9d8      	cbnz	r0, 8004c12 <_svfiprintf_r+0xe6>
 8004bda:	06d0      	lsls	r0, r2, #27
 8004bdc:	bf44      	itt	mi
 8004bde:	2320      	movmi	r3, #32
 8004be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be4:	0711      	lsls	r1, r2, #28
 8004be6:	bf44      	itt	mi
 8004be8:	232b      	movmi	r3, #43	; 0x2b
 8004bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bee:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf4:	d015      	beq.n	8004c22 <_svfiprintf_r+0xf6>
 8004bf6:	4654      	mov	r4, sl
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f04f 0c0a 	mov.w	ip, #10
 8004bfe:	9a07      	ldr	r2, [sp, #28]
 8004c00:	4621      	mov	r1, r4
 8004c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c06:	3b30      	subs	r3, #48	; 0x30
 8004c08:	2b09      	cmp	r3, #9
 8004c0a:	d94e      	bls.n	8004caa <_svfiprintf_r+0x17e>
 8004c0c:	b1b0      	cbz	r0, 8004c3c <_svfiprintf_r+0x110>
 8004c0e:	9207      	str	r2, [sp, #28]
 8004c10:	e014      	b.n	8004c3c <_svfiprintf_r+0x110>
 8004c12:	eba0 0308 	sub.w	r3, r0, r8
 8004c16:	fa09 f303 	lsl.w	r3, r9, r3
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	46a2      	mov	sl, r4
 8004c1e:	9304      	str	r3, [sp, #16]
 8004c20:	e7d2      	b.n	8004bc8 <_svfiprintf_r+0x9c>
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	1d19      	adds	r1, r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	9103      	str	r1, [sp, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bfbb      	ittet	lt
 8004c2e:	425b      	neglt	r3, r3
 8004c30:	f042 0202 	orrlt.w	r2, r2, #2
 8004c34:	9307      	strge	r3, [sp, #28]
 8004c36:	9307      	strlt	r3, [sp, #28]
 8004c38:	bfb8      	it	lt
 8004c3a:	9204      	strlt	r2, [sp, #16]
 8004c3c:	7823      	ldrb	r3, [r4, #0]
 8004c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c40:	d10c      	bne.n	8004c5c <_svfiprintf_r+0x130>
 8004c42:	7863      	ldrb	r3, [r4, #1]
 8004c44:	2b2a      	cmp	r3, #42	; 0x2a
 8004c46:	d135      	bne.n	8004cb4 <_svfiprintf_r+0x188>
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	3402      	adds	r4, #2
 8004c4c:	1d1a      	adds	r2, r3, #4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	9203      	str	r2, [sp, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bfb8      	it	lt
 8004c56:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c5a:	9305      	str	r3, [sp, #20]
 8004c5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004d1c <_svfiprintf_r+0x1f0>
 8004c60:	2203      	movs	r2, #3
 8004c62:	4650      	mov	r0, sl
 8004c64:	7821      	ldrb	r1, [r4, #0]
 8004c66:	f000 f9f7 	bl	8005058 <memchr>
 8004c6a:	b140      	cbz	r0, 8004c7e <_svfiprintf_r+0x152>
 8004c6c:	2340      	movs	r3, #64	; 0x40
 8004c6e:	eba0 000a 	sub.w	r0, r0, sl
 8004c72:	fa03 f000 	lsl.w	r0, r3, r0
 8004c76:	9b04      	ldr	r3, [sp, #16]
 8004c78:	3401      	adds	r4, #1
 8004c7a:	4303      	orrs	r3, r0
 8004c7c:	9304      	str	r3, [sp, #16]
 8004c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c82:	2206      	movs	r2, #6
 8004c84:	4826      	ldr	r0, [pc, #152]	; (8004d20 <_svfiprintf_r+0x1f4>)
 8004c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c8a:	f000 f9e5 	bl	8005058 <memchr>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d038      	beq.n	8004d04 <_svfiprintf_r+0x1d8>
 8004c92:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <_svfiprintf_r+0x1f8>)
 8004c94:	bb1b      	cbnz	r3, 8004cde <_svfiprintf_r+0x1b2>
 8004c96:	9b03      	ldr	r3, [sp, #12]
 8004c98:	3307      	adds	r3, #7
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	9303      	str	r3, [sp, #12]
 8004ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca4:	4433      	add	r3, r6
 8004ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca8:	e767      	b.n	8004b7a <_svfiprintf_r+0x4e>
 8004caa:	460c      	mov	r4, r1
 8004cac:	2001      	movs	r0, #1
 8004cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cb2:	e7a5      	b.n	8004c00 <_svfiprintf_r+0xd4>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f04f 0c0a 	mov.w	ip, #10
 8004cba:	4619      	mov	r1, r3
 8004cbc:	3401      	adds	r4, #1
 8004cbe:	9305      	str	r3, [sp, #20]
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cc6:	3a30      	subs	r2, #48	; 0x30
 8004cc8:	2a09      	cmp	r2, #9
 8004cca:	d903      	bls.n	8004cd4 <_svfiprintf_r+0x1a8>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0c5      	beq.n	8004c5c <_svfiprintf_r+0x130>
 8004cd0:	9105      	str	r1, [sp, #20]
 8004cd2:	e7c3      	b.n	8004c5c <_svfiprintf_r+0x130>
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cdc:	e7f0      	b.n	8004cc0 <_svfiprintf_r+0x194>
 8004cde:	ab03      	add	r3, sp, #12
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <_svfiprintf_r+0x1fc>)
 8004ce8:	a904      	add	r1, sp, #16
 8004cea:	f3af 8000 	nop.w
 8004cee:	1c42      	adds	r2, r0, #1
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	d1d6      	bne.n	8004ca2 <_svfiprintf_r+0x176>
 8004cf4:	89ab      	ldrh	r3, [r5, #12]
 8004cf6:	065b      	lsls	r3, r3, #25
 8004cf8:	f53f af2c 	bmi.w	8004b54 <_svfiprintf_r+0x28>
 8004cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cfe:	b01d      	add	sp, #116	; 0x74
 8004d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d04:	ab03      	add	r3, sp, #12
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	462a      	mov	r2, r5
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <_svfiprintf_r+0x1fc>)
 8004d0e:	a904      	add	r1, sp, #16
 8004d10:	f000 f87c 	bl	8004e0c <_printf_i>
 8004d14:	e7eb      	b.n	8004cee <_svfiprintf_r+0x1c2>
 8004d16:	bf00      	nop
 8004d18:	0800538c 	.word	0x0800538c
 8004d1c:	08005392 	.word	0x08005392
 8004d20:	08005396 	.word	0x08005396
 8004d24:	00000000 	.word	0x00000000
 8004d28:	08004a75 	.word	0x08004a75

08004d2c <_printf_common>:
 8004d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	4616      	mov	r6, r2
 8004d32:	4699      	mov	r9, r3
 8004d34:	688a      	ldr	r2, [r1, #8]
 8004d36:	690b      	ldr	r3, [r1, #16]
 8004d38:	4607      	mov	r7, r0
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	bfb8      	it	lt
 8004d3e:	4613      	movlt	r3, r2
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d46:	460c      	mov	r4, r1
 8004d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d4c:	b10a      	cbz	r2, 8004d52 <_printf_common+0x26>
 8004d4e:	3301      	adds	r3, #1
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	0699      	lsls	r1, r3, #26
 8004d56:	bf42      	ittt	mi
 8004d58:	6833      	ldrmi	r3, [r6, #0]
 8004d5a:	3302      	addmi	r3, #2
 8004d5c:	6033      	strmi	r3, [r6, #0]
 8004d5e:	6825      	ldr	r5, [r4, #0]
 8004d60:	f015 0506 	ands.w	r5, r5, #6
 8004d64:	d106      	bne.n	8004d74 <_printf_common+0x48>
 8004d66:	f104 0a19 	add.w	sl, r4, #25
 8004d6a:	68e3      	ldr	r3, [r4, #12]
 8004d6c:	6832      	ldr	r2, [r6, #0]
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	42ab      	cmp	r3, r5
 8004d72:	dc28      	bgt.n	8004dc6 <_printf_common+0x9a>
 8004d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d78:	1e13      	subs	r3, r2, #0
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	bf18      	it	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	0692      	lsls	r2, r2, #26
 8004d82:	d42d      	bmi.n	8004de0 <_printf_common+0xb4>
 8004d84:	4649      	mov	r1, r9
 8004d86:	4638      	mov	r0, r7
 8004d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d8c:	47c0      	blx	r8
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d020      	beq.n	8004dd4 <_printf_common+0xa8>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	68e5      	ldr	r5, [r4, #12]
 8004d96:	f003 0306 	and.w	r3, r3, #6
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	bf18      	it	ne
 8004d9e:	2500      	movne	r5, #0
 8004da0:	6832      	ldr	r2, [r6, #0]
 8004da2:	f04f 0600 	mov.w	r6, #0
 8004da6:	68a3      	ldr	r3, [r4, #8]
 8004da8:	bf08      	it	eq
 8004daa:	1aad      	subeq	r5, r5, r2
 8004dac:	6922      	ldr	r2, [r4, #16]
 8004dae:	bf08      	it	eq
 8004db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db4:	4293      	cmp	r3, r2
 8004db6:	bfc4      	itt	gt
 8004db8:	1a9b      	subgt	r3, r3, r2
 8004dba:	18ed      	addgt	r5, r5, r3
 8004dbc:	341a      	adds	r4, #26
 8004dbe:	42b5      	cmp	r5, r6
 8004dc0:	d11a      	bne.n	8004df8 <_printf_common+0xcc>
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e008      	b.n	8004dd8 <_printf_common+0xac>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4652      	mov	r2, sl
 8004dca:	4649      	mov	r1, r9
 8004dcc:	4638      	mov	r0, r7
 8004dce:	47c0      	blx	r8
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d103      	bne.n	8004ddc <_printf_common+0xb0>
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ddc:	3501      	adds	r5, #1
 8004dde:	e7c4      	b.n	8004d6a <_printf_common+0x3e>
 8004de0:	2030      	movs	r0, #48	; 0x30
 8004de2:	18e1      	adds	r1, r4, r3
 8004de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dee:	4422      	add	r2, r4
 8004df0:	3302      	adds	r3, #2
 8004df2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df6:	e7c5      	b.n	8004d84 <_printf_common+0x58>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	4638      	mov	r0, r7
 8004e00:	47c0      	blx	r8
 8004e02:	3001      	adds	r0, #1
 8004e04:	d0e6      	beq.n	8004dd4 <_printf_common+0xa8>
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7d9      	b.n	8004dbe <_printf_common+0x92>
	...

08004e0c <_printf_i>:
 8004e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	7e0f      	ldrb	r7, [r1, #24]
 8004e12:	4691      	mov	r9, r2
 8004e14:	2f78      	cmp	r7, #120	; 0x78
 8004e16:	4680      	mov	r8, r0
 8004e18:	460c      	mov	r4, r1
 8004e1a:	469a      	mov	sl, r3
 8004e1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e22:	d807      	bhi.n	8004e34 <_printf_i+0x28>
 8004e24:	2f62      	cmp	r7, #98	; 0x62
 8004e26:	d80a      	bhi.n	8004e3e <_printf_i+0x32>
 8004e28:	2f00      	cmp	r7, #0
 8004e2a:	f000 80d9 	beq.w	8004fe0 <_printf_i+0x1d4>
 8004e2e:	2f58      	cmp	r7, #88	; 0x58
 8004e30:	f000 80a4 	beq.w	8004f7c <_printf_i+0x170>
 8004e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e3c:	e03a      	b.n	8004eb4 <_printf_i+0xa8>
 8004e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e42:	2b15      	cmp	r3, #21
 8004e44:	d8f6      	bhi.n	8004e34 <_printf_i+0x28>
 8004e46:	a101      	add	r1, pc, #4	; (adr r1, 8004e4c <_printf_i+0x40>)
 8004e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e4c:	08004ea5 	.word	0x08004ea5
 8004e50:	08004eb9 	.word	0x08004eb9
 8004e54:	08004e35 	.word	0x08004e35
 8004e58:	08004e35 	.word	0x08004e35
 8004e5c:	08004e35 	.word	0x08004e35
 8004e60:	08004e35 	.word	0x08004e35
 8004e64:	08004eb9 	.word	0x08004eb9
 8004e68:	08004e35 	.word	0x08004e35
 8004e6c:	08004e35 	.word	0x08004e35
 8004e70:	08004e35 	.word	0x08004e35
 8004e74:	08004e35 	.word	0x08004e35
 8004e78:	08004fc7 	.word	0x08004fc7
 8004e7c:	08004ee9 	.word	0x08004ee9
 8004e80:	08004fa9 	.word	0x08004fa9
 8004e84:	08004e35 	.word	0x08004e35
 8004e88:	08004e35 	.word	0x08004e35
 8004e8c:	08004fe9 	.word	0x08004fe9
 8004e90:	08004e35 	.word	0x08004e35
 8004e94:	08004ee9 	.word	0x08004ee9
 8004e98:	08004e35 	.word	0x08004e35
 8004e9c:	08004e35 	.word	0x08004e35
 8004ea0:	08004fb1 	.word	0x08004fb1
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	602a      	str	r2, [r5, #0]
 8004eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0a4      	b.n	8005002 <_printf_i+0x1f6>
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	6829      	ldr	r1, [r5, #0]
 8004ebc:	0606      	lsls	r6, r0, #24
 8004ebe:	f101 0304 	add.w	r3, r1, #4
 8004ec2:	d50a      	bpl.n	8004eda <_printf_i+0xce>
 8004ec4:	680e      	ldr	r6, [r1, #0]
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	2e00      	cmp	r6, #0
 8004eca:	da03      	bge.n	8004ed4 <_printf_i+0xc8>
 8004ecc:	232d      	movs	r3, #45	; 0x2d
 8004ece:	4276      	negs	r6, r6
 8004ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed4:	230a      	movs	r3, #10
 8004ed6:	485e      	ldr	r0, [pc, #376]	; (8005050 <_printf_i+0x244>)
 8004ed8:	e019      	b.n	8004f0e <_printf_i+0x102>
 8004eda:	680e      	ldr	r6, [r1, #0]
 8004edc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	bf18      	it	ne
 8004ee4:	b236      	sxthne	r6, r6
 8004ee6:	e7ef      	b.n	8004ec8 <_printf_i+0xbc>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	1d19      	adds	r1, r3, #4
 8004eee:	6029      	str	r1, [r5, #0]
 8004ef0:	0601      	lsls	r1, r0, #24
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_i+0xec>
 8004ef4:	681e      	ldr	r6, [r3, #0]
 8004ef6:	e002      	b.n	8004efe <_printf_i+0xf2>
 8004ef8:	0646      	lsls	r6, r0, #25
 8004efa:	d5fb      	bpl.n	8004ef4 <_printf_i+0xe8>
 8004efc:	881e      	ldrh	r6, [r3, #0]
 8004efe:	2f6f      	cmp	r7, #111	; 0x6f
 8004f00:	bf0c      	ite	eq
 8004f02:	2308      	moveq	r3, #8
 8004f04:	230a      	movne	r3, #10
 8004f06:	4852      	ldr	r0, [pc, #328]	; (8005050 <_printf_i+0x244>)
 8004f08:	2100      	movs	r1, #0
 8004f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f0e:	6865      	ldr	r5, [r4, #4]
 8004f10:	2d00      	cmp	r5, #0
 8004f12:	bfa8      	it	ge
 8004f14:	6821      	ldrge	r1, [r4, #0]
 8004f16:	60a5      	str	r5, [r4, #8]
 8004f18:	bfa4      	itt	ge
 8004f1a:	f021 0104 	bicge.w	r1, r1, #4
 8004f1e:	6021      	strge	r1, [r4, #0]
 8004f20:	b90e      	cbnz	r6, 8004f26 <_printf_i+0x11a>
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	d04d      	beq.n	8004fc2 <_printf_i+0x1b6>
 8004f26:	4615      	mov	r5, r2
 8004f28:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f2c:	fb03 6711 	mls	r7, r3, r1, r6
 8004f30:	5dc7      	ldrb	r7, [r0, r7]
 8004f32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f36:	4637      	mov	r7, r6
 8004f38:	42bb      	cmp	r3, r7
 8004f3a:	460e      	mov	r6, r1
 8004f3c:	d9f4      	bls.n	8004f28 <_printf_i+0x11c>
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d10b      	bne.n	8004f5a <_printf_i+0x14e>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	07de      	lsls	r6, r3, #31
 8004f46:	d508      	bpl.n	8004f5a <_printf_i+0x14e>
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	6861      	ldr	r1, [r4, #4]
 8004f4c:	4299      	cmp	r1, r3
 8004f4e:	bfde      	ittt	le
 8004f50:	2330      	movle	r3, #48	; 0x30
 8004f52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f5a:	1b52      	subs	r2, r2, r5
 8004f5c:	6122      	str	r2, [r4, #16]
 8004f5e:	464b      	mov	r3, r9
 8004f60:	4621      	mov	r1, r4
 8004f62:	4640      	mov	r0, r8
 8004f64:	f8cd a000 	str.w	sl, [sp]
 8004f68:	aa03      	add	r2, sp, #12
 8004f6a:	f7ff fedf 	bl	8004d2c <_printf_common>
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d14c      	bne.n	800500c <_printf_i+0x200>
 8004f72:	f04f 30ff 	mov.w	r0, #4294967295
 8004f76:	b004      	add	sp, #16
 8004f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7c:	4834      	ldr	r0, [pc, #208]	; (8005050 <_printf_i+0x244>)
 8004f7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f82:	6829      	ldr	r1, [r5, #0]
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f8a:	6029      	str	r1, [r5, #0]
 8004f8c:	061d      	lsls	r5, r3, #24
 8004f8e:	d514      	bpl.n	8004fba <_printf_i+0x1ae>
 8004f90:	07df      	lsls	r7, r3, #31
 8004f92:	bf44      	itt	mi
 8004f94:	f043 0320 	orrmi.w	r3, r3, #32
 8004f98:	6023      	strmi	r3, [r4, #0]
 8004f9a:	b91e      	cbnz	r6, 8004fa4 <_printf_i+0x198>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	f023 0320 	bic.w	r3, r3, #32
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	e7af      	b.n	8004f08 <_printf_i+0xfc>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f043 0320 	orr.w	r3, r3, #32
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	2378      	movs	r3, #120	; 0x78
 8004fb2:	4828      	ldr	r0, [pc, #160]	; (8005054 <_printf_i+0x248>)
 8004fb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fb8:	e7e3      	b.n	8004f82 <_printf_i+0x176>
 8004fba:	0659      	lsls	r1, r3, #25
 8004fbc:	bf48      	it	mi
 8004fbe:	b2b6      	uxthmi	r6, r6
 8004fc0:	e7e6      	b.n	8004f90 <_printf_i+0x184>
 8004fc2:	4615      	mov	r5, r2
 8004fc4:	e7bb      	b.n	8004f3e <_printf_i+0x132>
 8004fc6:	682b      	ldr	r3, [r5, #0]
 8004fc8:	6826      	ldr	r6, [r4, #0]
 8004fca:	1d18      	adds	r0, r3, #4
 8004fcc:	6961      	ldr	r1, [r4, #20]
 8004fce:	6028      	str	r0, [r5, #0]
 8004fd0:	0635      	lsls	r5, r6, #24
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	d501      	bpl.n	8004fda <_printf_i+0x1ce>
 8004fd6:	6019      	str	r1, [r3, #0]
 8004fd8:	e002      	b.n	8004fe0 <_printf_i+0x1d4>
 8004fda:	0670      	lsls	r0, r6, #25
 8004fdc:	d5fb      	bpl.n	8004fd6 <_printf_i+0x1ca>
 8004fde:	8019      	strh	r1, [r3, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4615      	mov	r5, r2
 8004fe4:	6123      	str	r3, [r4, #16]
 8004fe6:	e7ba      	b.n	8004f5e <_printf_i+0x152>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	2100      	movs	r1, #0
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	602a      	str	r2, [r5, #0]
 8004ff0:	681d      	ldr	r5, [r3, #0]
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 f82f 	bl	8005058 <memchr>
 8004ffa:	b108      	cbz	r0, 8005000 <_printf_i+0x1f4>
 8004ffc:	1b40      	subs	r0, r0, r5
 8004ffe:	6060      	str	r0, [r4, #4]
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	2300      	movs	r3, #0
 8005006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500a:	e7a8      	b.n	8004f5e <_printf_i+0x152>
 800500c:	462a      	mov	r2, r5
 800500e:	4649      	mov	r1, r9
 8005010:	4640      	mov	r0, r8
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	47d0      	blx	sl
 8005016:	3001      	adds	r0, #1
 8005018:	d0ab      	beq.n	8004f72 <_printf_i+0x166>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	079b      	lsls	r3, r3, #30
 800501e:	d413      	bmi.n	8005048 <_printf_i+0x23c>
 8005020:	68e0      	ldr	r0, [r4, #12]
 8005022:	9b03      	ldr	r3, [sp, #12]
 8005024:	4298      	cmp	r0, r3
 8005026:	bfb8      	it	lt
 8005028:	4618      	movlt	r0, r3
 800502a:	e7a4      	b.n	8004f76 <_printf_i+0x16a>
 800502c:	2301      	movs	r3, #1
 800502e:	4632      	mov	r2, r6
 8005030:	4649      	mov	r1, r9
 8005032:	4640      	mov	r0, r8
 8005034:	47d0      	blx	sl
 8005036:	3001      	adds	r0, #1
 8005038:	d09b      	beq.n	8004f72 <_printf_i+0x166>
 800503a:	3501      	adds	r5, #1
 800503c:	68e3      	ldr	r3, [r4, #12]
 800503e:	9903      	ldr	r1, [sp, #12]
 8005040:	1a5b      	subs	r3, r3, r1
 8005042:	42ab      	cmp	r3, r5
 8005044:	dcf2      	bgt.n	800502c <_printf_i+0x220>
 8005046:	e7eb      	b.n	8005020 <_printf_i+0x214>
 8005048:	2500      	movs	r5, #0
 800504a:	f104 0619 	add.w	r6, r4, #25
 800504e:	e7f5      	b.n	800503c <_printf_i+0x230>
 8005050:	0800539d 	.word	0x0800539d
 8005054:	080053ae 	.word	0x080053ae

08005058 <memchr>:
 8005058:	4603      	mov	r3, r0
 800505a:	b510      	push	{r4, lr}
 800505c:	b2c9      	uxtb	r1, r1
 800505e:	4402      	add	r2, r0
 8005060:	4293      	cmp	r3, r2
 8005062:	4618      	mov	r0, r3
 8005064:	d101      	bne.n	800506a <memchr+0x12>
 8005066:	2000      	movs	r0, #0
 8005068:	e003      	b.n	8005072 <memchr+0x1a>
 800506a:	7804      	ldrb	r4, [r0, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	428c      	cmp	r4, r1
 8005070:	d1f6      	bne.n	8005060 <memchr+0x8>
 8005072:	bd10      	pop	{r4, pc}

08005074 <memcpy>:
 8005074:	440a      	add	r2, r1
 8005076:	4291      	cmp	r1, r2
 8005078:	f100 33ff 	add.w	r3, r0, #4294967295
 800507c:	d100      	bne.n	8005080 <memcpy+0xc>
 800507e:	4770      	bx	lr
 8005080:	b510      	push	{r4, lr}
 8005082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005086:	4291      	cmp	r1, r2
 8005088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800508c:	d1f9      	bne.n	8005082 <memcpy+0xe>
 800508e:	bd10      	pop	{r4, pc}

08005090 <memmove>:
 8005090:	4288      	cmp	r0, r1
 8005092:	b510      	push	{r4, lr}
 8005094:	eb01 0402 	add.w	r4, r1, r2
 8005098:	d902      	bls.n	80050a0 <memmove+0x10>
 800509a:	4284      	cmp	r4, r0
 800509c:	4623      	mov	r3, r4
 800509e:	d807      	bhi.n	80050b0 <memmove+0x20>
 80050a0:	1e43      	subs	r3, r0, #1
 80050a2:	42a1      	cmp	r1, r4
 80050a4:	d008      	beq.n	80050b8 <memmove+0x28>
 80050a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050ae:	e7f8      	b.n	80050a2 <memmove+0x12>
 80050b0:	4601      	mov	r1, r0
 80050b2:	4402      	add	r2, r0
 80050b4:	428a      	cmp	r2, r1
 80050b6:	d100      	bne.n	80050ba <memmove+0x2a>
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050c2:	e7f7      	b.n	80050b4 <memmove+0x24>

080050c4 <_free_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4605      	mov	r5, r0
 80050c8:	2900      	cmp	r1, #0
 80050ca:	d040      	beq.n	800514e <_free_r+0x8a>
 80050cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d0:	1f0c      	subs	r4, r1, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bfb8      	it	lt
 80050d6:	18e4      	addlt	r4, r4, r3
 80050d8:	f000 f910 	bl	80052fc <__malloc_lock>
 80050dc:	4a1c      	ldr	r2, [pc, #112]	; (8005150 <_free_r+0x8c>)
 80050de:	6813      	ldr	r3, [r2, #0]
 80050e0:	b933      	cbnz	r3, 80050f0 <_free_r+0x2c>
 80050e2:	6063      	str	r3, [r4, #4]
 80050e4:	6014      	str	r4, [r2, #0]
 80050e6:	4628      	mov	r0, r5
 80050e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050ec:	f000 b90c 	b.w	8005308 <__malloc_unlock>
 80050f0:	42a3      	cmp	r3, r4
 80050f2:	d908      	bls.n	8005106 <_free_r+0x42>
 80050f4:	6820      	ldr	r0, [r4, #0]
 80050f6:	1821      	adds	r1, r4, r0
 80050f8:	428b      	cmp	r3, r1
 80050fa:	bf01      	itttt	eq
 80050fc:	6819      	ldreq	r1, [r3, #0]
 80050fe:	685b      	ldreq	r3, [r3, #4]
 8005100:	1809      	addeq	r1, r1, r0
 8005102:	6021      	streq	r1, [r4, #0]
 8005104:	e7ed      	b.n	80050e2 <_free_r+0x1e>
 8005106:	461a      	mov	r2, r3
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	b10b      	cbz	r3, 8005110 <_free_r+0x4c>
 800510c:	42a3      	cmp	r3, r4
 800510e:	d9fa      	bls.n	8005106 <_free_r+0x42>
 8005110:	6811      	ldr	r1, [r2, #0]
 8005112:	1850      	adds	r0, r2, r1
 8005114:	42a0      	cmp	r0, r4
 8005116:	d10b      	bne.n	8005130 <_free_r+0x6c>
 8005118:	6820      	ldr	r0, [r4, #0]
 800511a:	4401      	add	r1, r0
 800511c:	1850      	adds	r0, r2, r1
 800511e:	4283      	cmp	r3, r0
 8005120:	6011      	str	r1, [r2, #0]
 8005122:	d1e0      	bne.n	80050e6 <_free_r+0x22>
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4401      	add	r1, r0
 800512a:	6011      	str	r1, [r2, #0]
 800512c:	6053      	str	r3, [r2, #4]
 800512e:	e7da      	b.n	80050e6 <_free_r+0x22>
 8005130:	d902      	bls.n	8005138 <_free_r+0x74>
 8005132:	230c      	movs	r3, #12
 8005134:	602b      	str	r3, [r5, #0]
 8005136:	e7d6      	b.n	80050e6 <_free_r+0x22>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	1821      	adds	r1, r4, r0
 800513c:	428b      	cmp	r3, r1
 800513e:	bf01      	itttt	eq
 8005140:	6819      	ldreq	r1, [r3, #0]
 8005142:	685b      	ldreq	r3, [r3, #4]
 8005144:	1809      	addeq	r1, r1, r0
 8005146:	6021      	streq	r1, [r4, #0]
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	6054      	str	r4, [r2, #4]
 800514c:	e7cb      	b.n	80050e6 <_free_r+0x22>
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	20000578 	.word	0x20000578

08005154 <sbrk_aligned>:
 8005154:	b570      	push	{r4, r5, r6, lr}
 8005156:	4e0e      	ldr	r6, [pc, #56]	; (8005190 <sbrk_aligned+0x3c>)
 8005158:	460c      	mov	r4, r1
 800515a:	6831      	ldr	r1, [r6, #0]
 800515c:	4605      	mov	r5, r0
 800515e:	b911      	cbnz	r1, 8005166 <sbrk_aligned+0x12>
 8005160:	f000 f8bc 	bl	80052dc <_sbrk_r>
 8005164:	6030      	str	r0, [r6, #0]
 8005166:	4621      	mov	r1, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f000 f8b7 	bl	80052dc <_sbrk_r>
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	d00a      	beq.n	8005188 <sbrk_aligned+0x34>
 8005172:	1cc4      	adds	r4, r0, #3
 8005174:	f024 0403 	bic.w	r4, r4, #3
 8005178:	42a0      	cmp	r0, r4
 800517a:	d007      	beq.n	800518c <sbrk_aligned+0x38>
 800517c:	1a21      	subs	r1, r4, r0
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f8ac 	bl	80052dc <_sbrk_r>
 8005184:	3001      	adds	r0, #1
 8005186:	d101      	bne.n	800518c <sbrk_aligned+0x38>
 8005188:	f04f 34ff 	mov.w	r4, #4294967295
 800518c:	4620      	mov	r0, r4
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	2000057c 	.word	0x2000057c

08005194 <_malloc_r>:
 8005194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005198:	1ccd      	adds	r5, r1, #3
 800519a:	f025 0503 	bic.w	r5, r5, #3
 800519e:	3508      	adds	r5, #8
 80051a0:	2d0c      	cmp	r5, #12
 80051a2:	bf38      	it	cc
 80051a4:	250c      	movcc	r5, #12
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	4607      	mov	r7, r0
 80051aa:	db01      	blt.n	80051b0 <_malloc_r+0x1c>
 80051ac:	42a9      	cmp	r1, r5
 80051ae:	d905      	bls.n	80051bc <_malloc_r+0x28>
 80051b0:	230c      	movs	r3, #12
 80051b2:	2600      	movs	r6, #0
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	4630      	mov	r0, r6
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	4e2e      	ldr	r6, [pc, #184]	; (8005278 <_malloc_r+0xe4>)
 80051be:	f000 f89d 	bl	80052fc <__malloc_lock>
 80051c2:	6833      	ldr	r3, [r6, #0]
 80051c4:	461c      	mov	r4, r3
 80051c6:	bb34      	cbnz	r4, 8005216 <_malloc_r+0x82>
 80051c8:	4629      	mov	r1, r5
 80051ca:	4638      	mov	r0, r7
 80051cc:	f7ff ffc2 	bl	8005154 <sbrk_aligned>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	4604      	mov	r4, r0
 80051d4:	d14d      	bne.n	8005272 <_malloc_r+0xde>
 80051d6:	6834      	ldr	r4, [r6, #0]
 80051d8:	4626      	mov	r6, r4
 80051da:	2e00      	cmp	r6, #0
 80051dc:	d140      	bne.n	8005260 <_malloc_r+0xcc>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	4631      	mov	r1, r6
 80051e2:	4638      	mov	r0, r7
 80051e4:	eb04 0803 	add.w	r8, r4, r3
 80051e8:	f000 f878 	bl	80052dc <_sbrk_r>
 80051ec:	4580      	cmp	r8, r0
 80051ee:	d13a      	bne.n	8005266 <_malloc_r+0xd2>
 80051f0:	6821      	ldr	r1, [r4, #0]
 80051f2:	3503      	adds	r5, #3
 80051f4:	1a6d      	subs	r5, r5, r1
 80051f6:	f025 0503 	bic.w	r5, r5, #3
 80051fa:	3508      	adds	r5, #8
 80051fc:	2d0c      	cmp	r5, #12
 80051fe:	bf38      	it	cc
 8005200:	250c      	movcc	r5, #12
 8005202:	4638      	mov	r0, r7
 8005204:	4629      	mov	r1, r5
 8005206:	f7ff ffa5 	bl	8005154 <sbrk_aligned>
 800520a:	3001      	adds	r0, #1
 800520c:	d02b      	beq.n	8005266 <_malloc_r+0xd2>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	442b      	add	r3, r5
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	e00e      	b.n	8005234 <_malloc_r+0xa0>
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	1b52      	subs	r2, r2, r5
 800521a:	d41e      	bmi.n	800525a <_malloc_r+0xc6>
 800521c:	2a0b      	cmp	r2, #11
 800521e:	d916      	bls.n	800524e <_malloc_r+0xba>
 8005220:	1961      	adds	r1, r4, r5
 8005222:	42a3      	cmp	r3, r4
 8005224:	6025      	str	r5, [r4, #0]
 8005226:	bf18      	it	ne
 8005228:	6059      	strne	r1, [r3, #4]
 800522a:	6863      	ldr	r3, [r4, #4]
 800522c:	bf08      	it	eq
 800522e:	6031      	streq	r1, [r6, #0]
 8005230:	5162      	str	r2, [r4, r5]
 8005232:	604b      	str	r3, [r1, #4]
 8005234:	4638      	mov	r0, r7
 8005236:	f104 060b 	add.w	r6, r4, #11
 800523a:	f000 f865 	bl	8005308 <__malloc_unlock>
 800523e:	f026 0607 	bic.w	r6, r6, #7
 8005242:	1d23      	adds	r3, r4, #4
 8005244:	1af2      	subs	r2, r6, r3
 8005246:	d0b6      	beq.n	80051b6 <_malloc_r+0x22>
 8005248:	1b9b      	subs	r3, r3, r6
 800524a:	50a3      	str	r3, [r4, r2]
 800524c:	e7b3      	b.n	80051b6 <_malloc_r+0x22>
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	42a3      	cmp	r3, r4
 8005252:	bf0c      	ite	eq
 8005254:	6032      	streq	r2, [r6, #0]
 8005256:	605a      	strne	r2, [r3, #4]
 8005258:	e7ec      	b.n	8005234 <_malloc_r+0xa0>
 800525a:	4623      	mov	r3, r4
 800525c:	6864      	ldr	r4, [r4, #4]
 800525e:	e7b2      	b.n	80051c6 <_malloc_r+0x32>
 8005260:	4634      	mov	r4, r6
 8005262:	6876      	ldr	r6, [r6, #4]
 8005264:	e7b9      	b.n	80051da <_malloc_r+0x46>
 8005266:	230c      	movs	r3, #12
 8005268:	4638      	mov	r0, r7
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	f000 f84c 	bl	8005308 <__malloc_unlock>
 8005270:	e7a1      	b.n	80051b6 <_malloc_r+0x22>
 8005272:	6025      	str	r5, [r4, #0]
 8005274:	e7de      	b.n	8005234 <_malloc_r+0xa0>
 8005276:	bf00      	nop
 8005278:	20000578 	.word	0x20000578

0800527c <_realloc_r>:
 800527c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005280:	4680      	mov	r8, r0
 8005282:	4614      	mov	r4, r2
 8005284:	460e      	mov	r6, r1
 8005286:	b921      	cbnz	r1, 8005292 <_realloc_r+0x16>
 8005288:	4611      	mov	r1, r2
 800528a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800528e:	f7ff bf81 	b.w	8005194 <_malloc_r>
 8005292:	b92a      	cbnz	r2, 80052a0 <_realloc_r+0x24>
 8005294:	f7ff ff16 	bl	80050c4 <_free_r>
 8005298:	4625      	mov	r5, r4
 800529a:	4628      	mov	r0, r5
 800529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a0:	f000 f838 	bl	8005314 <_malloc_usable_size_r>
 80052a4:	4284      	cmp	r4, r0
 80052a6:	4607      	mov	r7, r0
 80052a8:	d802      	bhi.n	80052b0 <_realloc_r+0x34>
 80052aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052ae:	d812      	bhi.n	80052d6 <_realloc_r+0x5a>
 80052b0:	4621      	mov	r1, r4
 80052b2:	4640      	mov	r0, r8
 80052b4:	f7ff ff6e 	bl	8005194 <_malloc_r>
 80052b8:	4605      	mov	r5, r0
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d0ed      	beq.n	800529a <_realloc_r+0x1e>
 80052be:	42bc      	cmp	r4, r7
 80052c0:	4622      	mov	r2, r4
 80052c2:	4631      	mov	r1, r6
 80052c4:	bf28      	it	cs
 80052c6:	463a      	movcs	r2, r7
 80052c8:	f7ff fed4 	bl	8005074 <memcpy>
 80052cc:	4631      	mov	r1, r6
 80052ce:	4640      	mov	r0, r8
 80052d0:	f7ff fef8 	bl	80050c4 <_free_r>
 80052d4:	e7e1      	b.n	800529a <_realloc_r+0x1e>
 80052d6:	4635      	mov	r5, r6
 80052d8:	e7df      	b.n	800529a <_realloc_r+0x1e>
	...

080052dc <_sbrk_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	2300      	movs	r3, #0
 80052e0:	4d05      	ldr	r5, [pc, #20]	; (80052f8 <_sbrk_r+0x1c>)
 80052e2:	4604      	mov	r4, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	f7fc fec4 	bl	8002074 <_sbrk>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_sbrk_r+0x1a>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_sbrk_r+0x1a>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20000580 	.word	0x20000580

080052fc <__malloc_lock>:
 80052fc:	4801      	ldr	r0, [pc, #4]	; (8005304 <__malloc_lock+0x8>)
 80052fe:	f000 b811 	b.w	8005324 <__retarget_lock_acquire_recursive>
 8005302:	bf00      	nop
 8005304:	20000584 	.word	0x20000584

08005308 <__malloc_unlock>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__malloc_unlock+0x8>)
 800530a:	f000 b80c 	b.w	8005326 <__retarget_lock_release_recursive>
 800530e:	bf00      	nop
 8005310:	20000584 	.word	0x20000584

08005314 <_malloc_usable_size_r>:
 8005314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005318:	1f18      	subs	r0, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	bfbc      	itt	lt
 800531e:	580b      	ldrlt	r3, [r1, r0]
 8005320:	18c0      	addlt	r0, r0, r3
 8005322:	4770      	bx	lr

08005324 <__retarget_lock_acquire_recursive>:
 8005324:	4770      	bx	lr

08005326 <__retarget_lock_release_recursive>:
 8005326:	4770      	bx	lr

08005328 <_init>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr

08005334 <_fini>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr
