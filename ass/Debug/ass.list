
ass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08005130  08005130  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005130  08005130  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000009c  080051d4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080051d4  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c444  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242e  00000000  00000000  0002c509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  0002f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003652  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f66  00000000  00000000  00033b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b185  00000000  00000000  00044af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfc7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d88  00000000  00000000  000cfcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	080050ac 	.word	0x080050ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	080050ac 	.word	0x080050ac

0800014c <fsm_automatic_1_run>:
 */


#include <fsm_automatic_1.h>

void fsm_automatic_1_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status_ver){
 8000150:	4b56      	ldr	r3, [pc, #344]	; (80002ac <fsm_automatic_1_run+0x160>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b0e      	cmp	r3, #14
 8000156:	f200 809a 	bhi.w	800028e <fsm_automatic_1_run+0x142>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic_1_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800019d 	.word	0x0800019d
 8000164:	0800028f 	.word	0x0800028f
 8000168:	0800028f 	.word	0x0800028f
 800016c:	0800028f 	.word	0x0800028f
 8000170:	0800028f 	.word	0x0800028f
 8000174:	0800028f 	.word	0x0800028f
 8000178:	0800028f 	.word	0x0800028f
 800017c:	0800028f 	.word	0x0800028f
 8000180:	080001c3 	.word	0x080001c3
 8000184:	080001f1 	.word	0x080001f1
 8000188:	0800021f 	.word	0x0800021f
 800018c:	0800028f 	.word	0x0800028f
 8000190:	0800024d 	.word	0x0800024d
 8000194:	08000263 	.word	0x08000263
 8000198:	08000279 	.word	0x08000279
	case INIT:

		SetOffVer();
 800019c:	f000 fdc2 	bl	8000d24 <SetOffVer>
		led12 = timered;
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a43      	ldr	r2, [pc, #268]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001a6:	6013      	str	r3, [r2, #0]
		status_ver = AUTO_RED;
 80001a8:	4b40      	ldr	r3, [pc, #256]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	601a      	str	r2, [r3, #0]

		setTimer1(timeTimer(timered));
 80001ae:	4b40      	ldr	r3, [pc, #256]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fb7a 	bl	80008ac <timeTimer>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 fbb2 	bl	8001924 <setTimer1>
		break;
 80001c0:	e072      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
	case AUTO_RED:
		SetRedVer();
 80001c2:	f000 fdf7 	bl	8000db4 <SetRedVer>
		if (timer1_flag == 1){
 80001c6:	4b3c      	ldr	r3, [pc, #240]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d161      	bne.n	8000292 <fsm_automatic_1_run+0x146>
			status_ver = AUTO_GREEN;
 80001ce:	4b37      	ldr	r3, [pc, #220]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001d0:	2209      	movs	r2, #9
 80001d2:	601a      	str	r2, [r3, #0]
			led12 = timegreen;
 80001d4:	4b39      	ldr	r3, [pc, #228]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a36      	ldr	r2, [pc, #216]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001da:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timegreen));
 80001dc:	4b37      	ldr	r3, [pc, #220]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fb63 	bl	80008ac <timeTimer>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fb9b 	bl	8001924 <setTimer1>
		}

		break;
 80001ee:	e050      	b.n	8000292 <fsm_automatic_1_run+0x146>
	case AUTO_GREEN:

		SetGreenVer();
 80001f0:	f000 fdf2 	bl	8000dd8 <SetGreenVer>
		if (timer1_flag == 1){
 80001f4:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d14c      	bne.n	8000296 <fsm_automatic_1_run+0x14a>
			status_ver = AUTO_YELLOW;
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001fe:	220a      	movs	r2, #10
 8000200:	601a      	str	r2, [r3, #0]
			led12 = timeyellow;
 8000202:	4b2f      	ldr	r3, [pc, #188]	; (80002c0 <fsm_automatic_1_run+0x174>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a2b      	ldr	r2, [pc, #172]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000208:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timeyellow));
 800020a:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <fsm_automatic_1_run+0x174>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fb4c 	bl	80008ac <timeTimer>
 8000214:	4603      	mov	r3, r0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fb84 	bl	8001924 <setTimer1>
		}

		break;
 800021c:	e03b      	b.n	8000296 <fsm_automatic_1_run+0x14a>
	case AUTO_YELLOW:

		SetYellowVer();
 800021e:	f000 fded 	bl	8000dfc <SetYellowVer>
		if (timer1_flag == 1){
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d137      	bne.n	800029a <fsm_automatic_1_run+0x14e>
			status_ver = AUTO_RED;
 800022a:	4b20      	ldr	r3, [pc, #128]	; (80002ac <fsm_automatic_1_run+0x160>)
 800022c:	2208      	movs	r2, #8
 800022e:	601a      	str	r2, [r3, #0]
			led12 = timered;
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <fsm_automatic_1_run+0x164>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000236:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timered));
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <fsm_automatic_1_run+0x164>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fb35 	bl	80008ac <timeTimer>
 8000242:	4603      	mov	r3, r0
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fb6d 	bl	8001924 <setTimer1>
		}

		break;
 800024a:	e026      	b.n	800029a <fsm_automatic_1_run+0x14e>
	case MODIFY_RED:
		if (timer1_flag == 1){
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d124      	bne.n	800029e <fsm_automatic_1_run+0x152>
			BlinkyRedVer();
 8000254:	f000 fcde 	bl	8000c14 <BlinkyRedVer>
			setTimer1(500);
 8000258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025c:	f001 fb62 	bl	8001924 <setTimer1>
		}
		break;
 8000260:	e01d      	b.n	800029e <fsm_automatic_1_run+0x152>
	case MODIFY_GREEN:
		if (timer1_flag == 1){
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d11b      	bne.n	80002a2 <fsm_automatic_1_run+0x156>
			BlinkyGreenVer();
 800026a:	f000 fce5 	bl	8000c38 <BlinkyGreenVer>
			setTimer1(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f001 fb57 	bl	8001924 <setTimer1>
		}
		break;
 8000276:	e014      	b.n	80002a2 <fsm_automatic_1_run+0x156>
	case MODIFY_YELLOW:
		if (timer1_flag == 1){
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d112      	bne.n	80002a6 <fsm_automatic_1_run+0x15a>
			BlinkyYellowVer();
 8000280:	f000 fcec 	bl	8000c5c <BlinkyYellowVer>
			setTimer1(500);
 8000284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000288:	f001 fb4c 	bl	8001924 <setTimer1>
		}
		break;
 800028c:	e00b      	b.n	80002a6 <fsm_automatic_1_run+0x15a>
	default:
		break;
 800028e:	bf00      	nop
 8000290:	e00a      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000292:	bf00      	nop
 8000294:	e008      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000296:	bf00      	nop
 8000298:	e006      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029a:	bf00      	nop
 800029c:	e004      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029e:	bf00      	nop
 80002a0:	e002      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a2:	bf00      	nop
 80002a4:	e000      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a6:	bf00      	nop
	}

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	200000bc 	.word	0x200000bc
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	20000018 	.word	0x20000018
 80002b8:	2000053c 	.word	0x2000053c
 80002bc:	20000010 	.word	0x20000010
 80002c0:	20000014 	.word	0x20000014

080002c4 <fsm_automatic_2_run>:
 *      Author: pc
 */

#include "fsm_automatic_2.h"

void fsm_automatic_2_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch (status_hor){
 80002c8:	4b56      	ldr	r3, [pc, #344]	; (8000424 <fsm_automatic_2_run+0x160>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b0e      	cmp	r3, #14
 80002ce:	f200 809a 	bhi.w	8000406 <fsm_automatic_2_run+0x142>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_2_run+0x14>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	08000315 	.word	0x08000315
 80002dc:	08000407 	.word	0x08000407
 80002e0:	08000407 	.word	0x08000407
 80002e4:	08000407 	.word	0x08000407
 80002e8:	08000407 	.word	0x08000407
 80002ec:	08000407 	.word	0x08000407
 80002f0:	08000407 	.word	0x08000407
 80002f4:	08000407 	.word	0x08000407
 80002f8:	0800033b 	.word	0x0800033b
 80002fc:	08000369 	.word	0x08000369
 8000300:	08000397 	.word	0x08000397
 8000304:	08000407 	.word	0x08000407
 8000308:	080003c5 	.word	0x080003c5
 800030c:	080003db 	.word	0x080003db
 8000310:	080003f1 	.word	0x080003f1
	case INIT:
		SetOffHor();
 8000314:	f000 fd84 	bl	8000e20 <SetOffHor>
		led34 = timegreen;
 8000318:	4b43      	ldr	r3, [pc, #268]	; (8000428 <fsm_automatic_2_run+0x164>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a43      	ldr	r2, [pc, #268]	; (800042c <fsm_automatic_2_run+0x168>)
 800031e:	6013      	str	r3, [r2, #0]
		status_hor = AUTO_GREEN;
 8000320:	4b40      	ldr	r3, [pc, #256]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000322:	2209      	movs	r2, #9
 8000324:	601a      	str	r2, [r3, #0]
		setTimer2(timeTimer(timegreen));
 8000326:	4b40      	ldr	r3, [pc, #256]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fabe 	bl	80008ac <timeTimer>
 8000330:	4603      	mov	r3, r0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fb10 	bl	8001958 <setTimer2>
		break;
 8000338:	e072      	b.n	8000420 <fsm_automatic_2_run+0x15c>
	case AUTO_RED :
		SetRedHor();
 800033a:	f000 fd83 	bl	8000e44 <SetRedHor>
		if (timer2_flag == 1){
 800033e:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <fsm_automatic_2_run+0x16c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d161      	bne.n	800040a <fsm_automatic_2_run+0x146>
			status_hor = AUTO_GREEN;
 8000346:	4b37      	ldr	r3, [pc, #220]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000348:	2209      	movs	r2, #9
 800034a:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <fsm_automatic_2_run+0x164>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <fsm_automatic_2_run+0x168>)
 8000352:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timegreen));
 8000354:	4b34      	ldr	r3, [pc, #208]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 faa7 	bl	80008ac <timeTimer>
 800035e:	4603      	mov	r3, r0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 faf9 	bl	8001958 <setTimer2>
		}

		break;
 8000366:	e050      	b.n	800040a <fsm_automatic_2_run+0x146>
	case AUTO_GREEN:

		SetGreenHor();
 8000368:	f000 fd7e 	bl	8000e68 <SetGreenHor>
		if (timer2_flag == 1){
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d14c      	bne.n	800040e <fsm_automatic_2_run+0x14a>
			status_hor = AUTO_YELLOW;
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000376:	220a      	movs	r2, #10
 8000378:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <fsm_automatic_2_run+0x170>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a2b      	ldr	r2, [pc, #172]	; (800042c <fsm_automatic_2_run+0x168>)
 8000380:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timeyellow));
 8000382:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <fsm_automatic_2_run+0x170>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fa90 	bl	80008ac <timeTimer>
 800038c:	4603      	mov	r3, r0
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fae2 	bl	8001958 <setTimer2>
		}

		break;
 8000394:	e03b      	b.n	800040e <fsm_automatic_2_run+0x14a>
	case AUTO_YELLOW:
		SetYellowHor();
 8000396:	f000 fd79 	bl	8000e8c <SetYellowHor>
		if (timer2_flag == 1){
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d137      	bne.n	8000412 <fsm_automatic_2_run+0x14e>
			status_hor = AUTO_RED;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <fsm_automatic_2_run+0x160>)
 80003a4:	2208      	movs	r2, #8
 80003a6:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1f      	ldr	r2, [pc, #124]	; (800042c <fsm_automatic_2_run+0x168>)
 80003ae:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timered));
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fa79 	bl	80008ac <timeTimer>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 facb 	bl	8001958 <setTimer2>
		}
		break;
 80003c2:	e026      	b.n	8000412 <fsm_automatic_2_run+0x14e>
	case MODIFY_RED:
		if (timer2_flag == 1){
 80003c4:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d124      	bne.n	8000416 <fsm_automatic_2_run+0x152>
			BlinkyRedHor();
 80003cc:	f000 fc56 	bl	8000c7c <BlinkyRedHor>
			setTimer2(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f001 fac0 	bl	8001958 <setTimer2>
		}
		break;
 80003d8:	e01d      	b.n	8000416 <fsm_automatic_2_run+0x152>
	case MODIFY_GREEN:
		if (timer2_flag == 1){
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d11b      	bne.n	800041a <fsm_automatic_2_run+0x156>
			BlinkyGreenHor();
 80003e2:	f000 fc5d 	bl	8000ca0 <BlinkyGreenHor>
			setTimer2(500);
 80003e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ea:	f001 fab5 	bl	8001958 <setTimer2>
		}
		break;
 80003ee:	e014      	b.n	800041a <fsm_automatic_2_run+0x156>
	case MODIFY_YELLOW:
		if (timer2_flag == 1){
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d112      	bne.n	800041e <fsm_automatic_2_run+0x15a>
			BlinkyYellowHor();
 80003f8:	f000 fc64 	bl	8000cc4 <BlinkyYellowHor>
			setTimer2(500);
 80003fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000400:	f001 faaa 	bl	8001958 <setTimer2>
		}
		break;
 8000404:	e00b      	b.n	800041e <fsm_automatic_2_run+0x15a>
	default:
		break;
 8000406:	bf00      	nop
 8000408:	e00a      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040a:	bf00      	nop
 800040c:	e008      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040e:	bf00      	nop
 8000410:	e006      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000412:	bf00      	nop
 8000414:	e004      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000416:	bf00      	nop
 8000418:	e002      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041a:	bf00      	nop
 800041c:	e000      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041e:	bf00      	nop
	}

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000c0 	.word	0x200000c0
 8000428:	20000010 	.word	0x20000010
 800042c:	2000001c 	.word	0x2000001c
 8000430:	20000540 	.word	0x20000540
 8000434:	20000014 	.word	0x20000014
 8000438:	2000000c 	.word	0x2000000c

0800043c <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	switch (status_mode){
 8000440:	4b89      	ldr	r3, [pc, #548]	; (8000668 <fsm_mode_run+0x22c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b04      	cmp	r3, #4
 8000446:	f200 8103 	bhi.w	8000650 <fsm_mode_run+0x214>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_mode_run+0x14>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000465 	.word	0x08000465
 8000454:	0800048b 	.word	0x0800048b
 8000458:	080004dd 	.word	0x080004dd
 800045c:	08000565 	.word	0x08000565
 8000460:	080005ed 	.word	0x080005ed
	case INIT:
		status_mode = MODE1;
 8000464:	4b80      	ldr	r3, [pc, #512]	; (8000668 <fsm_mode_run+0x22c>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
		status_ver = INIT;
 800046a:	4b80      	ldr	r3, [pc, #512]	; (800066c <fsm_mode_run+0x230>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
		status_hor = INIT;
 8000470:	4b7f      	ldr	r3, [pc, #508]	; (8000670 <fsm_mode_run+0x234>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
		status_pedes = Pedes_Off;
 8000476:	4b7f      	ldr	r3, [pc, #508]	; (8000674 <fsm_mode_run+0x238>)
 8000478:	2228      	movs	r2, #40	; 0x28
 800047a:	601a      	str	r2, [r3, #0]
		status_led7seg = INIT;
 800047c:	4b7e      	ldr	r3, [pc, #504]	; (8000678 <fsm_mode_run+0x23c>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
		index_led = 0;
 8000482:	4b7e      	ldr	r3, [pc, #504]	; (800067c <fsm_mode_run+0x240>)
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
		//setTimer1(500);
		break;
 8000488:	e0eb      	b.n	8000662 <fsm_mode_run+0x226>
	case MODE1 :

		if (isButtonflag(but1) == 1){
 800048a:	4b7d      	ldr	r3, [pc, #500]	; (8000680 <fsm_mode_run+0x244>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fa1a 	bl	80008c8 <isButtonflag>
 8000494:	4603      	mov	r3, r0
 8000496:	2b01      	cmp	r3, #1
 8000498:	f040 80dc 	bne.w	8000654 <fsm_mode_run+0x218>
			clearTimer1();
 800049c:	f001 fa02 	bl	80018a4 <clearTimer1>
			clearTimer2();
 80004a0:	f001 fa10 	bl	80018c4 <clearTimer2>
			clearTimer3();
 80004a4:	f001 fa1e 	bl	80018e4 <clearTimer3>
			status_mode = MODE2;
 80004a8:	4b6f      	ldr	r3, [pc, #444]	; (8000668 <fsm_mode_run+0x22c>)
 80004aa:	2202      	movs	r2, #2
 80004ac:	601a      	str	r2, [r3, #0]
			SetOffVerHor();// to when blinky, led red ver and hor are the same
 80004ae:	f000 fc19 	bl	8000ce4 <SetOffVerHor>
			status_ver = MODIFY_RED;
 80004b2:	4b6e      	ldr	r3, [pc, #440]	; (800066c <fsm_mode_run+0x230>)
 80004b4:	220c      	movs	r2, #12
 80004b6:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_RED;
 80004b8:	4b6d      	ldr	r3, [pc, #436]	; (8000670 <fsm_mode_run+0x234>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	601a      	str	r2, [r3, #0]
			led12 = MODE2;
 80004be:	4b71      	ldr	r3, [pc, #452]	; (8000684 <fsm_mode_run+0x248>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80004c4:	4b70      	ldr	r3, [pc, #448]	; (8000688 <fsm_mode_run+0x24c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a70      	ldr	r2, [pc, #448]	; (800068c <fsm_mode_run+0x250>)
 80004ca:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80004cc:	4b6a      	ldr	r3, [pc, #424]	; (8000678 <fsm_mode_run+0x23c>)
 80004ce:	221e      	movs	r2, #30
 80004d0:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 80004d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d6:	f001 fa59 	bl	800198c <setTimer3>
		}

		break;
 80004da:	e0bb      	b.n	8000654 <fsm_mode_run+0x218>
	case MODE2:
		if (isButtonflag(but1) == 1){
 80004dc:	4b68      	ldr	r3, [pc, #416]	; (8000680 <fsm_mode_run+0x244>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f9f1 	bl	80008c8 <isButtonflag>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d11a      	bne.n	8000522 <fsm_mode_run+0xe6>
			clearTimer1();
 80004ec:	f001 f9da 	bl	80018a4 <clearTimer1>
			clearTimer2();
 80004f0:	f001 f9e8 	bl	80018c4 <clearTimer2>
			clearTimer3();
 80004f4:	f001 f9f6 	bl	80018e4 <clearTimer3>
			status_mode = MODE3;
 80004f8:	4b5b      	ldr	r3, [pc, #364]	; (8000668 <fsm_mode_run+0x22c>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	601a      	str	r2, [r3, #0]
			SetOffVerHor();
 80004fe:	f000 fbf1 	bl	8000ce4 <SetOffVerHor>
			status_ver = MODIFY_YELLOW;
 8000502:	4b5a      	ldr	r3, [pc, #360]	; (800066c <fsm_mode_run+0x230>)
 8000504:	220e      	movs	r2, #14
 8000506:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_YELLOW;
 8000508:	4b59      	ldr	r3, [pc, #356]	; (8000670 <fsm_mode_run+0x234>)
 800050a:	220e      	movs	r2, #14
 800050c:	601a      	str	r2, [r3, #0]
			led12 = MODE3;
 800050e:	4b5d      	ldr	r3, [pc, #372]	; (8000684 <fsm_mode_run+0x248>)
 8000510:	2203      	movs	r2, #3
 8000512:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 8000514:	4b5e      	ldr	r3, [pc, #376]	; (8000690 <fsm_mode_run+0x254>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a5c      	ldr	r2, [pc, #368]	; (800068c <fsm_mode_run+0x250>)
 800051a:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 800051c:	4b56      	ldr	r3, [pc, #344]	; (8000678 <fsm_mode_run+0x23c>)
 800051e:	221e      	movs	r2, #30
 8000520:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000522:	4b5c      	ldr	r3, [pc, #368]	; (8000694 <fsm_mode_run+0x258>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f9ce 	bl	80008c8 <isButtonflag>
 800052c:	4603      	mov	r3, r0
 800052e:	2b01      	cmp	r3, #1
 8000530:	d10b      	bne.n	800054a <fsm_mode_run+0x10e>
			led34++;
 8000532:	4b56      	ldr	r3, [pc, #344]	; (800068c <fsm_mode_run+0x250>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	3301      	adds	r3, #1
 8000538:	4a54      	ldr	r2, [pc, #336]	; (800068c <fsm_mode_run+0x250>)
 800053a:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 800053c:	4b53      	ldr	r3, [pc, #332]	; (800068c <fsm_mode_run+0x250>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b63      	cmp	r3, #99	; 0x63
 8000542:	dd02      	ble.n	800054a <fsm_mode_run+0x10e>
				led34 = 0;
 8000544:	4b51      	ldr	r3, [pc, #324]	; (800068c <fsm_mode_run+0x250>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 800054a:	4b53      	ldr	r3, [pc, #332]	; (8000698 <fsm_mode_run+0x25c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f9ba 	bl	80008c8 <isButtonflag>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d17e      	bne.n	8000658 <fsm_mode_run+0x21c>
			timered  = led34;
 800055a:	4b4c      	ldr	r3, [pc, #304]	; (800068c <fsm_mode_run+0x250>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a4a      	ldr	r2, [pc, #296]	; (8000688 <fsm_mode_run+0x24c>)
 8000560:	6013      	str	r3, [r2, #0]
		}
		break;
 8000562:	e079      	b.n	8000658 <fsm_mode_run+0x21c>
	case MODE3:

		if (isButtonflag(but1) == 1){
 8000564:	4b46      	ldr	r3, [pc, #280]	; (8000680 <fsm_mode_run+0x244>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f9ad 	bl	80008c8 <isButtonflag>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	d11a      	bne.n	80005aa <fsm_mode_run+0x16e>
			clearTimer1();
 8000574:	f001 f996 	bl	80018a4 <clearTimer1>
			clearTimer2();
 8000578:	f001 f9a4 	bl	80018c4 <clearTimer2>
			clearTimer3();
 800057c:	f001 f9b2 	bl	80018e4 <clearTimer3>
			status_mode = MODE4;
 8000580:	4b39      	ldr	r3, [pc, #228]	; (8000668 <fsm_mode_run+0x22c>)
 8000582:	2204      	movs	r2, #4
 8000584:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_GREEN;
 8000586:	4b39      	ldr	r3, [pc, #228]	; (800066c <fsm_mode_run+0x230>)
 8000588:	220d      	movs	r2, #13
 800058a:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_GREEN;
 800058c:	4b38      	ldr	r3, [pc, #224]	; (8000670 <fsm_mode_run+0x234>)
 800058e:	220d      	movs	r2, #13
 8000590:	601a      	str	r2, [r3, #0]
			SetOffVerHor();
 8000592:	f000 fba7 	bl	8000ce4 <SetOffVerHor>
			led12 = MODE4;
 8000596:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <fsm_mode_run+0x248>)
 8000598:	2204      	movs	r2, #4
 800059a:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 800059c:	4b3f      	ldr	r3, [pc, #252]	; (800069c <fsm_mode_run+0x260>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a3a      	ldr	r2, [pc, #232]	; (800068c <fsm_mode_run+0x250>)
 80005a2:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80005a4:	4b34      	ldr	r3, [pc, #208]	; (8000678 <fsm_mode_run+0x23c>)
 80005a6:	221e      	movs	r2, #30
 80005a8:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <fsm_mode_run+0x258>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f98a 	bl	80008c8 <isButtonflag>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d10b      	bne.n	80005d2 <fsm_mode_run+0x196>
			led34++;
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <fsm_mode_run+0x250>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a32      	ldr	r2, [pc, #200]	; (800068c <fsm_mode_run+0x250>)
 80005c2:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 80005c4:	4b31      	ldr	r3, [pc, #196]	; (800068c <fsm_mode_run+0x250>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b63      	cmp	r3, #99	; 0x63
 80005ca:	dd02      	ble.n	80005d2 <fsm_mode_run+0x196>
				led34 = 0;
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <fsm_mode_run+0x250>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 80005d2:	4b31      	ldr	r3, [pc, #196]	; (8000698 <fsm_mode_run+0x25c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f976 	bl	80008c8 <isButtonflag>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d13c      	bne.n	800065c <fsm_mode_run+0x220>
			timeyellow  = led34;
 80005e2:	4b2a      	ldr	r3, [pc, #168]	; (800068c <fsm_mode_run+0x250>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <fsm_mode_run+0x254>)
 80005e8:	6013      	str	r3, [r2, #0]
		}

		break;
 80005ea:	e037      	b.n	800065c <fsm_mode_run+0x220>
	case MODE4:
		if (isButtonflag(but1) == 1){
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <fsm_mode_run+0x244>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f969 	bl	80008c8 <isButtonflag>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d108      	bne.n	800060e <fsm_mode_run+0x1d2>
			clearTimer1();
 80005fc:	f001 f952 	bl	80018a4 <clearTimer1>
			clearTimer2();
 8000600:	f001 f960 	bl	80018c4 <clearTimer2>
			clearTimer3();
 8000604:	f001 f96e 	bl	80018e4 <clearTimer3>
			status_mode = INIT;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <fsm_mode_run+0x22c>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
//			status_ver = INIT;
//			status_hor = INIT;
//			status_led7seg = MODE1_led7seg_1;
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <fsm_mode_run+0x258>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f958 	bl	80008c8 <isButtonflag>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d10b      	bne.n	8000636 <fsm_mode_run+0x1fa>
			led34++;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <fsm_mode_run+0x250>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	4a19      	ldr	r2, [pc, #100]	; (800068c <fsm_mode_run+0x250>)
 8000626:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <fsm_mode_run+0x250>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b63      	cmp	r3, #99	; 0x63
 800062e:	dd02      	ble.n	8000636 <fsm_mode_run+0x1fa>
				led34 = 0;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <fsm_mode_run+0x250>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <fsm_mode_run+0x25c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f944 	bl	80008c8 <isButtonflag>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d10c      	bne.n	8000660 <fsm_mode_run+0x224>
			timegreen = led34;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <fsm_mode_run+0x250>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <fsm_mode_run+0x260>)
 800064c:	6013      	str	r3, [r2, #0]
		}
		break;
 800064e:	e007      	b.n	8000660 <fsm_mode_run+0x224>
	default:
		break;
 8000650:	bf00      	nop
 8000652:	e006      	b.n	8000662 <fsm_mode_run+0x226>
		break;
 8000654:	bf00      	nop
 8000656:	e004      	b.n	8000662 <fsm_mode_run+0x226>
		break;
 8000658:	bf00      	nop
 800065a:	e002      	b.n	8000662 <fsm_mode_run+0x226>
		break;
 800065c:	bf00      	nop
 800065e:	e000      	b.n	8000662 <fsm_mode_run+0x226>
		break;
 8000660:	bf00      	nop
	}


}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000b8 	.word	0x200000b8
 800066c:	200000bc 	.word	0x200000bc
 8000670:	200000c0 	.word	0x200000c0
 8000674:	200000c8 	.word	0x200000c8
 8000678:	200000c4 	.word	0x200000c4
 800067c:	200000cc 	.word	0x200000cc
 8000680:	200000d0 	.word	0x200000d0
 8000684:	20000018 	.word	0x20000018
 8000688:	2000000c 	.word	0x2000000c
 800068c:	2000001c 	.word	0x2000001c
 8000690:	20000014 	.word	0x20000014
 8000694:	20000000 	.word	0x20000000
 8000698:	20000004 	.word	0x20000004
 800069c:	20000010 	.word	0x20000010

080006a0 <fsm_mode_led7seg>:
 */

#include "fsm_mode_Led7Seg.h"
//int Ts = 10;
//int count = 1;
void fsm_mode_led7seg(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

	switch (status_led7seg){
 80006a4:	4b7c      	ldr	r3, [pc, #496]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b21      	cmp	r3, #33	; 0x21
 80006aa:	f200 80e2 	bhi.w	8000872 <fsm_mode_led7seg+0x1d2>
 80006ae:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <fsm_mode_led7seg+0x14>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	0800073d 	.word	0x0800073d
 80006b8:	08000873 	.word	0x08000873
 80006bc:	08000873 	.word	0x08000873
 80006c0:	08000873 	.word	0x08000873
 80006c4:	08000873 	.word	0x08000873
 80006c8:	08000873 	.word	0x08000873
 80006cc:	08000873 	.word	0x08000873
 80006d0:	08000873 	.word	0x08000873
 80006d4:	08000873 	.word	0x08000873
 80006d8:	08000873 	.word	0x08000873
 80006dc:	08000873 	.word	0x08000873
 80006e0:	08000873 	.word	0x08000873
 80006e4:	08000873 	.word	0x08000873
 80006e8:	08000873 	.word	0x08000873
 80006ec:	08000873 	.word	0x08000873
 80006f0:	08000873 	.word	0x08000873
 80006f4:	08000873 	.word	0x08000873
 80006f8:	08000873 	.word	0x08000873
 80006fc:	08000873 	.word	0x08000873
 8000700:	08000873 	.word	0x08000873
 8000704:	08000755 	.word	0x08000755
 8000708:	08000777 	.word	0x08000777
 800070c:	08000797 	.word	0x08000797
 8000710:	080007d7 	.word	0x080007d7
 8000714:	08000873 	.word	0x08000873
 8000718:	08000873 	.word	0x08000873
 800071c:	08000873 	.word	0x08000873
 8000720:	08000873 	.word	0x08000873
 8000724:	08000873 	.word	0x08000873
 8000728:	08000873 	.word	0x08000873
 800072c:	080007f7 	.word	0x080007f7
 8000730:	08000817 	.word	0x08000817
 8000734:	08000837 	.word	0x08000837
 8000738:	08000853 	.word	0x08000853
		case INIT:
				status_led7seg = MODE1_led7seg_1;
 800073c:	4b56      	ldr	r3, [pc, #344]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 800073e:	2214      	movs	r2, #20
 8000740:	601a      	str	r2, [r3, #0]
				//updateLedBuffer(led12,led34);
				//SetLed7Seg1On();
				//update7SEG(index_led);
				index_led++;
 8000742:	4b56      	ldr	r3, [pc, #344]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	4a54      	ldr	r2, [pc, #336]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800074a:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800074c:	20fa      	movs	r0, #250	; 0xfa
 800074e:	f001 f91d 	bl	800198c <setTimer3>
			break;
 8000752:	e09f      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
		case MODE1_led7seg_1:
			if (timer3_flag == 1){
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	f040 808c 	bne.w	8000876 <fsm_mode_led7seg+0x1d6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_2;
 800075e:	4b4e      	ldr	r3, [pc, #312]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000760:	2215      	movs	r2, #21
 8000762:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 8000764:	4b4d      	ldr	r3, [pc, #308]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a4c      	ldr	r2, [pc, #304]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800076c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800076e:	20fa      	movs	r0, #250	; 0xfa
 8000770:	f001 f90c 	bl	800198c <setTimer3>
			}
			break;
 8000774:	e07f      	b.n	8000876 <fsm_mode_led7seg+0x1d6>
		case MODE1_led7seg_2:
			if (timer3_flag == 1){
 8000776:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d17d      	bne.n	800087a <fsm_mode_led7seg+0x1da>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_3;
 800077e:	4b46      	ldr	r3, [pc, #280]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000780:	2216      	movs	r2, #22
 8000782:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 8000784:	4b45      	ldr	r3, [pc, #276]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a44      	ldr	r2, [pc, #272]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800078c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(255);
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	f001 f8fc 	bl	800198c <setTimer3>
			}
			break;
 8000794:	e071      	b.n	800087a <fsm_mode_led7seg+0x1da>
		case MODE1_led7seg_3:

			if (timer3_flag == 1){
 8000796:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d16f      	bne.n	800087e <fsm_mode_led7seg+0x1de>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_4;
 800079e:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 80007a0:	2217      	movs	r2, #23
 80007a2:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 80007a4:	4b3d      	ldr	r3, [pc, #244]	; (800089c <fsm_mode_led7seg+0x1fc>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
//			    	led34--;
//			    	count = 1;
//			    }
//			    else count++;
//				setTimer3(Ts);
				if (led12 - 1 != 0 ) led12--;
 80007aa:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <fsm_mode_led7seg+0x204>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d004      	beq.n	80007bc <fsm_mode_led7seg+0x11c>
 80007b2:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <fsm_mode_led7seg+0x204>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	4a3a      	ldr	r2, [pc, #232]	; (80008a4 <fsm_mode_led7seg+0x204>)
 80007ba:	6013      	str	r3, [r2, #0]
				if (led34 - 1 != 0 ) led34--;
 80007bc:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <fsm_mode_led7seg+0x208>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d004      	beq.n	80007ce <fsm_mode_led7seg+0x12e>
 80007c4:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <fsm_mode_led7seg+0x208>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	4a37      	ldr	r2, [pc, #220]	; (80008a8 <fsm_mode_led7seg+0x208>)
 80007cc:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80007ce:	20fa      	movs	r0, #250	; 0xfa
 80007d0:	f001 f8dc 	bl	800198c <setTimer3>
			}
			break;
 80007d4:	e053      	b.n	800087e <fsm_mode_led7seg+0x1de>
		case MODE1_led7seg_4:
			if (timer3_flag == 1){
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <fsm_mode_led7seg+0x200>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d151      	bne.n	8000882 <fsm_mode_led7seg+0x1e2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_1;
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 80007e0:	2214      	movs	r2, #20
 80007e2:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <fsm_mode_led7seg+0x1fc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a2c      	ldr	r2, [pc, #176]	; (800089c <fsm_mode_led7seg+0x1fc>)
 80007ec:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80007ee:	20fa      	movs	r0, #250	; 0xfa
 80007f0:	f001 f8cc 	bl	800198c <setTimer3>
			}
			break;
 80007f4:	e045      	b.n	8000882 <fsm_mode_led7seg+0x1e2>
		case MODE_MODIFY_led7seg_1:
			if (timer3_flag == 1){
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <fsm_mode_led7seg+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d143      	bne.n	8000886 <fsm_mode_led7seg+0x1e6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_2;
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000800:	221f      	movs	r2, #31
 8000802:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a24      	ldr	r2, [pc, #144]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800080c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800080e:	20fa      	movs	r0, #250	; 0xfa
 8000810:	f001 f8bc 	bl	800198c <setTimer3>
			}
			break;
 8000814:	e037      	b.n	8000886 <fsm_mode_led7seg+0x1e6>
		case MODE_MODIFY_led7seg_2:
			if (timer3_flag == 1){
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d135      	bne.n	800088a <fsm_mode_led7seg+0x1ea>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_3;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000820:	2220      	movs	r2, #32
 8000822:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800082c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800082e:	20fa      	movs	r0, #250	; 0xfa
 8000830:	f001 f8ac 	bl	800198c <setTimer3>
			}
			break;
 8000834:	e029      	b.n	800088a <fsm_mode_led7seg+0x1ea>
		case MODE_MODIFY_led7seg_3:
			if (timer3_flag == 1){
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d127      	bne.n	800088e <fsm_mode_led7seg+0x1ee>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_4;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000840:	2221      	movs	r2, #33	; 0x21
 8000842:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 800084a:	20fa      	movs	r0, #250	; 0xfa
 800084c:	f001 f89e 	bl	800198c <setTimer3>
			}
			break;
 8000850:	e01d      	b.n	800088e <fsm_mode_led7seg+0x1ee>
		case MODE_MODIFY_led7seg_4:
			if (timer3_flag == 1){
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d11b      	bne.n	8000892 <fsm_mode_led7seg+0x1f2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_1;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 800085c:	221e      	movs	r2, #30
 800085e:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a0d      	ldr	r2, [pc, #52]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000868:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800086a:	20fa      	movs	r0, #250	; 0xfa
 800086c:	f001 f88e 	bl	800198c <setTimer3>
			}
			break;
 8000870:	e00f      	b.n	8000892 <fsm_mode_led7seg+0x1f2>
		default:
			break;
 8000872:	bf00      	nop
 8000874:	e00e      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 8000876:	bf00      	nop
 8000878:	e00c      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 800087a:	bf00      	nop
 800087c:	e00a      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 800087e:	bf00      	nop
 8000880:	e008      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 8000882:	bf00      	nop
 8000884:	e006      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 8000886:	bf00      	nop
 8000888:	e004      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 800088a:	bf00      	nop
 800088c:	e002      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 800088e:	bf00      	nop
 8000890:	e000      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 8000892:	bf00      	nop
	}
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000c4 	.word	0x200000c4
 800089c:	200000cc 	.word	0x200000cc
 80008a0:	20000544 	.word	0x20000544
 80008a4:	20000018 	.word	0x20000018
 80008a8:	2000001c 	.word	0x2000001c

080008ac <timeTimer>:
int timeyellow = 2;

int led12 = 5;
int led34 = 3;

int timeTimer(int time){
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	return time * 1000;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 80008d0:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <isButtonflag+0x30>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d106      	bne.n	80008ea <isButtonflag+0x22>
		flagForButton[index] = 0;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <isButtonflag+0x30>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
		return 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <isButtonflag+0x24>
	}
	return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	200000e8 	.word	0x200000e8

080008fc <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d901      	bls.n	8000910 <is_button_pressed+0x14>
 800090c:	2300      	movs	r3, #0
 800090e:	e007      	b.n	8000920 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4a06      	ldr	r2, [pc, #24]	; (800092c <is_button_pressed+0x30>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf0c      	ite	eq
 800091a:	2301      	moveq	r3, #1
 800091c:	2300      	movne	r3, #0
 800091e:	b2db      	uxtb	r3, r3
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	200000d4 	.word	0x200000d4

08000930 <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b03      	cmp	r3, #3
 800093e:	d901      	bls.n	8000944 <is_button_pressed_3s+0x14>
 8000940:	23ff      	movs	r3, #255	; 0xff
 8000942:	e007      	b.n	8000954 <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	4a06      	ldr	r2, [pc, #24]	; (8000960 <is_button_pressed_3s+0x30>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	2b01      	cmp	r3, #1
 800094c:	bf0c      	ite	eq
 800094e:	2301      	moveq	r3, #1
 8000950:	2300      	movne	r3, #0
 8000952:	b2db      	uxtb	r3, r3
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	200000e4 	.word	0x200000e4

08000964 <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
int counter10S = 0;
void fsm_for_input_processing(uint8_t index ){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4a63      	ldr	r2, [pc, #396]	; (8000b00 <fsm_for_input_processing+0x19c>)
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	2b02      	cmp	r3, #2
 8000976:	f000 8089 	beq.w	8000a8c <fsm_for_input_processing+0x128>
 800097a:	2b02      	cmp	r3, #2
 800097c:	f300 80bb 	bgt.w	8000af6 <fsm_for_input_processing+0x192>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <fsm_for_input_processing+0x26>
 8000984:	2b01      	cmp	r3, #1
 8000986:	d037      	beq.n	80009f8 <fsm_for_input_processing+0x94>
					}
				}

			break ;
	}
}
 8000988:	e0b5      	b.n	8000af6 <fsm_for_input_processing+0x192>
			if( is_button_pressed(index)){
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffb5 	bl	80008fc <is_button_pressed>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d011      	beq.n	80009bc <fsm_for_input_processing+0x58>
				buttonState[index] = BUTTON_PRESSED ;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4a59      	ldr	r2, [pc, #356]	; (8000b00 <fsm_for_input_processing+0x19c>)
 800099c:	2101      	movs	r1, #1
 800099e:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4a58      	ldr	r2, [pc, #352]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4a56      	ldr	r2, [pc, #344]	; (8000b08 <fsm_for_input_processing+0x1a4>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a55      	ldr	r2, [pc, #340]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 80009b6:	2101      	movs	r1, #1
 80009b8:	54d1      	strb	r1, [r2, r3]
			break ;
 80009ba:	e099      	b.n	8000af0 <fsm_for_input_processing+0x18c>
				if(timer4_flag==1 && status_mode != MODE1){
 80009bc:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <fsm_for_input_processing+0x1ac>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	f040 8095 	bne.w	8000af0 <fsm_for_input_processing+0x18c>
 80009c6:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <fsm_for_input_processing+0x1b0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	f000 8090 	beq.w	8000af0 <fsm_for_input_processing+0x18c>
					counter10S++;
 80009d0:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a50      	ldr	r2, [pc, #320]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009d8:	6013      	str	r3, [r2, #0]
					if(counter10S >= 10){
 80009da:	4b4f      	ldr	r3, [pc, #316]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b09      	cmp	r3, #9
 80009e0:	dd05      	ble.n	80009ee <fsm_for_input_processing+0x8a>
						counter10S = 0;
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
						status_mode = INIT;
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <fsm_for_input_processing+0x1b0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
					setTimer4(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f2:	f000 ffe5 	bl	80019c0 <setTimer4>
			break ;
 80009f6:	e07b      	b.n	8000af0 <fsm_for_input_processing+0x18c>
			counter10S = 0;
 80009f8:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
			if (!is_button_pressed(index)){
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff7b 	bl	80008fc <is_button_pressed>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10d      	bne.n	8000a28 <fsm_for_input_processing+0xc4>
				buttonState[index] =	 BUTTON_RELEASED ;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4a3c      	ldr	r2, [pc, #240]	; (8000b00 <fsm_for_input_processing+0x19c>)
 8000a10:	2100      	movs	r1, #0
 8000a12:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4a3d      	ldr	r2, [pc, #244]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4a39      	ldr	r2, [pc, #228]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000a26:	e065      	b.n	8000af4 <fsm_for_input_processing+0x190>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4a36      	ldr	r2, [pc, #216]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a30:	2b63      	cmp	r3, #99	; 0x63
 8000a32:	d809      	bhi.n	8000a48 <fsm_for_input_processing+0xe4>
						counterForButtonPress1s[index]++;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a3c:	3201      	adds	r2, #1
 8000a3e:	b291      	uxth	r1, r2
 8000a40:	4a30      	ldr	r2, [pc, #192]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a46:	e011      	b.n	8000a6c <fsm_for_input_processing+0x108>
					flagForButtonPress1s[index] = 1;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <fsm_for_input_processing+0x1a4>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4a30      	ldr	r2, [pc, #192]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff5e 	bl	8000930 <is_button_pressed_3s>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d03c      	beq.n	8000af4 <fsm_for_input_processing+0x190>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <fsm_for_input_processing+0x19c>)
 8000a7e:	2102      	movs	r1, #2
 8000a80:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <fsm_for_input_processing+0x1a4>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	54d1      	strb	r1, [r2, r3]
			break ;
 8000a8a:	e033      	b.n	8000af4 <fsm_for_input_processing+0x190>
			counter10S = 0;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
			if (! is_button_pressed(index)){
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff31 	bl	80008fc <is_button_pressed>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10d      	bne.n	8000abc <fsm_for_input_processing+0x158>
				buttonState[index] = BUTTON_RELEASED;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <fsm_for_input_processing+0x19c>)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 8000aac:	2100      	movs	r1, #0
 8000aae:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000aba:	e01c      	b.n	8000af6 <fsm_for_input_processing+0x192>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac4:	2b13      	cmp	r3, #19
 8000ac6:	d809      	bhi.n	8000adc <fsm_for_input_processing+0x178>
							counterForButtonAfterPress1s[index]++;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000acc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ad0:	3201      	adds	r2, #1
 8000ad2:	b291      	uxth	r1, r2
 8000ad4:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000ad6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000ada:	e00c      	b.n	8000af6 <fsm_for_input_processing+0x192>
						flagForButton[index] = 1;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000aee:	e002      	b.n	8000af6 <fsm_for_input_processing+0x192>
			break ;
 8000af0:	bf00      	nop
 8000af2:	e000      	b.n	8000af6 <fsm_for_input_processing+0x192>
			break ;
 8000af4:	bf00      	nop
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000fc 	.word	0x200000fc
 8000b04:	200000ec 	.word	0x200000ec
 8000b08:	200000e4 	.word	0x200000e4
 8000b0c:	200000e8 	.word	0x200000e8
 8000b10:	20000548 	.word	0x20000548
 8000b14:	200000b8 	.word	0x200000b8
 8000b18:	20000100 	.word	0x20000100
 8000b1c:	200000f4 	.word	0x200000f4

08000b20 <button_reading>:




void button_reading(void){
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000b26:	2300      	movs	r3, #0
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	e05f      	b.n	8000bec <button_reading+0xcc>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4932      	ldr	r1, [pc, #200]	; (8000bfc <button_reading+0xdc>)
 8000b32:	5c89      	ldrb	r1, [r1, r2]
 8000b34:	4a32      	ldr	r2, [pc, #200]	; (8000c00 <button_reading+0xe0>)
 8000b36:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	4931      	ldr	r1, [pc, #196]	; (8000c04 <button_reading+0xe4>)
 8000b3e:	5c89      	ldrb	r1, [r1, r2]
 8000b40:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <button_reading+0xdc>)
 8000b42:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d832      	bhi.n	8000bb0 <button_reading+0x90>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <button_reading+0x30>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b61 	.word	0x08000b61
 8000b54:	08000b75 	.word	0x08000b75
 8000b58:	08000b89 	.word	0x08000b89
 8000b5c:	08000b9d 	.word	0x08000b9d
		  case 0: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000b60:	79fc      	ldrb	r4, [r7, #7]
 8000b62:	2102      	movs	r1, #2
 8000b64:	4828      	ldr	r0, [pc, #160]	; (8000c08 <button_reading+0xe8>)
 8000b66:	f001 fd5d 	bl	8002624 <HAL_GPIO_ReadPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <button_reading+0xe4>)
 8000b70:	551a      	strb	r2, [r3, r4]
			  break;
 8000b72:	e01e      	b.n	8000bb2 <button_reading+0x92>
		  case 1: // read data from Button 2
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000b74:	79fc      	ldrb	r4, [r7, #7]
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4824      	ldr	r0, [pc, #144]	; (8000c0c <button_reading+0xec>)
 8000b7a:	f001 fd53 	bl	8002624 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <button_reading+0xe4>)
 8000b84:	551a      	strb	r2, [r3, r4]
			  break;
 8000b86:	e014      	b.n	8000bb2 <button_reading+0x92>
		  case 2: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000b88:	79fc      	ldrb	r4, [r7, #7]
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <button_reading+0xec>)
 8000b8e:	f001 fd49 	bl	8002624 <HAL_GPIO_ReadPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <button_reading+0xe4>)
 8000b98:	551a      	strb	r2, [r3, r4]
			  break;
 8000b9a:	e00a      	b.n	8000bb2 <button_reading+0x92>
		  case 3: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_P_GPIO_Port, BUTTON_P_Pin);
 8000b9c:	79fc      	ldrb	r4, [r7, #7]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4819      	ldr	r0, [pc, #100]	; (8000c08 <button_reading+0xe8>)
 8000ba2:	f001 fd3f 	bl	8002624 <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <button_reading+0xe4>)
 8000bac:	551a      	strb	r2, [r3, r4]
			  break;
 8000bae:	e000      	b.n	8000bb2 <button_reading+0x92>
		  default:
			  break;
 8000bb0:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <button_reading+0xe4>)
 8000bb6:	5cd2      	ldrb	r2, [r2, r3]
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4910      	ldr	r1, [pc, #64]	; (8000bfc <button_reading+0xdc>)
 8000bbc:	5ccb      	ldrb	r3, [r1, r3]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d111      	bne.n	8000be6 <button_reading+0xc6>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <button_reading+0xdc>)
 8000bc6:	5cd2      	ldrb	r2, [r2, r3]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <button_reading+0xe0>)
 8000bcc:	5ccb      	ldrb	r3, [r1, r3]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d109      	bne.n	8000be6 <button_reading+0xc6>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000bd2:	79fa      	ldrb	r2, [r7, #7]
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	490a      	ldr	r1, [pc, #40]	; (8000c00 <button_reading+0xe0>)
 8000bd8:	5c89      	ldrb	r1, [r1, r2]
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <button_reading+0xf0>)
 8000bdc:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff febf 	bl	8000964 <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3301      	adds	r3, #1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d99c      	bls.n	8000b2c <button_reading+0xc>
		  }

	}
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	200000dc 	.word	0x200000dc
 8000c00:	200000e0 	.word	0x200000e0
 8000c04:	200000d8 	.word	0x200000d8
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	200000d4 	.word	0x200000d4

08000c14 <BlinkyRedVer>:
//	led_buffer[1] = led1_2 % 10;
//	led_buffer[2] = led3_4 / 10;
//	led_buffer[3] = led3_4 % 10;
//}

void BlinkyRedVer(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);

//	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
	//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <BlinkyRedVer+0x20>)
 8000c20:	f001 fd17 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8000c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <BlinkyRedVer+0x20>)
 8000c2a:	f001 fd2a 	bl	8002682 <HAL_GPIO_TogglePin>

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40011000 	.word	0x40011000

08000c38 <BlinkyGreenVer>:
void BlinkyGreenVer(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8000c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <BlinkyGreenVer+0x20>)
 8000c42:	f001 fd1e 	bl	8002682 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <BlinkyGreenVer+0x20>)
 8000c4e:	f001 fd00 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40011000 	.word	0x40011000

08000c5c <BlinkyYellowVer>:
void BlinkyYellowVer(){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <BlinkyYellowVer+0x1c>)
 8000c66:	f001 fd0c 	bl	8002682 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8000c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6e:	4802      	ldr	r0, [pc, #8]	; (8000c78 <BlinkyYellowVer+0x1c>)
 8000c70:	f001 fd07 	bl	8002682 <HAL_GPIO_TogglePin>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40011000 	.word	0x40011000

08000c7c <BlinkyRedHor>:

void BlinkyRedHor(){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_TogglePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2110      	movs	r1, #16
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <BlinkyRedHor+0x1c>)
 8000c86:	f001 fce4 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <BlinkyRedHor+0x20>)
 8000c8e:	f001 fcf8 	bl	8002682 <HAL_GPIO_TogglePin>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	40010c00 	.word	0x40010c00

08000ca0 <BlinkyGreenHor>:
void BlinkyGreenHor(){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <BlinkyGreenHor+0x1c>)
 8000ca8:	f001 fceb 	bl	8002682 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <BlinkyGreenHor+0x20>)
 8000cb2:	f001 fcce 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <BlinkyYellowHor>:
void BlinkyYellowHor(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000cc8:	2110      	movs	r1, #16
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <BlinkyYellowHor+0x18>)
 8000ccc:	f001 fcd9 	bl	8002682 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <BlinkyYellowHor+0x1c>)
 8000cd4:	f001 fcd5 	bl	8002682 <HAL_GPIO_TogglePin>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <SetOffVerHor>:
//	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
//	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
//	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
//}

void SetOffVerHor(){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cee:	480a      	ldr	r0, [pc, #40]	; (8000d18 <SetOffVerHor+0x34>)
 8000cf0:	f001 fcaf 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <SetOffVerHor+0x34>)
 8000cfc:	f001 fca9 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2110      	movs	r1, #16
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <SetOffVerHor+0x38>)
 8000d06:	f001 fca4 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <SetOffVerHor+0x3c>)
 8000d10:	f001 fc9f 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00

08000d24 <SetOffVer>:


void SetOffVer(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <SetOffVer+0x20>)
 8000d30:	f001 fc8f 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3a:	4802      	ldr	r0, [pc, #8]	; (8000d44 <SetOffVer+0x20>)
 8000d3c:	f001 fc89 	bl	8002652 <HAL_GPIO_WritePin>

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40011000 	.word	0x40011000

08000d48 <SetPedesRed>:

void SetPedesRed(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <SetPedesRed+0x20>)
 8000d54:	f001 fc7d 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5e:	4802      	ldr	r0, [pc, #8]	; (8000d68 <SetPedesRed+0x20>)
 8000d60:	f001 fc77 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010c00 	.word	0x40010c00

08000d6c <SetPedesGreen>:
void SetPedesGreen(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <SetPedesGreen+0x20>)
 8000d78:	f001 fc6b 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d82:	4802      	ldr	r0, [pc, #8]	; (8000d8c <SetPedesGreen+0x20>)
 8000d84:	f001 fc65 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <SetPedesOff>:

void SetPedesOff(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <SetPedesOff+0x20>)
 8000d9c:	f001 fc59 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <SetPedesOff+0x20>)
 8000da8:	f001 fc53 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40010c00 	.word	0x40010c00

08000db4 <SetRedVer>:

void SetRedVer(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <SetRedVer+0x20>)
 8000dc0:	f001 fc47 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dca:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <SetRedVer+0x20>)
 8000dcc:	f001 fc41 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40011000 	.word	0x40011000

08000dd8 <SetGreenVer>:

void SetGreenVer(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <SetGreenVer+0x20>)
 8000de4:	f001 fc35 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	4802      	ldr	r0, [pc, #8]	; (8000df8 <SetGreenVer+0x20>)
 8000df0:	f001 fc2f 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40011000 	.word	0x40011000

08000dfc <SetYellowVer>:

void SetYellowVer(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <SetYellowVer+0x20>)
 8000e08:	f001 fc23 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e12:	4802      	ldr	r0, [pc, #8]	; (8000e1c <SetYellowVer+0x20>)
 8000e14:	f001 fc1d 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40011000 	.word	0x40011000

08000e20 <SetOffHor>:


void SetOffHor(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <SetOffHor+0x1c>)
 8000e2a:	f001 fc12 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <SetOffHor+0x20>)
 8000e34:	f001 fc0d 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <SetRedHor>:

void SetRedHor(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <SetRedHor+0x1c>)
 8000e4e:	f001 fc00 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <SetRedHor+0x20>)
 8000e58:	f001 fbfb 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40010c00 	.word	0x40010c00

08000e68 <SetGreenHor>:

void SetGreenHor(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <SetGreenHor+0x1c>)
 8000e72:	f001 fbee 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4803      	ldr	r0, [pc, #12]	; (8000e88 <SetGreenHor+0x20>)
 8000e7c:	f001 fbe9 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <SetYellowHor>:

void SetYellowHor(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2110      	movs	r1, #16
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <SetYellowHor+0x1c>)
 8000e96:	f001 fbdc 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <SetYellowHor+0x20>)
 8000ea0:	f001 fbd7 	bl	8002652 <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <Buzzer_On>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char str[50];
int increase = 30;
//int delay = 380;
void Buzzer_On(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
		if (timer6_flag == 1){
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <Buzzer_On+0x70>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d12e      	bne.n	8000f1a <Buzzer_On+0x6a>
			dutycycle += 1000 / ((timered)*5);
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <Buzzer_On+0x74>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eca:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <Buzzer_On+0x78>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <Buzzer_On+0x78>)
 8000ed6:	6013      	str	r3, [r2, #0]
			if (dutycycle > 1000) dutycycle = 1000;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <Buzzer_On+0x78>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ee0:	dd03      	ble.n	8000eea <Buzzer_On+0x3a>
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <Buzzer_On+0x78>)
 8000ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <Buzzer_On+0x78>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <Buzzer_On+0x7c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
//			HAL_Delay(delay);
			setTimer6(delay);
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <Buzzer_On+0x80>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fd95 	bl	8001a28 <setTimer6>
			delay -= increase;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <Buzzer_On+0x80>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <Buzzer_On+0x84>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <Buzzer_On+0x80>)
 8000f0a:	6013      	str	r3, [r2, #0]
			if (delay <= 0) delay = 10;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <Buzzer_On+0x80>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dc02      	bgt.n	8000f1a <Buzzer_On+0x6a>
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <Buzzer_On+0x80>)
 8000f16:	220a      	movs	r2, #10
 8000f18:	601a      	str	r2, [r3, #0]
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000550 	.word	0x20000550
 8000f24:	2000000c 	.word	0x2000000c
 8000f28:	2000020c 	.word	0x2000020c
 8000f2c:	2000014c 	.word	0x2000014c
 8000f30:	20000024 	.word	0x20000024
 8000f34:	20000020 	.word	0x20000020

08000f38 <Buzzer_Off>:
void Buzzer_Off(){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	dutycycle = 0;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <Buzzer_Off+0x1c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <Buzzer_Off+0x1c>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <Buzzer_Off+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	2000020c 	.word	0x2000020c
 8000f58:	2000014c 	.word	0x2000014c

08000f5c <Uart_transmit>:
void Uart_transmit(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d#","!7SEG:",led12), 1000);
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <Uart_transmit+0x28>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <Uart_transmit+0x2c>)
 8000f66:	4909      	ldr	r1, [pc, #36]	; (8000f8c <Uart_transmit+0x30>)
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <Uart_transmit+0x34>)
 8000f6a:	f003 fc25 	bl	80047b8 <siprintf>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	4906      	ldr	r1, [pc, #24]	; (8000f90 <Uart_transmit+0x34>)
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <Uart_transmit+0x38>)
 8000f7a:	f002 ff60 	bl	8003e3e <HAL_UART_Transmit>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000018 	.word	0x20000018
 8000f88:	080050c4 	.word	0x080050c4
 8000f8c:	080050cc 	.word	0x080050cc
 8000f90:	200001d8 	.word	0x200001d8
 8000f94:	20000194 	.word	0x20000194

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f000 ff9e 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f86e 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 f99a 	bl	80012dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fa8:	f000 f8ac 	bl	8001104 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fac:	f000 f8f6 	bl	800119c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000fb0:	f000 f96a 	bl	8001288 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fb4:	4827      	ldr	r0, [pc, #156]	; (8001054 <main+0xbc>)
 8000fb6:	f001 ffe7 	bl	8002f88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4826      	ldr	r0, [pc, #152]	; (8001058 <main+0xc0>)
 8000fbe:	f002 f88d 	bl	80030dc <HAL_TIM_PWM_Start>

  status_mode = INIT;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <main+0xc4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]

  setTimer1(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fcc:	f000 fcaa 	bl	8001924 <setTimer1>
  setTimer2(1000);
 8000fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd4:	f000 fcc0 	bl	8001958 <setTimer2>
  setTimer3(1000);
 8000fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fdc:	f000 fcd6 	bl	800198c <setTimer3>
  setTimer4(1000);
 8000fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe4:	f000 fcec 	bl	80019c0 <setTimer4>
  setTimer5(1000);
 8000fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fec:	f000 fd02 	bl	80019f4 <setTimer5>
  setTimer6(1000);
 8000ff0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff4:	f000 fd18 	bl	8001a28 <setTimer6>

  SCH_Init();
 8000ff8:	f000 fac6 	bl	8001588 <SCH_Init>
  SCH_Add_Task(timerRun, 0, 10);
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	2100      	movs	r1, #0
 8001000:	4817      	ldr	r0, [pc, #92]	; (8001060 <main+0xc8>)
 8001002:	f000 facd 	bl	80015a0 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 10);
 8001006:	220a      	movs	r2, #10
 8001008:	2100      	movs	r1, #0
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <main+0xcc>)
 800100c:	f000 fac8 	bl	80015a0 <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_run, 0 , 10);
 8001010:	220a      	movs	r2, #10
 8001012:	2100      	movs	r1, #0
 8001014:	4814      	ldr	r0, [pc, #80]	; (8001068 <main+0xd0>)
 8001016:	f000 fac3 	bl	80015a0 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_1_run, 0 , 10);
 800101a:	220a      	movs	r2, #10
 800101c:	2100      	movs	r1, #0
 800101e:	4813      	ldr	r0, [pc, #76]	; (800106c <main+0xd4>)
 8001020:	f000 fabe 	bl	80015a0 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_2_run, 0 , 10);
 8001024:	220a      	movs	r2, #10
 8001026:	2100      	movs	r1, #0
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <main+0xd8>)
 800102a:	f000 fab9 	bl	80015a0 <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_led7seg, 0, 10);
 800102e:	220a      	movs	r2, #10
 8001030:	2100      	movs	r1, #0
 8001032:	4810      	ldr	r0, [pc, #64]	; (8001074 <main+0xdc>)
 8001034:	f000 fab4 	bl	80015a0 <SCH_Add_Task>
  SCH_Add_Task(pedestrian_cramble, 0, 10);
 8001038:	220a      	movs	r2, #10
 800103a:	2100      	movs	r1, #0
 800103c:	480e      	ldr	r0, [pc, #56]	; (8001078 <main+0xe0>)
 800103e:	f000 faaf 	bl	80015a0 <SCH_Add_Task>
  SCH_Add_Task(Uart_transmit, 0, 10);
 8001042:	220a      	movs	r2, #10
 8001044:	2100      	movs	r1, #0
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <main+0xe4>)
 8001048:	f000 faaa 	bl	80015a0 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800104c:	f000 fb68 	bl	8001720 <SCH_Dispatch_Tasks>
 8001050:	e7fc      	b.n	800104c <main+0xb4>
 8001052:	bf00      	nop
 8001054:	20000104 	.word	0x20000104
 8001058:	2000014c 	.word	0x2000014c
 800105c:	200000b8 	.word	0x200000b8
 8001060:	08001a5d 	.word	0x08001a5d
 8001064:	08000b21 	.word	0x08000b21
 8001068:	0800043d 	.word	0x0800043d
 800106c:	0800014d 	.word	0x0800014d
 8001070:	080002c5 	.word	0x080002c5
 8001074:	080006a1 	.word	0x080006a1
 8001078:	08001441 	.word	0x08001441
 800107c:	08000f5d 	.word	0x08000f5d

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	; 0x40
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2228      	movs	r2, #40	; 0x28
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fb8a 	bl	80047a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a6:	2301      	movs	r3, #1
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010aa:	2310      	movs	r3, #16
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	2302      	movs	r3, #2
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010b6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 faf7 	bl	80026b4 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010cc:	f000 f9b2 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2102      	movs	r1, #2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fd64 	bl	8002bb8 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010f6:	f000 f99d 	bl	8001434 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3740      	adds	r7, #64	; 0x40
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM2_Init+0x94>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM2_Init+0x94>)
 800112a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800112e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_TIM2_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM2_Init+0x94>)
 8001138:	2209      	movs	r2, #9
 800113a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM2_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM2_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM2_Init+0x94>)
 800114a:	f001 fecd 	bl	8002ee8 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001154:	f000 f96e 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM2_Init+0x94>)
 8001166:	f002 fa21 	bl	80035ac <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f960 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM2_Init+0x94>)
 8001182:	f002 fd9f 	bl	8003cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f952 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000104 	.word	0x20000104

0800119c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011ce:	4a2d      	ldr	r2, [pc, #180]	; (8001284 <MX_TIM3_Init+0xe8>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011d4:	223f      	movs	r2, #63	; 0x3f
 80011d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f2:	4823      	ldr	r0, [pc, #140]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011f4:	f001 fe78 	bl	8002ee8 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011fe:	f000 f919 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120c:	4619      	mov	r1, r3
 800120e:	481c      	ldr	r0, [pc, #112]	; (8001280 <MX_TIM3_Init+0xe4>)
 8001210:	f002 f9cc 	bl	80035ac <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800121a:	f000 f90b 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <MX_TIM3_Init+0xe4>)
 8001220:	f001 ff04 	bl	800302c <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800122a:	f000 f903 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	4619      	mov	r1, r3
 800123c:	4810      	ldr	r0, [pc, #64]	; (8001280 <MX_TIM3_Init+0xe4>)
 800123e:	f002 fd41 	bl	8003cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001248:	f000 f8f4 	bl	8001434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_TIM3_Init+0xe4>)
 8001264:	f002 f8e4 	bl	8003430 <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800126e:	f000 f8e1 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <MX_TIM3_Init+0xe4>)
 8001274:	f000 fcf6 	bl	8001c64 <HAL_TIM_MspPostInit>

}
 8001278:	bf00      	nop
 800127a:	3738      	adds	r7, #56	; 0x38
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000014c 	.word	0x2000014c
 8001284:	40000400 	.word	0x40000400

08001288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <MX_USART2_UART_Init+0x50>)
 8001290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 8001294:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f002 fd70 	bl	8003da4 <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ca:	f000 f8b3 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000194 	.word	0x20000194
 80012d8:	40004400 	.word	0x40004400

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <MX_GPIO_Init+0x148>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <MX_GPIO_Init+0x148>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b49      	ldr	r3, [pc, #292]	; (8001424 <MX_GPIO_Init+0x148>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	4b46      	ldr	r3, [pc, #280]	; (8001424 <MX_GPIO_Init+0x148>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a45      	ldr	r2, [pc, #276]	; (8001424 <MX_GPIO_Init+0x148>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <MX_GPIO_Init+0x148>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001320:	4b40      	ldr	r3, [pc, #256]	; (8001424 <MX_GPIO_Init+0x148>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a3f      	ldr	r2, [pc, #252]	; (8001424 <MX_GPIO_Init+0x148>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <MX_GPIO_Init+0x148>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2110      	movs	r1, #16
 800133c:	483a      	ldr	r0, [pc, #232]	; (8001428 <MX_GPIO_Init+0x14c>)
 800133e:	f001 f988 	bl	8002652 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f240 3101 	movw	r1, #769	; 0x301
 8001348:	4838      	ldr	r0, [pc, #224]	; (800142c <MX_GPIO_Init+0x150>)
 800134a:	f001 f982 	bl	8002652 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLK_Pin|DATA_Pin|LIGHT1_B_Pin|LIGHT1_A_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001354:	4836      	ldr	r0, [pc, #216]	; (8001430 <MX_GPIO_Init+0x154>)
 8001356:	f001 f97c 	bl	8002652 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_P_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_P_Pin|BUTTON_1_Pin;
 800135a:	2303      	movs	r3, #3
 800135c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	482e      	ldr	r0, [pc, #184]	; (8001428 <MX_GPIO_Init+0x14c>)
 800136e:	f000 ffd5 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : LIGHT2_A_Pin */
  GPIO_InitStruct.Pin = LIGHT2_A_Pin;
 8001372:	2310      	movs	r3, #16
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIGHT2_A_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	4827      	ldr	r0, [pc, #156]	; (8001428 <MX_GPIO_Init+0x14c>)
 800138a:	f000 ffc7 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT2_B_Pin P_LIGHT_A_Pin P_LIGHT_B_Pin */
  GPIO_InitStruct.Pin = LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin;
 800138e:	f240 3301 	movw	r3, #769	; 0x301
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2302      	movs	r3, #2
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4821      	ldr	r0, [pc, #132]	; (800142c <MX_GPIO_Init+0x150>)
 80013a8:	f000 ffb8 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	481a      	ldr	r0, [pc, #104]	; (800142c <MX_GPIO_Init+0x150>)
 80013c2:	f000 ffab 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin;
 80013c6:	23c0      	movs	r3, #192	; 0xc0
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	4815      	ldr	r0, [pc, #84]	; (8001430 <MX_GPIO_Init+0x154>)
 80013da:	f000 ff9f 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 80013de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	480e      	ldr	r0, [pc, #56]	; (8001430 <MX_GPIO_Init+0x154>)
 80013f8:	f000 ff90 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT1_B_Pin LIGHT1_A_Pin */
  GPIO_InitStruct.Pin = LIGHT1_B_Pin|LIGHT1_A_Pin;
 80013fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2302      	movs	r3, #2
 800140c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4619      	mov	r1, r3
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_GPIO_Init+0x154>)
 8001416:	f000 ff81 	bl	800231c <HAL_GPIO_Init>

}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800
 800142c:	40010c00 	.word	0x40010c00
 8001430:	40011000 	.word	0x40011000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <pedestrian_cramble>:
//int counter_Pedes_On = 0;
//
int dutycycle = 0;
int delay = 380;
int count = 0;
void pedestrian_cramble(){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	switch (status_pedes){
 8001444:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <pedestrian_cramble+0x130>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b29      	cmp	r3, #41	; 0x29
 800144a:	d041      	beq.n	80014d0 <pedestrian_cramble+0x90>
 800144c:	2b29      	cmp	r3, #41	; 0x29
 800144e:	f300 8086 	bgt.w	800155e <pedestrian_cramble+0x11e>
 8001452:	2b20      	cmp	r3, #32
 8001454:	d05d      	beq.n	8001512 <pedestrian_cramble+0xd2>
 8001456:	2b28      	cmp	r3, #40	; 0x28
 8001458:	f040 8081 	bne.w	800155e <pedestrian_cramble+0x11e>
	case Pedes_Off:
		SetPedesOff();
 800145c:	f7ff fc98 	bl	8000d90 <SetPedesOff>
		Buzzer_Off();
 8001460:	f7ff fd6a 	bl	8000f38 <Buzzer_Off>
		if (isButtonflag(butp) == 1){
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <pedestrian_cramble+0x134>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fa2d 	bl	80008c8 <isButtonflag>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d176      	bne.n	8001562 <pedestrian_cramble+0x122>
			count = 0;
 8001474:	4b40      	ldr	r3, [pc, #256]	; (8001578 <pedestrian_cramble+0x138>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
			if (status_ver == AUTO_RED){
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <pedestrian_cramble+0x13c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b08      	cmp	r3, #8
 8001480:	d113      	bne.n	80014aa <pedestrian_cramble+0x6a>
				status_pedes = Pedes_Go;
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <pedestrian_cramble+0x130>)
 8001484:	2229      	movs	r2, #41	; 0x29
 8001486:	601a      	str	r2, [r3, #0]
				dutycycle = 0;
 8001488:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <pedestrian_cramble+0x140>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
				delay = 380;
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <pedestrian_cramble+0x144>)
 8001490:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001494:	601a      	str	r2, [r3, #0]
				clearTimer6();
 8001496:	f000 fa35 	bl	8001904 <clearTimer6>
				Buzzer_On();
 800149a:	f7ff fd09 	bl	8000eb0 <Buzzer_On>
				count++;
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <pedestrian_cramble+0x138>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a34      	ldr	r2, [pc, #208]	; (8001578 <pedestrian_cramble+0x138>)
 80014a6:	6013      	str	r3, [r2, #0]
				status_pedes = Pedes_Stop;
				Buzzer_Off();
				count++;
			}
		}
		break;
 80014a8:	e05b      	b.n	8001562 <pedestrian_cramble+0x122>
			}else if(status_ver == AUTO_GREEN || status_ver == AUTO_YELLOW){
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <pedestrian_cramble+0x13c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b09      	cmp	r3, #9
 80014b0:	d003      	beq.n	80014ba <pedestrian_cramble+0x7a>
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <pedestrian_cramble+0x13c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b0a      	cmp	r3, #10
 80014b8:	d153      	bne.n	8001562 <pedestrian_cramble+0x122>
				status_pedes = Pedes_Stop;
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <pedestrian_cramble+0x130>)
 80014bc:	2220      	movs	r2, #32
 80014be:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 80014c0:	f7ff fd3a 	bl	8000f38 <Buzzer_Off>
				count++;
 80014c4:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <pedestrian_cramble+0x138>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a2b      	ldr	r2, [pc, #172]	; (8001578 <pedestrian_cramble+0x138>)
 80014cc:	6013      	str	r3, [r2, #0]
		break;
 80014ce:	e048      	b.n	8001562 <pedestrian_cramble+0x122>
	case Pedes_Go:
		SetPedesGreen();
 80014d0:	f7ff fc4c 	bl	8000d6c <SetPedesGreen>
		Buzzer_On();
 80014d4:	f7ff fcec 	bl	8000eb0 <Buzzer_On>
		if (status_ver == AUTO_GREEN || status_ver == AUTO_YELLOW){
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <pedestrian_cramble+0x13c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d003      	beq.n	80014e8 <pedestrian_cramble+0xa8>
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <pedestrian_cramble+0x13c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b0a      	cmp	r3, #10
 80014e6:	d13e      	bne.n	8001566 <pedestrian_cramble+0x126>
			if (count >= Ncycle_Pe_off * 2) { // 2 cycle => Off
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <pedestrian_cramble+0x138>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	dd05      	ble.n	80014fc <pedestrian_cramble+0xbc>
				status_pedes = Pedes_Off;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <pedestrian_cramble+0x130>)
 80014f2:	2228      	movs	r2, #40	; 0x28
 80014f4:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 80014f6:	f7ff fd1f 	bl	8000f38 <Buzzer_Off>
				status_pedes = Pedes_Stop;
				Buzzer_Off();
				count++;
			}
		}
		break;
 80014fa:	e034      	b.n	8001566 <pedestrian_cramble+0x126>
				status_pedes = Pedes_Stop;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <pedestrian_cramble+0x130>)
 80014fe:	2220      	movs	r2, #32
 8001500:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 8001502:	f7ff fd19 	bl	8000f38 <Buzzer_Off>
				count++;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <pedestrian_cramble+0x138>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a1a      	ldr	r2, [pc, #104]	; (8001578 <pedestrian_cramble+0x138>)
 800150e:	6013      	str	r3, [r2, #0]
		break;
 8001510:	e029      	b.n	8001566 <pedestrian_cramble+0x126>
	case Pedes_Stop:
		SetPedesRed();
 8001512:	f7ff fc19 	bl	8000d48 <SetPedesRed>
		Buzzer_Off();
 8001516:	f7ff fd0f 	bl	8000f38 <Buzzer_Off>
		if (status_ver == AUTO_RED){
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <pedestrian_cramble+0x13c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b08      	cmp	r3, #8
 8001520:	d123      	bne.n	800156a <pedestrian_cramble+0x12a>
			if (count >= Ncycle_Pe_off * 2) {//2 cycle => Off
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <pedestrian_cramble+0x138>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b03      	cmp	r3, #3
 8001528:	dd05      	ble.n	8001536 <pedestrian_cramble+0xf6>
				status_pedes = Pedes_Off;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <pedestrian_cramble+0x130>)
 800152c:	2228      	movs	r2, #40	; 0x28
 800152e:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 8001530:	f7ff fd02 	bl	8000f38 <Buzzer_Off>
				clearTimer6();
				Buzzer_On();
				count++;
			}
		}
		break;
 8001534:	e019      	b.n	800156a <pedestrian_cramble+0x12a>
				status_pedes = Pedes_Go;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <pedestrian_cramble+0x130>)
 8001538:	2229      	movs	r2, #41	; 0x29
 800153a:	601a      	str	r2, [r3, #0]
				dutycycle = 0;
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <pedestrian_cramble+0x140>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
				delay = 380;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <pedestrian_cramble+0x144>)
 8001544:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001548:	601a      	str	r2, [r3, #0]
				clearTimer6();
 800154a:	f000 f9db 	bl	8001904 <clearTimer6>
				Buzzer_On();
 800154e:	f7ff fcaf 	bl	8000eb0 <Buzzer_On>
				count++;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <pedestrian_cramble+0x138>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <pedestrian_cramble+0x138>)
 800155a:	6013      	str	r3, [r2, #0]
		break;
 800155c:	e005      	b.n	800156a <pedestrian_cramble+0x12a>
	default:
		break;
 800155e:	bf00      	nop
 8001560:	e004      	b.n	800156c <pedestrian_cramble+0x12c>
		break;
 8001562:	bf00      	nop
 8001564:	e002      	b.n	800156c <pedestrian_cramble+0x12c>
		break;
 8001566:	bf00      	nop
 8001568:	e000      	b.n	800156c <pedestrian_cramble+0x12c>
		break;
 800156a:	bf00      	nop
	}
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200000c8 	.word	0x200000c8
 8001574:	20000008 	.word	0x20000008
 8001578:	20000210 	.word	0x20000210
 800157c:	200000bc 	.word	0x200000bc
 8001580:	2000020c 	.word	0x2000020c
 8001584:	20000024 	.word	0x20000024

08001588 <SCH_Init>:
 */
#include "scheduler.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
	current_index_task = 0;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <SCH_Init+0x14>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000534 	.word	0x20000534

080015a0 <SCH_Add_Task>:

//int Tick = 10; // 10ms

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <SCH_Add_Task+0xb4>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b27      	cmp	r3, #39	; 0x27
 80015b2:	d84a      	bhi.n	800164a <SCH_Add_Task+0xaa>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <SCH_Add_Task+0xb4>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4a27      	ldr	r2, [pc, #156]	; (8001658 <SCH_Add_Task+0xb8>)
 80015bc:	460b      	mov	r3, r1
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TICK;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <SCH_Add_Task+0xb4>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4a22      	ldr	r2, [pc, #136]	; (800165c <SCH_Add_Task+0xbc>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	491f      	ldr	r1, [pc, #124]	; (8001658 <SCH_Add_Task+0xb8>)
 80015dc:	4603      	mov	r3, r0
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4403      	add	r3, r0
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3304      	adds	r3, #4
 80015e8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD/TICK;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <SCH_Add_Task+0xb4>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1a      	ldr	r2, [pc, #104]	; (800165c <SCH_Add_Task+0xbc>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	4917      	ldr	r1, [pc, #92]	; (8001658 <SCH_Add_Task+0xb8>)
 80015fc:	4603      	mov	r3, r0
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4403      	add	r3, r0
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3308      	adds	r3, #8
 8001608:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <SCH_Add_Task+0xb4>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <SCH_Add_Task+0xb8>)
 8001612:	460b      	mov	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	330c      	adds	r3, #12
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <SCH_Add_Task+0xb4>)
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <SCH_Add_Task+0xb4>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	4610      	mov	r0, r2
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <SCH_Add_Task+0xb8>)
 8001630:	460b      	mov	r3, r1
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	3310      	adds	r3, #16
 800163c:	6018      	str	r0, [r3, #0]


		current_index_task++;
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SCH_Add_Task+0xb4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <SCH_Add_Task+0xb4>)
 8001648:	701a      	strb	r2, [r3, #0]
	}
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000534 	.word	0x20000534
 8001658:	20000214 	.word	0x20000214
 800165c:	cccccccd 	.word	0xcccccccd

08001660 <SCH_Update>:

void SCH_Update(void){
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	e048      	b.n	80016fe <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0 ){
 800166c:	492a      	ldr	r1, [pc, #168]	; (8001718 <SCH_Update+0xb8>)
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3304      	adds	r3, #4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d013      	beq.n	80016aa <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8001682:	4925      	ldr	r1, [pc, #148]	; (8001718 <SCH_Update+0xb8>)
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	3304      	adds	r3, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	1e59      	subs	r1, r3, #1
 8001696:	4820      	ldr	r0, [pc, #128]	; (8001718 <SCH_Update+0xb8>)
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4403      	add	r3, r0
 80016a4:	3304      	adds	r3, #4
 80016a6:	6019      	str	r1, [r3, #0]
 80016a8:	e026      	b.n	80016f8 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay =SCH_tasks_G[i].Period;
 80016aa:	491b      	ldr	r1, [pc, #108]	; (8001718 <SCH_Update+0xb8>)
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3308      	adds	r3, #8
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	4816      	ldr	r0, [pc, #88]	; (8001718 <SCH_Update+0xb8>)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4403      	add	r3, r0
 80016ca:	3304      	adds	r3, #4
 80016cc:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 80016ce:	4912      	ldr	r1, [pc, #72]	; (8001718 <SCH_Update+0xb8>)
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	330c      	adds	r3, #12
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2d8      	uxtb	r0, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <SCH_Update+0xb8>)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	330c      	adds	r3, #12
 80016f4:	4602      	mov	r2, r0
 80016f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < current_index_task; i++){
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3301      	adds	r3, #1
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <SCH_Update+0xbc>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4293      	cmp	r3, r2
 8001708:	dbb0      	blt.n	800166c <SCH_Update+0xc>
		}
	}
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000214 	.word	0x20000214
 800171c:	20000534 	.word	0x20000534

08001720 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	e039      	b.n	80017a0 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[i].RunMe > 0 ){
 800172c:	4922      	ldr	r1, [pc, #136]	; (80017b8 <SCH_Dispatch_Tasks+0x98>)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d02b      	beq.n	800179a <SCH_Dispatch_Tasks+0x7a>
			SCH_tasks_G[i].RunMe--;
 8001742:	491d      	ldr	r1, [pc, #116]	; (80017b8 <SCH_Dispatch_Tasks+0x98>)
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	330c      	adds	r3, #12
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	b2d8      	uxtb	r0, r3
 8001758:	4917      	ldr	r1, [pc, #92]	; (80017b8 <SCH_Dispatch_Tasks+0x98>)
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	330c      	adds	r3, #12
 8001768:	4602      	mov	r2, r0
 800176a:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)(); // Run the task
 800176c:	4912      	ldr	r1, [pc, #72]	; (80017b8 <SCH_Dispatch_Tasks+0x98>)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4798      	blx	r3
			if (SCH_tasks_G[i].Period == 0 ){ // one shot task
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <SCH_Dispatch_Tasks+0x98>)
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3308      	adds	r3, #8
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(i);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f813 	bl	80017c0 <SCH_Delete_Task>
	for (int i = 0 ; i < current_index_task; i++){
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SCH_Dispatch_Tasks+0x9c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	dbbf      	blt.n	800172c <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000214 	.word	0x20000214
 80017bc:	20000534 	.word	0x20000534

080017c0 <SCH_Delete_Task>:


void SCH_Delete_Task(int index){
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if (index >= current_index_task ){ //
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <SCH_Delete_Task+0xdc>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4293      	cmp	r3, r2
 80017d2:	da5d      	bge.n	8001890 <SCH_Delete_Task+0xd0>

		return;
	}else {
		for (int i = index; i <current_index_task - 1; i++){
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e04d      	b.n	8001876 <SCH_Delete_Task+0xb6>
			SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	4930      	ldr	r1, [pc, #192]	; (80018a0 <SCH_Delete_Task+0xe0>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	482c      	ldr	r0, [pc, #176]	; (80018a0 <SCH_Delete_Task+0xe0>)
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4403      	add	r3, r0
 80017fa:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	4927      	ldr	r1, [pc, #156]	; (80018a0 <SCH_Delete_Task+0xe0>)
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	3308      	adds	r3, #8
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	4823      	ldr	r0, [pc, #140]	; (80018a0 <SCH_Delete_Task+0xe0>)
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4403      	add	r3, r0
 800181e:	3308      	adds	r3, #8
 8001820:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i+1].RunMe;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	491e      	ldr	r1, [pc, #120]	; (80018a0 <SCH_Delete_Task+0xe0>)
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	330c      	adds	r3, #12
 8001834:	7818      	ldrb	r0, [r3, #0]
 8001836:	491a      	ldr	r1, [pc, #104]	; (80018a0 <SCH_Delete_Task+0xe0>)
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	330c      	adds	r3, #12
 8001846:	4602      	mov	r2, r0
 8001848:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	4914      	ldr	r1, [pc, #80]	; (80018a0 <SCH_Delete_Task+0xe0>)
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	3304      	adds	r3, #4
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	4810      	ldr	r0, [pc, #64]	; (80018a0 <SCH_Delete_Task+0xe0>)
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4403      	add	r3, r0
 800186c:	3304      	adds	r3, #4
 800186e:	6019      	str	r1, [r3, #0]
		for (int i = index; i <current_index_task - 1; i++){
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3301      	adds	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <SCH_Delete_Task+0xdc>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3b01      	subs	r3, #1
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	429a      	cmp	r2, r3
 8001880:	dbab      	blt.n	80017da <SCH_Delete_Task+0x1a>
		}
		current_index_task--;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <SCH_Delete_Task+0xdc>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SCH_Delete_Task+0xdc>)
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e000      	b.n	8001892 <SCH_Delete_Task+0xd2>
		return;
 8001890:	bf00      	nop
	}
}
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000534 	.word	0x20000534
 80018a0:	20000214 	.word	0x20000214

080018a4 <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <clearTimer1+0x18>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <clearTimer1+0x1c>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000558 	.word	0x20000558
 80018c0:	2000053c 	.word	0x2000053c

080018c4 <clearTimer2>:
void clearTimer2(){
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <clearTimer2+0x18>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <clearTimer2+0x1c>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	2000055c 	.word	0x2000055c
 80018e0:	20000540 	.word	0x20000540

080018e4 <clearTimer3>:
void clearTimer3(){
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <clearTimer3+0x18>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <clearTimer3+0x1c>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000560 	.word	0x20000560
 8001900:	20000544 	.word	0x20000544

08001904 <clearTimer6>:
}
void clearTimer5(){
	timer5_counter = 0;
	timer5_flag = 1;
}
void clearTimer6(){
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	timer6_counter = 0;
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <clearTimer6+0x18>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
	timer6_flag = 1;
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <clearTimer6+0x1c>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	2000056c 	.word	0x2000056c
 8001920:	20000550 	.word	0x20000550

08001924 <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <setTimer1+0x28>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	fb92 f3f3 	sdiv	r3, r2, r3
 8001936:	4a06      	ldr	r2, [pc, #24]	; (8001950 <setTimer1+0x2c>)
 8001938:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <setTimer1+0x30>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000028 	.word	0x20000028
 8001950:	20000558 	.word	0x20000558
 8001954:	2000053c 	.word	0x2000053c

08001958 <setTimer2>:

void setTimer2( int duration){
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <setTimer2+0x28>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	fb92 f3f3 	sdiv	r3, r2, r3
 800196a:	4a06      	ldr	r2, [pc, #24]	; (8001984 <setTimer2+0x2c>)
 800196c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <setTimer2+0x30>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000028 	.word	0x20000028
 8001984:	2000055c 	.word	0x2000055c
 8001988:	20000540 	.word	0x20000540

0800198c <setTimer3>:

void setTimer3( int duration){
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <setTimer3+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	fb92 f3f3 	sdiv	r3, r2, r3
 800199e:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <setTimer3+0x2c>)
 80019a0:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <setTimer3+0x30>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000028 	.word	0x20000028
 80019b8:	20000560 	.word	0x20000560
 80019bc:	20000544 	.word	0x20000544

080019c0 <setTimer4>:

void setTimer4( int duration){
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <setTimer4+0x28>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80019d2:	4a06      	ldr	r2, [pc, #24]	; (80019ec <setTimer4+0x2c>)
 80019d4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <setTimer4+0x30>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000028 	.word	0x20000028
 80019ec:	20000564 	.word	0x20000564
 80019f0:	20000548 	.word	0x20000548

080019f4 <setTimer5>:

void setTimer5( int duration){
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <setTimer5+0x28>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <setTimer5+0x2c>)
 8001a08:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <setTimer5+0x30>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000028 	.word	0x20000028
 8001a20:	20000568 	.word	0x20000568
 8001a24:	2000054c 	.word	0x2000054c

08001a28 <setTimer6>:
void setTimer6( int duration){
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <setTimer6+0x28>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a3a:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <setTimer6+0x2c>)
 8001a3c:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <setTimer6+0x30>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000028 	.word	0x20000028
 8001a54:	2000056c 	.word	0x2000056c
 8001a58:	20000550 	.word	0x20000550

08001a5c <timerRun>:

void timerRun (){
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <timerRun+0xec>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	dd0b      	ble.n	8001a80 <timerRun+0x24>
		timer0_counter --;
 8001a68:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <timerRun+0xec>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	4a36      	ldr	r2, [pc, #216]	; (8001b48 <timerRun+0xec>)
 8001a70:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <timerRun+0xec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dc02      	bgt.n	8001a80 <timerRun+0x24>
			timer0_flag = 1;
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <timerRun+0xf0>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <timerRun+0xf4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	dd0b      	ble.n	8001aa0 <timerRun+0x44>
		timer1_counter--;
 8001a88:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <timerRun+0xf4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	4a30      	ldr	r2, [pc, #192]	; (8001b50 <timerRun+0xf4>)
 8001a90:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <timerRun+0xf4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dc02      	bgt.n	8001aa0 <timerRun+0x44>
			timer1_flag = 1;
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <timerRun+0xf8>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <timerRun+0xfc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dd0b      	ble.n	8001ac0 <timerRun+0x64>
		timer2_counter--;
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <timerRun+0xfc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <timerRun+0xfc>)
 8001ab0:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <timerRun+0xfc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	dc02      	bgt.n	8001ac0 <timerRun+0x64>
			timer2_flag = 1;
 8001aba:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <timerRun+0x100>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <timerRun+0x104>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	dd0b      	ble.n	8001ae0 <timerRun+0x84>
		timer3_counter--;
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <timerRun+0x104>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <timerRun+0x104>)
 8001ad0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <timerRun+0x104>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	dc02      	bgt.n	8001ae0 <timerRun+0x84>
			timer3_flag = 1;
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <timerRun+0x108>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <timerRun+0x10c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	dd0b      	ble.n	8001b00 <timerRun+0xa4>
		timer4_counter--;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <timerRun+0x10c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <timerRun+0x10c>)
 8001af0:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <timerRun+0x10c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	dc02      	bgt.n	8001b00 <timerRun+0xa4>
			timer4_flag = 1;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <timerRun+0x110>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <timerRun+0x114>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dd0b      	ble.n	8001b20 <timerRun+0xc4>
			timer5_counter--;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <timerRun+0x114>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <timerRun+0x114>)
 8001b10:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <timerRun+0x114>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	dc02      	bgt.n	8001b20 <timerRun+0xc4>
				timer5_flag = 1;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <timerRun+0x118>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <timerRun+0x11c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dd0b      	ble.n	8001b40 <timerRun+0xe4>
			timer6_counter--;
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <timerRun+0x11c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <timerRun+0x11c>)
 8001b30:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <timerRun+0x11c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dc02      	bgt.n	8001b40 <timerRun+0xe4>
				timer6_flag = 1;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <timerRun+0x120>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000554 	.word	0x20000554
 8001b4c:	20000538 	.word	0x20000538
 8001b50:	20000558 	.word	0x20000558
 8001b54:	2000053c 	.word	0x2000053c
 8001b58:	2000055c 	.word	0x2000055c
 8001b5c:	20000540 	.word	0x20000540
 8001b60:	20000560 	.word	0x20000560
 8001b64:	20000544 	.word	0x20000544
 8001b68:	20000564 	.word	0x20000564
 8001b6c:	20000548 	.word	0x20000548
 8001b70:	20000568 	.word	0x20000568
 8001b74:	2000054c 	.word	0x2000054c
 8001b78:	2000056c 	.word	0x2000056c
 8001b7c:	20000550 	.word	0x20000550

08001b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x5c>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_MspInit+0x60>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_MspInit+0x60>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000

08001be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d114      	bne.n	8001c20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_TIM_Base_MspInit+0x78>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_TIM_Base_MspInit+0x78>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_TIM_Base_MspInit+0x78>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	201c      	movs	r0, #28
 8001c14:	f000 fa9b 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c18:	201c      	movs	r0, #28
 8001c1a:	f000 fab4 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c1e:	e018      	b.n	8001c52 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_TIM_Base_MspInit+0x7c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d113      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_TIM_Base_MspInit+0x78>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <HAL_TIM_Base_MspInit+0x78>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_TIM_Base_MspInit+0x78>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	201d      	movs	r0, #29
 8001c48:	f000 fa81 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c4c:	201d      	movs	r0, #29
 8001c4e:	f000 fa9a 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40000400 	.word	0x40000400

08001c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_TIM_MspPostInit+0x58>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d117      	bne.n	8001cb4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_TIM_MspPostInit+0x5c>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_TIM_MspPostInit+0x5c>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_TIM_MspPostInit+0x5c>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c9c:	2340      	movs	r3, #64	; 0x40
 8001c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_TIM_MspPostInit+0x60>)
 8001cb0:	f000 fb34 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010800 	.word	0x40010800

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_UART_MspInit+0x98>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d137      	bne.n	8001d58 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_UART_MspInit+0x9c>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_UART_MspInit+0x9c>)
 8001cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_UART_MspInit+0x9c>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_UART_MspInit+0x9c>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_UART_MspInit+0x9c>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_UART_MspInit+0x9c>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480f      	ldr	r0, [pc, #60]	; (8001d68 <HAL_UART_MspInit+0xa0>)
 8001d2c:	f000 faf6 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d30:	2308      	movs	r3, #8
 8001d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	4809      	ldr	r0, [pc, #36]	; (8001d68 <HAL_UART_MspInit+0xa0>)
 8001d44:	f000 faea 	bl	800231c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2026      	movs	r0, #38	; 0x26
 8001d4e:	f000 f9fe 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d52:	2026      	movs	r0, #38	; 0x26
 8001d54:	f000 fa17 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40004400 	.word	0x40004400
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010800 	.word	0x40010800

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <NMI_Handler+0x4>

08001d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <MemManage_Handler+0x4>

08001d7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db2:	f000 f8d9 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM2_IRQHandler+0x10>)
 8001dc2:	f001 fa2d 	bl	8003220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000104 	.word	0x20000104

08001dd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <TIM3_IRQHandler+0x10>)
 8001dd6:	f001 fa23 	bl	8003220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000014c 	.word	0x2000014c

08001de4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <USART2_IRQHandler+0x10>)
 8001dea:	f002 f8bb 	bl	8003f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000194 	.word	0x20000194

08001df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <_sbrk+0x5c>)
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <_sbrk+0x60>)
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <_sbrk+0x64>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <_sbrk+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e28:	f002 fc94 	bl	8004754 <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e009      	b.n	8001e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <_sbrk+0x64>)
 8001e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20005000 	.word	0x20005000
 8001e58:	00000400 	.word	0x00000400
 8001e5c:	20000570 	.word	0x20000570
 8001e60:	20000588 	.word	0x20000588

08001e64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_PeriodElapsedCallback+0x16>
//		button_reading();
//		timerRun();
		//getKeyInput();
		SCH_Update();
 8001e82:	f7ff fbed 	bl	8001660 <SCH_Update>
	}
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	; (8001ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eb6:	f7ff ffd5 	bl	8001e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f002 fc51 	bl	8004760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ebe:	f7ff f86b 	bl	8000f98 <main>
  bx lr
 8001ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001ecc:	08005138 	.word	0x08005138
  ldr r2, =_sbss
 8001ed0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001ed4:	20000588 	.word	0x20000588

08001ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC1_2_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_Init+0x28>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_Init+0x28>)
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f923 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	f000 f808 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff fe42 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40022000 	.word	0x40022000

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f93b 	bl	80021a2 <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f000 f903 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000002c 	.word	0x2000002c
 8001f60:	20000034 	.word	0x20000034
 8001f64:	20000030 	.word	0x20000030

08001f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_IncTick+0x1c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_IncTick+0x20>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <HAL_IncTick+0x20>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000034 	.word	0x20000034
 8001f88:	20000574 	.word	0x20000574

08001f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <HAL_GetTick+0x10>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000574 	.word	0x20000574

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4906      	ldr	r1, [pc, #24]	; (8002038 <__NVIC_EnableIRQ+0x34>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff90 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff2d 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff42 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff90 	bl	8002090 <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5f 	bl	800203c <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff35 	bl	8002004 <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa2 	bl	80020f4 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d008      	beq.n	80021e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e020      	b.n	8002224 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 020e 	bic.w	r2, r2, #14
 80021f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
	...

08002230 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002242:	2b02      	cmp	r3, #2
 8002244:	d005      	beq.n	8002252 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2204      	movs	r2, #4
 800224a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e051      	b.n	80022f6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 020e 	bic.w	r2, r2, #14
 8002260:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a22      	ldr	r2, [pc, #136]	; (8002300 <HAL_DMA_Abort_IT+0xd0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d029      	beq.n	80022d0 <HAL_DMA_Abort_IT+0xa0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a20      	ldr	r2, [pc, #128]	; (8002304 <HAL_DMA_Abort_IT+0xd4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d022      	beq.n	80022cc <HAL_DMA_Abort_IT+0x9c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_DMA_Abort_IT+0xd8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d01a      	beq.n	80022c6 <HAL_DMA_Abort_IT+0x96>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1d      	ldr	r2, [pc, #116]	; (800230c <HAL_DMA_Abort_IT+0xdc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d012      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x90>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_DMA_Abort_IT+0xe0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00a      	beq.n	80022ba <HAL_DMA_Abort_IT+0x8a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1a      	ldr	r2, [pc, #104]	; (8002314 <HAL_DMA_Abort_IT+0xe4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d102      	bne.n	80022b4 <HAL_DMA_Abort_IT+0x84>
 80022ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022b2:	e00e      	b.n	80022d2 <HAL_DMA_Abort_IT+0xa2>
 80022b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b8:	e00b      	b.n	80022d2 <HAL_DMA_Abort_IT+0xa2>
 80022ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022be:	e008      	b.n	80022d2 <HAL_DMA_Abort_IT+0xa2>
 80022c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c4:	e005      	b.n	80022d2 <HAL_DMA_Abort_IT+0xa2>
 80022c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ca:	e002      	b.n	80022d2 <HAL_DMA_Abort_IT+0xa2>
 80022cc:	2310      	movs	r3, #16
 80022ce:	e000      	b.n	80022d2 <HAL_DMA_Abort_IT+0xa2>
 80022d0:	2301      	movs	r3, #1
 80022d2:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_DMA_Abort_IT+0xe8>)
 80022d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
    } 
  }
  return status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40020008 	.word	0x40020008
 8002304:	4002001c 	.word	0x4002001c
 8002308:	40020030 	.word	0x40020030
 800230c:	40020044 	.word	0x40020044
 8002310:	40020058 	.word	0x40020058
 8002314:	4002006c 	.word	0x4002006c
 8002318:	40020000 	.word	0x40020000

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b08b      	sub	sp, #44	; 0x2c
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232e:	e169      	b.n	8002604 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002330:	2201      	movs	r2, #1
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 8158 	bne.w	80025fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4a9a      	ldr	r2, [pc, #616]	; (80025bc <HAL_GPIO_Init+0x2a0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d05e      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 8002358:	4a98      	ldr	r2, [pc, #608]	; (80025bc <HAL_GPIO_Init+0x2a0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d875      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 800235e:	4a98      	ldr	r2, [pc, #608]	; (80025c0 <HAL_GPIO_Init+0x2a4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d058      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 8002364:	4a96      	ldr	r2, [pc, #600]	; (80025c0 <HAL_GPIO_Init+0x2a4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d86f      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 800236a:	4a96      	ldr	r2, [pc, #600]	; (80025c4 <HAL_GPIO_Init+0x2a8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d052      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 8002370:	4a94      	ldr	r2, [pc, #592]	; (80025c4 <HAL_GPIO_Init+0x2a8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d869      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 8002376:	4a94      	ldr	r2, [pc, #592]	; (80025c8 <HAL_GPIO_Init+0x2ac>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d04c      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 800237c:	4a92      	ldr	r2, [pc, #584]	; (80025c8 <HAL_GPIO_Init+0x2ac>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d863      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 8002382:	4a92      	ldr	r2, [pc, #584]	; (80025cc <HAL_GPIO_Init+0x2b0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d046      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 8002388:	4a90      	ldr	r2, [pc, #576]	; (80025cc <HAL_GPIO_Init+0x2b0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d85d      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 800238e:	2b12      	cmp	r3, #18
 8002390:	d82a      	bhi.n	80023e8 <HAL_GPIO_Init+0xcc>
 8002392:	2b12      	cmp	r3, #18
 8002394:	d859      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 8002396:	a201      	add	r2, pc, #4	; (adr r2, 800239c <HAL_GPIO_Init+0x80>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	08002417 	.word	0x08002417
 80023a0:	080023f1 	.word	0x080023f1
 80023a4:	08002403 	.word	0x08002403
 80023a8:	08002445 	.word	0x08002445
 80023ac:	0800244b 	.word	0x0800244b
 80023b0:	0800244b 	.word	0x0800244b
 80023b4:	0800244b 	.word	0x0800244b
 80023b8:	0800244b 	.word	0x0800244b
 80023bc:	0800244b 	.word	0x0800244b
 80023c0:	0800244b 	.word	0x0800244b
 80023c4:	0800244b 	.word	0x0800244b
 80023c8:	0800244b 	.word	0x0800244b
 80023cc:	0800244b 	.word	0x0800244b
 80023d0:	0800244b 	.word	0x0800244b
 80023d4:	0800244b 	.word	0x0800244b
 80023d8:	0800244b 	.word	0x0800244b
 80023dc:	0800244b 	.word	0x0800244b
 80023e0:	080023f9 	.word	0x080023f9
 80023e4:	0800240d 	.word	0x0800240d
 80023e8:	4a79      	ldr	r2, [pc, #484]	; (80025d0 <HAL_GPIO_Init+0x2b4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ee:	e02c      	b.n	800244a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e029      	b.n	800244c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	3304      	adds	r3, #4
 80023fe:	623b      	str	r3, [r7, #32]
          break;
 8002400:	e024      	b.n	800244c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	3308      	adds	r3, #8
 8002408:	623b      	str	r3, [r7, #32]
          break;
 800240a:	e01f      	b.n	800244c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	330c      	adds	r3, #12
 8002412:	623b      	str	r3, [r7, #32]
          break;
 8002414:	e01a      	b.n	800244c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800241e:	2304      	movs	r3, #4
 8002420:	623b      	str	r3, [r7, #32]
          break;
 8002422:	e013      	b.n	800244c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800242c:	2308      	movs	r3, #8
 800242e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	611a      	str	r2, [r3, #16]
          break;
 8002436:	e009      	b.n	800244c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002438:	2308      	movs	r3, #8
 800243a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	615a      	str	r2, [r3, #20]
          break;
 8002442:	e003      	b.n	800244c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
          break;
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x130>
          break;
 800244a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2bff      	cmp	r3, #255	; 0xff
 8002450:	d801      	bhi.n	8002456 <HAL_GPIO_Init+0x13a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	e001      	b.n	800245a <HAL_GPIO_Init+0x13e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3304      	adds	r3, #4
 800245a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2bff      	cmp	r3, #255	; 0xff
 8002460:	d802      	bhi.n	8002468 <HAL_GPIO_Init+0x14c>
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	e002      	b.n	800246e <HAL_GPIO_Init+0x152>
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	3b08      	subs	r3, #8
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	210f      	movs	r1, #15
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	401a      	ands	r2, r3
 8002480:	6a39      	ldr	r1, [r7, #32]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	431a      	orrs	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80b1 	beq.w	80025fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800249c:	4b4d      	ldr	r3, [pc, #308]	; (80025d4 <HAL_GPIO_Init+0x2b8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a4c      	ldr	r2, [pc, #304]	; (80025d4 <HAL_GPIO_Init+0x2b8>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_GPIO_Init+0x2b8>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024b4:	4a48      	ldr	r2, [pc, #288]	; (80025d8 <HAL_GPIO_Init+0x2bc>)
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4013      	ands	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a40      	ldr	r2, [pc, #256]	; (80025dc <HAL_GPIO_Init+0x2c0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <HAL_GPIO_Init+0x1ec>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3f      	ldr	r2, [pc, #252]	; (80025e0 <HAL_GPIO_Init+0x2c4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00d      	beq.n	8002504 <HAL_GPIO_Init+0x1e8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3e      	ldr	r2, [pc, #248]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <HAL_GPIO_Init+0x1e4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3d      	ldr	r2, [pc, #244]	; (80025e8 <HAL_GPIO_Init+0x2cc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_GPIO_Init+0x1e0>
 80024f8:	2303      	movs	r3, #3
 80024fa:	e006      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 80024fc:	2304      	movs	r3, #4
 80024fe:	e004      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002500:	2302      	movs	r3, #2
 8002502:	e002      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002508:	2300      	movs	r3, #0
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	f002 0203 	and.w	r2, r2, #3
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	4093      	lsls	r3, r2
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800251a:	492f      	ldr	r1, [pc, #188]	; (80025d8 <HAL_GPIO_Init+0x2bc>)
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	492c      	ldr	r1, [pc, #176]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	43db      	mvns	r3, r3
 800254a:	4928      	ldr	r1, [pc, #160]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800254c:	4013      	ands	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	491e      	ldr	r1, [pc, #120]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002574:	4013      	ands	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	4918      	ldr	r1, [pc, #96]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	608b      	str	r3, [r1, #8]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	4914      	ldr	r1, [pc, #80]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800259c:	4013      	ands	r3, r2
 800259e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d021      	beq.n	80025f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	490e      	ldr	r1, [pc, #56]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60cb      	str	r3, [r1, #12]
 80025b8:	e021      	b.n	80025fe <HAL_GPIO_Init+0x2e2>
 80025ba:	bf00      	nop
 80025bc:	10320000 	.word	0x10320000
 80025c0:	10310000 	.word	0x10310000
 80025c4:	10220000 	.word	0x10220000
 80025c8:	10210000 	.word	0x10210000
 80025cc:	10120000 	.word	0x10120000
 80025d0:	10110000 	.word	0x10110000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000
 80025dc:	40010800 	.word	0x40010800
 80025e0:	40010c00 	.word	0x40010c00
 80025e4:	40011000 	.word	0x40011000
 80025e8:	40011400 	.word	0x40011400
 80025ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_GPIO_Init+0x304>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	4909      	ldr	r1, [pc, #36]	; (8002620 <HAL_GPIO_Init+0x304>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	3301      	adds	r3, #1
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	f47f ae8e 	bne.w	8002330 <HAL_GPIO_Init+0x14>
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	372c      	adds	r7, #44	; 0x2c
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e001      	b.n	8002646 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	807b      	strh	r3, [r7, #2]
 800265e:	4613      	mov	r3, r2
 8002660:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002662:	787b      	ldrb	r3, [r7, #1]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002668:	887a      	ldrh	r2, [r7, #2]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800266e:	e003      	b.n	8002678 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	041a      	lsls	r2, r3, #16
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	611a      	str	r2, [r3, #16]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002694:	887a      	ldrh	r2, [r7, #2]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4013      	ands	r3, r2
 800269a:	041a      	lsls	r2, r3, #16
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	43d9      	mvns	r1, r3
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	400b      	ands	r3, r1
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e272      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8087 	beq.w	80027e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d4:	4b92      	ldr	r3, [pc, #584]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d00c      	beq.n	80026fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e0:	4b8f      	ldr	r3, [pc, #572]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d112      	bne.n	8002712 <HAL_RCC_OscConfig+0x5e>
 80026ec:	4b8c      	ldr	r3, [pc, #560]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f8:	d10b      	bne.n	8002712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fa:	4b89      	ldr	r3, [pc, #548]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d06c      	beq.n	80027e0 <HAL_RCC_OscConfig+0x12c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d168      	bne.n	80027e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e24c      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x76>
 800271c:	4b80      	ldr	r3, [pc, #512]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a7f      	ldr	r2, [pc, #508]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e02e      	b.n	8002788 <HAL_RCC_OscConfig+0xd4>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x98>
 8002732:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7a      	ldr	r2, [pc, #488]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b78      	ldr	r3, [pc, #480]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a77      	ldr	r2, [pc, #476]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e01d      	b.n	8002788 <HAL_RCC_OscConfig+0xd4>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0xbc>
 8002756:	4b72      	ldr	r3, [pc, #456]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a71      	ldr	r2, [pc, #452]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b6f      	ldr	r3, [pc, #444]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6e      	ldr	r2, [pc, #440]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0xd4>
 8002770:	4b6b      	ldr	r3, [pc, #428]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6a      	ldr	r2, [pc, #424]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a67      	ldr	r2, [pc, #412]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff fbfc 	bl	8001f8c <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7ff fbf8 	bl	8001f8c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e200      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0xe4>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff fbe8 	bl	8001f8c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7ff fbe4 	bl	8001f8c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1ec      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	4b53      	ldr	r3, [pc, #332]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x10c>
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d063      	beq.n	80028b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ee:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027fa:	4b49      	ldr	r3, [pc, #292]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b08      	cmp	r3, #8
 8002804:	d11c      	bne.n	8002840 <HAL_RCC_OscConfig+0x18c>
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d116      	bne.n	8002840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002812:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_RCC_OscConfig+0x176>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e1c0      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4939      	ldr	r1, [pc, #228]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	e03a      	b.n	80028b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002848:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7ff fb9d 	bl	8001f8c <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002856:	f7ff fb99 	bl	8001f8c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e1a1      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002874:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4927      	ldr	r1, [pc, #156]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
 8002888:	e015      	b.n	80028b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288a:	4b26      	ldr	r3, [pc, #152]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7ff fb7c 	bl	8001f8c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7ff fb78 	bl	8001f8c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e180      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d03a      	beq.n	8002938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d019      	beq.n	80028fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_RCC_OscConfig+0x274>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d0:	f7ff fb5c 	bl	8001f8c <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d8:	f7ff fb58 	bl	8001f8c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e160      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f000 fad8 	bl	8002eac <RCC_Delay>
 80028fc:	e01c      	b.n	8002938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_RCC_OscConfig+0x274>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7ff fb42 	bl	8001f8c <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290a:	e00f      	b.n	800292c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290c:	f7ff fb3e 	bl	8001f8c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d908      	bls.n	800292c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e146      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	42420000 	.word	0x42420000
 8002928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	4b92      	ldr	r3, [pc, #584]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e9      	bne.n	800290c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80a6 	beq.w	8002a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294a:	4b8b      	ldr	r3, [pc, #556]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10d      	bne.n	8002972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a87      	ldr	r2, [pc, #540]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	61d3      	str	r3, [r2, #28]
 8002962:	4b85      	ldr	r3, [pc, #532]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x4c8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b7f      	ldr	r3, [pc, #508]	; (8002b7c <HAL_RCC_OscConfig+0x4c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a7e      	ldr	r2, [pc, #504]	; (8002b7c <HAL_RCC_OscConfig+0x4c8>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7ff faff 	bl	8001f8c <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7ff fafb 	bl	8001f8c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b64      	cmp	r3, #100	; 0x64
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e103      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4b75      	ldr	r3, [pc, #468]	; (8002b7c <HAL_RCC_OscConfig+0x4c8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x312>
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a6e      	ldr	r2, [pc, #440]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	e02d      	b.n	8002a22 <HAL_RCC_OscConfig+0x36e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x334>
 80029ce:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4a69      	ldr	r2, [pc, #420]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6213      	str	r3, [r2, #32]
 80029da:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4a66      	ldr	r2, [pc, #408]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	6213      	str	r3, [r2, #32]
 80029e6:	e01c      	b.n	8002a22 <HAL_RCC_OscConfig+0x36e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCC_OscConfig+0x356>
 80029f0:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4a60      	ldr	r2, [pc, #384]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	6213      	str	r3, [r2, #32]
 80029fc:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6213      	str	r3, [r2, #32]
 8002a08:	e00b      	b.n	8002a22 <HAL_RCC_OscConfig+0x36e>
 8002a0a:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4a5a      	ldr	r2, [pc, #360]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	6213      	str	r3, [r2, #32]
 8002a16:	4b58      	ldr	r3, [pc, #352]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d015      	beq.n	8002a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2a:	f7ff faaf 	bl	8001f8c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7ff faab 	bl	8001f8c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e0b1      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ee      	beq.n	8002a32 <HAL_RCC_OscConfig+0x37e>
 8002a54:	e014      	b.n	8002a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7ff fa99 	bl	8001f8c <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7ff fa95 	bl	8001f8c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e09b      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a74:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ee      	bne.n	8002a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d105      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a86:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4a3b      	ldr	r2, [pc, #236]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8087 	beq.w	8002baa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d061      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d146      	bne.n	8002b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7ff fa69 	bl	8001f8c <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7ff fa65 	bl	8001f8c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e06d      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f0      	bne.n	8002abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d108      	bne.n	8002af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	4921      	ldr	r1, [pc, #132]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af8:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a19      	ldr	r1, [r3, #32]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	491b      	ldr	r1, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7ff fa39 	bl	8001f8c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7ff fa35 	bl	8001f8c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e03d      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x46a>
 8002b3c:	e035      	b.n	8002baa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff fa22 	bl	8001f8c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7ff fa1e 	bl	8001f8c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e026      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x498>
 8002b6a:	e01e      	b.n	8002baa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e019      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x500>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0d0      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b6a      	ldr	r3, [pc, #424]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4965      	ldr	r1, [pc, #404]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0b8      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	494d      	ldr	r1, [pc, #308]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d040      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d115      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e07f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e073      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e06b      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4936      	ldr	r1, [pc, #216]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7ff f970 	bl	8001f8c <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7ff f96c 	bl	8001f8c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e053      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d210      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	4922      	ldr	r1, [pc, #136]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e032      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4916      	ldr	r1, [pc, #88]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	490e      	ldr	r1, [pc, #56]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d46:	f000 f821 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	490a      	ldr	r1, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d58:	5ccb      	ldrb	r3, [r1, r3]
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1cc>)
 8002d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1d0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f8ce 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40022000 	.word	0x40022000
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	080050e4 	.word	0x080050e4
 8002d84:	2000002c 	.word	0x2000002c
 8002d88:	20000030 	.word	0x20000030

08002d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	b490      	push	{r4, r7}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d94:	1d3c      	adds	r4, r7, #4
 8002d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d9c:	f240 2301 	movw	r3, #513	; 0x201
 8002da0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002db6:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x40>
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x46>
 8002dca:	e02b      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dce:	623b      	str	r3, [r7, #32]
      break;
 8002dd0:	e02b      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	0c9b      	lsrs	r3, r3, #18
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3328      	adds	r3, #40	; 0x28
 8002ddc:	443b      	add	r3, r7
 8002dde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002de2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	0c5b      	lsrs	r3, r3, #17
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	3328      	adds	r3, #40	; 0x28
 8002dfa:	443b      	add	r3, r7
 8002dfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e06:	fb03 f202 	mul.w	r2, r3, r2
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	e004      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	623b      	str	r3, [r7, #32]
      break;
 8002e22:	e002      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e26:	623b      	str	r3, [r7, #32]
      break;
 8002e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3728      	adds	r7, #40	; 0x28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc90      	pop	{r4, r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	080050d4 	.word	0x080050d4
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	007a1200 	.word	0x007a1200
 8002e44:	003d0900 	.word	0x003d0900

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b02      	ldr	r3, [pc, #8]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	2000002c 	.word	0x2000002c

08002e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e60:	f7ff fff2 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4903      	ldr	r1, [pc, #12]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	080050f4 	.word	0x080050f4

08002e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e88:	f7ff ffde 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	0adb      	lsrs	r3, r3, #11
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4903      	ldr	r1, [pc, #12]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	080050f4 	.word	0x080050f4

08002eac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <RCC_Delay+0x34>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <RCC_Delay+0x38>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0a5b      	lsrs	r3, r3, #9
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ec8:	bf00      	nop
  }
  while (Delay --);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	60fa      	str	r2, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f9      	bne.n	8002ec8 <RCC_Delay+0x1c>
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	2000002c 	.word	0x2000002c
 8002ee4:	10624dd3 	.word	0x10624dd3

08002ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e041      	b.n	8002f7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe fe68 	bl	8001be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f000 fc28 	bl	800377c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d001      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e03a      	b.n	8003016 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_TIM_Base_Start_IT+0x98>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x58>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fca:	d009      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x58>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a14      	ldr	r2, [pc, #80]	; (8003024 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x58>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d111      	bne.n	8003004 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	d010      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003002:	e007      	b.n	8003014 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800

0800302c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e041      	b.n	80030c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f839 	bl	80030ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f000 fb86 	bl	800377c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_TIM_PWM_Start+0x24>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e022      	b.n	8003146 <HAL_TIM_PWM_Start+0x6a>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b04      	cmp	r3, #4
 8003104:	d109      	bne.n	800311a <HAL_TIM_PWM_Start+0x3e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e015      	b.n	8003146 <HAL_TIM_PWM_Start+0x6a>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d109      	bne.n	8003134 <HAL_TIM_PWM_Start+0x58>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e008      	b.n	8003146 <HAL_TIM_PWM_Start+0x6a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e05e      	b.n	800320c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0x82>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315c:	e013      	b.n	8003186 <HAL_TIM_PWM_Start+0xaa>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b04      	cmp	r3, #4
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0x92>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800316c:	e00b      	b.n	8003186 <HAL_TIM_PWM_Start+0xaa>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Start+0xa2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317c:	e003      	b.n	8003186 <HAL_TIM_PWM_Start+0xaa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fd74 	bl	8003c7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1e      	ldr	r2, [pc, #120]	; (8003214 <HAL_TIM_PWM_Start+0x138>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d107      	bne.n	80031ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_TIM_PWM_Start+0x138>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_TIM_PWM_Start+0xfa>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d009      	beq.n	80031d6 <HAL_TIM_PWM_Start+0xfa>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <HAL_TIM_PWM_Start+0x13c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_TIM_PWM_Start+0xfa>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a12      	ldr	r2, [pc, #72]	; (800321c <HAL_TIM_PWM_Start+0x140>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d111      	bne.n	80031fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b06      	cmp	r3, #6
 80031e6:	d010      	beq.n	800320a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f8:	e007      	b.n	800320a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800

08003220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0202 	mvn.w	r2, #2
 800324c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa6f 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fa62 	bl	8003734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fa71 	bl	8003758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b04      	cmp	r3, #4
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b04      	cmp	r3, #4
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0204 	mvn.w	r2, #4
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa45 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa38 	bl	8003734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fa47 	bl	8003758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0208 	mvn.w	r2, #8
 80032f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2204      	movs	r2, #4
 80032fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fa1b 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fa0e 	bl	8003734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fa1d 	bl	8003758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b10      	cmp	r3, #16
 8003330:	d122      	bne.n	8003378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b10      	cmp	r3, #16
 800333e:	d11b      	bne.n	8003378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0210 	mvn.w	r2, #16
 8003348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2208      	movs	r2, #8
 800334e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9f1 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 8003364:	e005      	b.n	8003372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9e4 	bl	8003734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f9f3 	bl	8003758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0201 	mvn.w	r2, #1
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fd66 	bl	8001e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b80      	cmp	r3, #128	; 0x80
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fce1 	bl	8003d92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f9b7 	bl	800376a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b20      	cmp	r3, #32
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b20      	cmp	r3, #32
 8003416:	d107      	bne.n	8003428 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0220 	mvn.w	r2, #32
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fcac 	bl	8003d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003446:	2302      	movs	r3, #2
 8003448:	e0ac      	b.n	80035a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	f200 809f 	bhi.w	8003598 <HAL_TIM_PWM_ConfigChannel+0x168>
 800345a:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	08003495 	.word	0x08003495
 8003464:	08003599 	.word	0x08003599
 8003468:	08003599 	.word	0x08003599
 800346c:	08003599 	.word	0x08003599
 8003470:	080034d5 	.word	0x080034d5
 8003474:	08003599 	.word	0x08003599
 8003478:	08003599 	.word	0x08003599
 800347c:	08003599 	.word	0x08003599
 8003480:	08003517 	.word	0x08003517
 8003484:	08003599 	.word	0x08003599
 8003488:	08003599 	.word	0x08003599
 800348c:	08003599 	.word	0x08003599
 8003490:	08003557 	.word	0x08003557
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f9d0 	bl	8003840 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0208 	orr.w	r2, r2, #8
 80034ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0204 	bic.w	r2, r2, #4
 80034be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6999      	ldr	r1, [r3, #24]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	619a      	str	r2, [r3, #24]
      break;
 80034d2:	e062      	b.n	800359a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa16 	bl	800390c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6999      	ldr	r1, [r3, #24]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	021a      	lsls	r2, r3, #8
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	619a      	str	r2, [r3, #24]
      break;
 8003514:	e041      	b.n	800359a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fa5f 	bl	80039e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0208 	orr.w	r2, r2, #8
 8003530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0204 	bic.w	r2, r2, #4
 8003540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69d9      	ldr	r1, [r3, #28]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	61da      	str	r2, [r3, #28]
      break;
 8003554:	e021      	b.n	800359a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 faa9 	bl	8003ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69d9      	ldr	r1, [r3, #28]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	021a      	lsls	r2, r3, #8
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	61da      	str	r2, [r3, #28]
      break;
 8003596:	e000      	b.n	800359a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003598:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_TIM_ConfigClockSource+0x18>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e0b3      	b.n	800372c <HAL_TIM_ConfigClockSource+0x180>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fc:	d03e      	beq.n	800367c <HAL_TIM_ConfigClockSource+0xd0>
 80035fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003602:	f200 8087 	bhi.w	8003714 <HAL_TIM_ConfigClockSource+0x168>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	f000 8085 	beq.w	8003718 <HAL_TIM_ConfigClockSource+0x16c>
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003612:	d87f      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x168>
 8003614:	2b70      	cmp	r3, #112	; 0x70
 8003616:	d01a      	beq.n	800364e <HAL_TIM_ConfigClockSource+0xa2>
 8003618:	2b70      	cmp	r3, #112	; 0x70
 800361a:	d87b      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x168>
 800361c:	2b60      	cmp	r3, #96	; 0x60
 800361e:	d050      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x116>
 8003620:	2b60      	cmp	r3, #96	; 0x60
 8003622:	d877      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x168>
 8003624:	2b50      	cmp	r3, #80	; 0x50
 8003626:	d03c      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0xf6>
 8003628:	2b50      	cmp	r3, #80	; 0x50
 800362a:	d873      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x168>
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d058      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x136>
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d86f      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x168>
 8003634:	2b30      	cmp	r3, #48	; 0x30
 8003636:	d064      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x156>
 8003638:	2b30      	cmp	r3, #48	; 0x30
 800363a:	d86b      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x168>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d060      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x156>
 8003640:	2b20      	cmp	r3, #32
 8003642:	d867      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x168>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05c      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x156>
 8003648:	2b10      	cmp	r3, #16
 800364a:	d05a      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800364c:	e062      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f000 faee 	bl	8003c3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003670:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	609a      	str	r2, [r3, #8]
      break;
 800367a:	e04e      	b.n	800371a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6899      	ldr	r1, [r3, #8]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f000 fad7 	bl	8003c3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800369e:	609a      	str	r2, [r3, #8]
      break;
 80036a0:	e03b      	b.n	800371a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f000 fa4e 	bl	8003b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2150      	movs	r1, #80	; 0x50
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 faa5 	bl	8003c0a <TIM_ITRx_SetConfig>
      break;
 80036c0:	e02b      	b.n	800371a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f000 fa6c 	bl	8003bac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2160      	movs	r1, #96	; 0x60
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fa95 	bl	8003c0a <TIM_ITRx_SetConfig>
      break;
 80036e0:	e01b      	b.n	800371a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f000 fa2e 	bl	8003b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fa85 	bl	8003c0a <TIM_ITRx_SetConfig>
      break;
 8003700:	e00b      	b.n	800371a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f000 fa7c 	bl	8003c0a <TIM_ITRx_SetConfig>
        break;
 8003712:	e002      	b.n	800371a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003714:	bf00      	nop
 8003716:	e000      	b.n	800371a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003718:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a29      	ldr	r2, [pc, #164]	; (8003834 <TIM_Base_SetConfig+0xb8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00b      	beq.n	80037ac <TIM_Base_SetConfig+0x30>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379a:	d007      	beq.n	80037ac <TIM_Base_SetConfig+0x30>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a26      	ldr	r2, [pc, #152]	; (8003838 <TIM_Base_SetConfig+0xbc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <TIM_Base_SetConfig+0x30>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a25      	ldr	r2, [pc, #148]	; (800383c <TIM_Base_SetConfig+0xc0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d108      	bne.n	80037be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <TIM_Base_SetConfig+0xb8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00b      	beq.n	80037de <TIM_Base_SetConfig+0x62>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d007      	beq.n	80037de <TIM_Base_SetConfig+0x62>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a19      	ldr	r2, [pc, #100]	; (8003838 <TIM_Base_SetConfig+0xbc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_Base_SetConfig+0x62>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a18      	ldr	r2, [pc, #96]	; (800383c <TIM_Base_SetConfig+0xc0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d108      	bne.n	80037f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a07      	ldr	r2, [pc, #28]	; (8003834 <TIM_Base_SetConfig+0xb8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d103      	bne.n	8003824 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	615a      	str	r2, [r3, #20]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800

08003840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f023 0302 	bic.w	r3, r3, #2
 8003888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <TIM_OC1_SetConfig+0xc8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d10c      	bne.n	80038b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 0308 	bic.w	r3, r3, #8
 80038a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a13      	ldr	r2, [pc, #76]	; (8003908 <TIM_OC1_SetConfig+0xc8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d111      	bne.n	80038e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	621a      	str	r2, [r3, #32]
}
 80038fc:	bf00      	nop
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40012c00 	.word	0x40012c00

0800390c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0210 	bic.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0320 	bic.w	r3, r3, #32
 8003956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <TIM_OC2_SetConfig+0xd0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d10d      	bne.n	8003988 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a14      	ldr	r2, [pc, #80]	; (80039dc <TIM_OC2_SetConfig+0xd0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d113      	bne.n	80039b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800399e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	40012c00 	.word	0x40012c00

080039e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0303 	bic.w	r3, r3, #3
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <TIM_OC3_SetConfig+0xd0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d10d      	bne.n	8003a5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <TIM_OC3_SetConfig+0xd0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d113      	bne.n	8003a8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	621a      	str	r2, [r3, #32]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40012c00 	.word	0x40012c00

08003ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	031b      	lsls	r3, r3, #12
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <TIM_OC4_SetConfig+0x98>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d109      	bne.n	8003b28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	019b      	lsls	r3, r3, #6
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00

08003b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f023 0201 	bic.w	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 030a 	bic.w	r3, r3, #10
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f023 0210 	bic.w	r2, r3, #16
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	031b      	lsls	r3, r3, #12
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003be8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	621a      	str	r2, [r3, #32]
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f043 0307 	orr.w	r3, r3, #7
 8003c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	609a      	str	r2, [r3, #8]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b087      	sub	sp, #28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	021a      	lsls	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	609a      	str	r2, [r3, #8]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	2201      	movs	r2, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1a      	ldr	r2, [r3, #32]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a1a      	ldr	r2, [r3, #32]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e046      	b.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a16      	ldr	r2, [pc, #88]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d28:	d009      	beq.n	8003d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d10c      	bne.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800

08003d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e03f      	b.n	8003e36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd ff7c 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	; 0x24
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fc25 	bl	8004638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b08a      	sub	sp, #40	; 0x28
 8003e42:	af02      	add	r7, sp, #8
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d17c      	bne.n	8003f58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_UART_Transmit+0x2c>
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e075      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Transmit+0x3e>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e06e      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2221      	movs	r2, #33	; 0x21
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e92:	f7fe f87b 	bl	8001f8c <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eac:	d108      	bne.n	8003ec0 <HAL_UART_Transmit+0x82>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e003      	b.n	8003ec8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ed0:	e02a      	b.n	8003f28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fa11 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e036      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	3302      	adds	r3, #2
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e007      	b.n	8003f1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	3301      	adds	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1cf      	bne.n	8003ed2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2140      	movs	r1, #64	; 0x40
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f9e1 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e006      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x52>
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa99 	bl	80044e6 <UART_Receive_IT>
      return;
 8003fb4:	e17b      	b.n	80042ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80b1 	beq.w	8004120 <HAL_UART_IRQHandler+0x1bc>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x70>
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80a6 	beq.w	8004120 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x90>
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_UART_IRQHandler+0xb0>
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	f043 0202 	orr.w	r2, r3, #2
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_UART_IRQHandler+0xd0>
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00f      	beq.n	800405e <HAL_UART_IRQHandler+0xfa>
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <HAL_UART_IRQHandler+0xee>
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f043 0208 	orr.w	r2, r3, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 811e 	beq.w	80042a4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_UART_IRQHandler+0x11e>
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fa32 	bl	80044e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <HAL_UART_IRQHandler+0x146>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d031      	beq.n	800410e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f974 	bl	8004398 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d023      	beq.n	8004106 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d013      	beq.n	80040fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	4a76      	ldr	r2, [pc, #472]	; (80042b4 <HAL_UART_IRQHandler+0x350>)
 80040dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe f8a4 	bl	8002230 <HAL_DMA_Abort_IT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f8:	4610      	mov	r0, r2
 80040fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	e00e      	b.n	800411c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f8ec 	bl	80042dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	e00a      	b.n	800411c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8e8 	bl	80042dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	e006      	b.n	800411c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8e4 	bl	80042dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800411a:	e0c3      	b.n	80042a4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	bf00      	nop
    return;
 800411e:	e0c1      	b.n	80042a4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	2b01      	cmp	r3, #1
 8004126:	f040 80a1 	bne.w	800426c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 809b 	beq.w	800426c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8095 	beq.w	800426c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04e      	beq.n	8004204 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004170:	8a3b      	ldrh	r3, [r7, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8098 	beq.w	80042a8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800417c:	8a3a      	ldrh	r2, [r7, #16]
 800417e:	429a      	cmp	r2, r3
 8004180:	f080 8092 	bcs.w	80042a8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8a3a      	ldrh	r2, [r7, #16]
 8004188:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b20      	cmp	r3, #32
 8004192:	d02b      	beq.n	80041ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0210 	bic.w	r2, r2, #16
 80041e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd ffe7 	bl	80021ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	4619      	mov	r1, r3
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f876 	bl	80042ee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004202:	e051      	b.n	80042a8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800420c:	b29b      	uxth	r3, r3
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d047      	beq.n	80042ac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800421c:	8a7b      	ldrh	r3, [r7, #18]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d044      	beq.n	80042ac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004230:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0210 	bic.w	r2, r2, #16
 800425e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004260:	8a7b      	ldrh	r3, [r7, #18]
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f842 	bl	80042ee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800426a:	e01f      	b.n	80042ac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_UART_IRQHandler+0x324>
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f8c9 	bl	8004418 <UART_Transmit_IT>
    return;
 8004286:	e012      	b.n	80042ae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <HAL_UART_IRQHandler+0x34a>
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f90a 	bl	80044b6 <UART_EndTransmit_IT>
    return;
 80042a2:	e004      	b.n	80042ae <HAL_UART_IRQHandler+0x34a>
    return;
 80042a4:	bf00      	nop
 80042a6:	e002      	b.n	80042ae <HAL_UART_IRQHandler+0x34a>
      return;
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <HAL_UART_IRQHandler+0x34a>
      return;
 80042ac:	bf00      	nop
  }
}
 80042ae:	3728      	adds	r7, #40	; 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	080043f1 	.word	0x080043f1

080042b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	460b      	mov	r3, r1
 80042f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004314:	e02c      	b.n	8004370 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d028      	beq.n	8004370 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <UART_WaitOnFlagUntilTimeout+0x30>
 8004324:	f7fd fe32 	bl	8001f8c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	429a      	cmp	r2, r3
 8004332:	d21d      	bcs.n	8004370 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004342:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e00f      	b.n	8004390 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4013      	ands	r3, r2
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	429a      	cmp	r2, r3
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	429a      	cmp	r2, r3
 800438c:	d0c3      	beq.n	8004316 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d107      	bne.n	80043d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0210 	bic.w	r2, r2, #16
 80043d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff ff66 	bl	80042dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b21      	cmp	r3, #33	; 0x21
 800442a:	d13e      	bne.n	80044aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004434:	d114      	bne.n	8004460 <UART_Transmit_IT+0x48>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d110      	bne.n	8004460 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004452:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	1c9a      	adds	r2, r3, #2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]
 800445e:	e008      	b.n	8004472 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	1c59      	adds	r1, r3, #1
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6211      	str	r1, [r2, #32]
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29b      	uxth	r3, r3
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4619      	mov	r1, r3
 8004480:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004494:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff feee 	bl	80042b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b086      	sub	sp, #24
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b22      	cmp	r3, #34	; 0x22
 80044f8:	f040 8099 	bne.w	800462e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004504:	d117      	bne.n	8004536 <UART_Receive_IT+0x50>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d113      	bne.n	8004536 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004524:	b29a      	uxth	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	1c9a      	adds	r2, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
 8004534:	e026      	b.n	8004584 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	d007      	beq.n	800455a <UART_Receive_IT+0x74>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <UART_Receive_IT+0x82>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	e008      	b.n	800457a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004574:	b2da      	uxtb	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29b      	uxth	r3, r3
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4619      	mov	r1, r3
 8004592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004594:	2b00      	cmp	r3, #0
 8004596:	d148      	bne.n	800462a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0220 	bic.w	r2, r2, #32
 80045a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d123      	bne.n	8004620 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0210 	bic.w	r2, r2, #16
 80045ec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d10a      	bne.n	8004612 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fe68 	bl	80042ee <HAL_UARTEx_RxEventCallback>
 800461e:	e002      	b.n	8004626 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff fe52 	bl	80042ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e002      	b.n	8004630 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004672:	f023 030c 	bic.w	r3, r3, #12
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	430b      	orrs	r3, r1
 800467e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2c      	ldr	r2, [pc, #176]	; (800474c <UART_SetConfig+0x114>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d103      	bne.n	80046a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fe fbf0 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	e002      	b.n	80046ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7fe fbd8 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 80046ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009a      	lsls	r2, r3, #2
 80046b8:	441a      	add	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	4a22      	ldr	r2, [pc, #136]	; (8004750 <UART_SetConfig+0x118>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	0119      	lsls	r1, r3, #4
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009a      	lsls	r2, r3, #2
 80046d8:	441a      	add	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <UART_SetConfig+0x118>)
 80046e6:	fba3 0302 	umull	r0, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2064      	movs	r0, #100	; 0x64
 80046ee:	fb00 f303 	mul.w	r3, r0, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	3332      	adds	r3, #50	; 0x32
 80046f8:	4a15      	ldr	r2, [pc, #84]	; (8004750 <UART_SetConfig+0x118>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004704:	4419      	add	r1, r3
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009a      	lsls	r2, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	fbb2 f2f3 	udiv	r2, r2, r3
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <UART_SetConfig+0x118>)
 800471e:	fba3 0302 	umull	r0, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2064      	movs	r0, #100	; 0x64
 8004726:	fb00 f303 	mul.w	r3, r0, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	3332      	adds	r3, #50	; 0x32
 8004730:	4a07      	ldr	r2, [pc, #28]	; (8004750 <UART_SetConfig+0x118>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	f003 020f 	and.w	r2, r3, #15
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	440a      	add	r2, r1
 8004742:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40013800 	.word	0x40013800
 8004750:	51eb851f 	.word	0x51eb851f

08004754 <__errno>:
 8004754:	4b01      	ldr	r3, [pc, #4]	; (800475c <__errno+0x8>)
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000038 	.word	0x20000038

08004760 <__libc_init_array>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	2600      	movs	r6, #0
 8004764:	4d0c      	ldr	r5, [pc, #48]	; (8004798 <__libc_init_array+0x38>)
 8004766:	4c0d      	ldr	r4, [pc, #52]	; (800479c <__libc_init_array+0x3c>)
 8004768:	1b64      	subs	r4, r4, r5
 800476a:	10a4      	asrs	r4, r4, #2
 800476c:	42a6      	cmp	r6, r4
 800476e:	d109      	bne.n	8004784 <__libc_init_array+0x24>
 8004770:	f000 fc9c 	bl	80050ac <_init>
 8004774:	2600      	movs	r6, #0
 8004776:	4d0a      	ldr	r5, [pc, #40]	; (80047a0 <__libc_init_array+0x40>)
 8004778:	4c0a      	ldr	r4, [pc, #40]	; (80047a4 <__libc_init_array+0x44>)
 800477a:	1b64      	subs	r4, r4, r5
 800477c:	10a4      	asrs	r4, r4, #2
 800477e:	42a6      	cmp	r6, r4
 8004780:	d105      	bne.n	800478e <__libc_init_array+0x2e>
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	f855 3b04 	ldr.w	r3, [r5], #4
 8004788:	4798      	blx	r3
 800478a:	3601      	adds	r6, #1
 800478c:	e7ee      	b.n	800476c <__libc_init_array+0xc>
 800478e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004792:	4798      	blx	r3
 8004794:	3601      	adds	r6, #1
 8004796:	e7f2      	b.n	800477e <__libc_init_array+0x1e>
 8004798:	08005130 	.word	0x08005130
 800479c:	08005130 	.word	0x08005130
 80047a0:	08005130 	.word	0x08005130
 80047a4:	08005134 	.word	0x08005134

080047a8 <memset>:
 80047a8:	4603      	mov	r3, r0
 80047aa:	4402      	add	r2, r0
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d100      	bne.n	80047b2 <memset+0xa>
 80047b0:	4770      	bx	lr
 80047b2:	f803 1b01 	strb.w	r1, [r3], #1
 80047b6:	e7f9      	b.n	80047ac <memset+0x4>

080047b8 <siprintf>:
 80047b8:	b40e      	push	{r1, r2, r3}
 80047ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047be:	b500      	push	{lr}
 80047c0:	b09c      	sub	sp, #112	; 0x70
 80047c2:	ab1d      	add	r3, sp, #116	; 0x74
 80047c4:	9002      	str	r0, [sp, #8]
 80047c6:	9006      	str	r0, [sp, #24]
 80047c8:	9107      	str	r1, [sp, #28]
 80047ca:	9104      	str	r1, [sp, #16]
 80047cc:	4808      	ldr	r0, [pc, #32]	; (80047f0 <siprintf+0x38>)
 80047ce:	4909      	ldr	r1, [pc, #36]	; (80047f4 <siprintf+0x3c>)
 80047d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d4:	9105      	str	r1, [sp, #20]
 80047d6:	6800      	ldr	r0, [r0, #0]
 80047d8:	a902      	add	r1, sp, #8
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	f000 f868 	bl	80048b0 <_svfiprintf_r>
 80047e0:	2200      	movs	r2, #0
 80047e2:	9b02      	ldr	r3, [sp, #8]
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	b01c      	add	sp, #112	; 0x70
 80047e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047ec:	b003      	add	sp, #12
 80047ee:	4770      	bx	lr
 80047f0:	20000038 	.word	0x20000038
 80047f4:	ffff0208 	.word	0xffff0208

080047f8 <__ssputs_r>:
 80047f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	688e      	ldr	r6, [r1, #8]
 80047fe:	4682      	mov	sl, r0
 8004800:	429e      	cmp	r6, r3
 8004802:	460c      	mov	r4, r1
 8004804:	4690      	mov	r8, r2
 8004806:	461f      	mov	r7, r3
 8004808:	d838      	bhi.n	800487c <__ssputs_r+0x84>
 800480a:	898a      	ldrh	r2, [r1, #12]
 800480c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004810:	d032      	beq.n	8004878 <__ssputs_r+0x80>
 8004812:	6825      	ldr	r5, [r4, #0]
 8004814:	6909      	ldr	r1, [r1, #16]
 8004816:	3301      	adds	r3, #1
 8004818:	eba5 0901 	sub.w	r9, r5, r1
 800481c:	6965      	ldr	r5, [r4, #20]
 800481e:	444b      	add	r3, r9
 8004820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004828:	106d      	asrs	r5, r5, #1
 800482a:	429d      	cmp	r5, r3
 800482c:	bf38      	it	cc
 800482e:	461d      	movcc	r5, r3
 8004830:	0553      	lsls	r3, r2, #21
 8004832:	d531      	bpl.n	8004898 <__ssputs_r+0xa0>
 8004834:	4629      	mov	r1, r5
 8004836:	f000 fb6f 	bl	8004f18 <_malloc_r>
 800483a:	4606      	mov	r6, r0
 800483c:	b950      	cbnz	r0, 8004854 <__ssputs_r+0x5c>
 800483e:	230c      	movs	r3, #12
 8004840:	f04f 30ff 	mov.w	r0, #4294967295
 8004844:	f8ca 3000 	str.w	r3, [sl]
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800484e:	81a3      	strh	r3, [r4, #12]
 8004850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004854:	464a      	mov	r2, r9
 8004856:	6921      	ldr	r1, [r4, #16]
 8004858:	f000 face 	bl	8004df8 <memcpy>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004866:	81a3      	strh	r3, [r4, #12]
 8004868:	6126      	str	r6, [r4, #16]
 800486a:	444e      	add	r6, r9
 800486c:	6026      	str	r6, [r4, #0]
 800486e:	463e      	mov	r6, r7
 8004870:	6165      	str	r5, [r4, #20]
 8004872:	eba5 0509 	sub.w	r5, r5, r9
 8004876:	60a5      	str	r5, [r4, #8]
 8004878:	42be      	cmp	r6, r7
 800487a:	d900      	bls.n	800487e <__ssputs_r+0x86>
 800487c:	463e      	mov	r6, r7
 800487e:	4632      	mov	r2, r6
 8004880:	4641      	mov	r1, r8
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	f000 fac6 	bl	8004e14 <memmove>
 8004888:	68a3      	ldr	r3, [r4, #8]
 800488a:	2000      	movs	r0, #0
 800488c:	1b9b      	subs	r3, r3, r6
 800488e:	60a3      	str	r3, [r4, #8]
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	4433      	add	r3, r6
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	e7db      	b.n	8004850 <__ssputs_r+0x58>
 8004898:	462a      	mov	r2, r5
 800489a:	f000 fbb1 	bl	8005000 <_realloc_r>
 800489e:	4606      	mov	r6, r0
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d1e1      	bne.n	8004868 <__ssputs_r+0x70>
 80048a4:	4650      	mov	r0, sl
 80048a6:	6921      	ldr	r1, [r4, #16]
 80048a8:	f000 face 	bl	8004e48 <_free_r>
 80048ac:	e7c7      	b.n	800483e <__ssputs_r+0x46>
	...

080048b0 <_svfiprintf_r>:
 80048b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b4:	4698      	mov	r8, r3
 80048b6:	898b      	ldrh	r3, [r1, #12]
 80048b8:	4607      	mov	r7, r0
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	460d      	mov	r5, r1
 80048be:	4614      	mov	r4, r2
 80048c0:	b09d      	sub	sp, #116	; 0x74
 80048c2:	d50e      	bpl.n	80048e2 <_svfiprintf_r+0x32>
 80048c4:	690b      	ldr	r3, [r1, #16]
 80048c6:	b963      	cbnz	r3, 80048e2 <_svfiprintf_r+0x32>
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	f000 fb25 	bl	8004f18 <_malloc_r>
 80048ce:	6028      	str	r0, [r5, #0]
 80048d0:	6128      	str	r0, [r5, #16]
 80048d2:	b920      	cbnz	r0, 80048de <_svfiprintf_r+0x2e>
 80048d4:	230c      	movs	r3, #12
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	e0d1      	b.n	8004a82 <_svfiprintf_r+0x1d2>
 80048de:	2340      	movs	r3, #64	; 0x40
 80048e0:	616b      	str	r3, [r5, #20]
 80048e2:	2300      	movs	r3, #0
 80048e4:	9309      	str	r3, [sp, #36]	; 0x24
 80048e6:	2320      	movs	r3, #32
 80048e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ec:	2330      	movs	r3, #48	; 0x30
 80048ee:	f04f 0901 	mov.w	r9, #1
 80048f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a9c <_svfiprintf_r+0x1ec>
 80048fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048fe:	4623      	mov	r3, r4
 8004900:	469a      	mov	sl, r3
 8004902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004906:	b10a      	cbz	r2, 800490c <_svfiprintf_r+0x5c>
 8004908:	2a25      	cmp	r2, #37	; 0x25
 800490a:	d1f9      	bne.n	8004900 <_svfiprintf_r+0x50>
 800490c:	ebba 0b04 	subs.w	fp, sl, r4
 8004910:	d00b      	beq.n	800492a <_svfiprintf_r+0x7a>
 8004912:	465b      	mov	r3, fp
 8004914:	4622      	mov	r2, r4
 8004916:	4629      	mov	r1, r5
 8004918:	4638      	mov	r0, r7
 800491a:	f7ff ff6d 	bl	80047f8 <__ssputs_r>
 800491e:	3001      	adds	r0, #1
 8004920:	f000 80aa 	beq.w	8004a78 <_svfiprintf_r+0x1c8>
 8004924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004926:	445a      	add	r2, fp
 8004928:	9209      	str	r2, [sp, #36]	; 0x24
 800492a:	f89a 3000 	ldrb.w	r3, [sl]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80a2 	beq.w	8004a78 <_svfiprintf_r+0x1c8>
 8004934:	2300      	movs	r3, #0
 8004936:	f04f 32ff 	mov.w	r2, #4294967295
 800493a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800493e:	f10a 0a01 	add.w	sl, sl, #1
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	9307      	str	r3, [sp, #28]
 8004946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800494a:	931a      	str	r3, [sp, #104]	; 0x68
 800494c:	4654      	mov	r4, sl
 800494e:	2205      	movs	r2, #5
 8004950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004954:	4851      	ldr	r0, [pc, #324]	; (8004a9c <_svfiprintf_r+0x1ec>)
 8004956:	f000 fa41 	bl	8004ddc <memchr>
 800495a:	9a04      	ldr	r2, [sp, #16]
 800495c:	b9d8      	cbnz	r0, 8004996 <_svfiprintf_r+0xe6>
 800495e:	06d0      	lsls	r0, r2, #27
 8004960:	bf44      	itt	mi
 8004962:	2320      	movmi	r3, #32
 8004964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004968:	0711      	lsls	r1, r2, #28
 800496a:	bf44      	itt	mi
 800496c:	232b      	movmi	r3, #43	; 0x2b
 800496e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004972:	f89a 3000 	ldrb.w	r3, [sl]
 8004976:	2b2a      	cmp	r3, #42	; 0x2a
 8004978:	d015      	beq.n	80049a6 <_svfiprintf_r+0xf6>
 800497a:	4654      	mov	r4, sl
 800497c:	2000      	movs	r0, #0
 800497e:	f04f 0c0a 	mov.w	ip, #10
 8004982:	9a07      	ldr	r2, [sp, #28]
 8004984:	4621      	mov	r1, r4
 8004986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498a:	3b30      	subs	r3, #48	; 0x30
 800498c:	2b09      	cmp	r3, #9
 800498e:	d94e      	bls.n	8004a2e <_svfiprintf_r+0x17e>
 8004990:	b1b0      	cbz	r0, 80049c0 <_svfiprintf_r+0x110>
 8004992:	9207      	str	r2, [sp, #28]
 8004994:	e014      	b.n	80049c0 <_svfiprintf_r+0x110>
 8004996:	eba0 0308 	sub.w	r3, r0, r8
 800499a:	fa09 f303 	lsl.w	r3, r9, r3
 800499e:	4313      	orrs	r3, r2
 80049a0:	46a2      	mov	sl, r4
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	e7d2      	b.n	800494c <_svfiprintf_r+0x9c>
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	1d19      	adds	r1, r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	9103      	str	r1, [sp, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bfbb      	ittet	lt
 80049b2:	425b      	neglt	r3, r3
 80049b4:	f042 0202 	orrlt.w	r2, r2, #2
 80049b8:	9307      	strge	r3, [sp, #28]
 80049ba:	9307      	strlt	r3, [sp, #28]
 80049bc:	bfb8      	it	lt
 80049be:	9204      	strlt	r2, [sp, #16]
 80049c0:	7823      	ldrb	r3, [r4, #0]
 80049c2:	2b2e      	cmp	r3, #46	; 0x2e
 80049c4:	d10c      	bne.n	80049e0 <_svfiprintf_r+0x130>
 80049c6:	7863      	ldrb	r3, [r4, #1]
 80049c8:	2b2a      	cmp	r3, #42	; 0x2a
 80049ca:	d135      	bne.n	8004a38 <_svfiprintf_r+0x188>
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	3402      	adds	r4, #2
 80049d0:	1d1a      	adds	r2, r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	9203      	str	r2, [sp, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfb8      	it	lt
 80049da:	f04f 33ff 	movlt.w	r3, #4294967295
 80049de:	9305      	str	r3, [sp, #20]
 80049e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004aa0 <_svfiprintf_r+0x1f0>
 80049e4:	2203      	movs	r2, #3
 80049e6:	4650      	mov	r0, sl
 80049e8:	7821      	ldrb	r1, [r4, #0]
 80049ea:	f000 f9f7 	bl	8004ddc <memchr>
 80049ee:	b140      	cbz	r0, 8004a02 <_svfiprintf_r+0x152>
 80049f0:	2340      	movs	r3, #64	; 0x40
 80049f2:	eba0 000a 	sub.w	r0, r0, sl
 80049f6:	fa03 f000 	lsl.w	r0, r3, r0
 80049fa:	9b04      	ldr	r3, [sp, #16]
 80049fc:	3401      	adds	r4, #1
 80049fe:	4303      	orrs	r3, r0
 8004a00:	9304      	str	r3, [sp, #16]
 8004a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a06:	2206      	movs	r2, #6
 8004a08:	4826      	ldr	r0, [pc, #152]	; (8004aa4 <_svfiprintf_r+0x1f4>)
 8004a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a0e:	f000 f9e5 	bl	8004ddc <memchr>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d038      	beq.n	8004a88 <_svfiprintf_r+0x1d8>
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <_svfiprintf_r+0x1f8>)
 8004a18:	bb1b      	cbnz	r3, 8004a62 <_svfiprintf_r+0x1b2>
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	3308      	adds	r3, #8
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a28:	4433      	add	r3, r6
 8004a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2c:	e767      	b.n	80048fe <_svfiprintf_r+0x4e>
 8004a2e:	460c      	mov	r4, r1
 8004a30:	2001      	movs	r0, #1
 8004a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a36:	e7a5      	b.n	8004984 <_svfiprintf_r+0xd4>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f04f 0c0a 	mov.w	ip, #10
 8004a3e:	4619      	mov	r1, r3
 8004a40:	3401      	adds	r4, #1
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	4620      	mov	r0, r4
 8004a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4a:	3a30      	subs	r2, #48	; 0x30
 8004a4c:	2a09      	cmp	r2, #9
 8004a4e:	d903      	bls.n	8004a58 <_svfiprintf_r+0x1a8>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0c5      	beq.n	80049e0 <_svfiprintf_r+0x130>
 8004a54:	9105      	str	r1, [sp, #20]
 8004a56:	e7c3      	b.n	80049e0 <_svfiprintf_r+0x130>
 8004a58:	4604      	mov	r4, r0
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a60:	e7f0      	b.n	8004a44 <_svfiprintf_r+0x194>
 8004a62:	ab03      	add	r3, sp, #12
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	462a      	mov	r2, r5
 8004a68:	4638      	mov	r0, r7
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <_svfiprintf_r+0x1fc>)
 8004a6c:	a904      	add	r1, sp, #16
 8004a6e:	f3af 8000 	nop.w
 8004a72:	1c42      	adds	r2, r0, #1
 8004a74:	4606      	mov	r6, r0
 8004a76:	d1d6      	bne.n	8004a26 <_svfiprintf_r+0x176>
 8004a78:	89ab      	ldrh	r3, [r5, #12]
 8004a7a:	065b      	lsls	r3, r3, #25
 8004a7c:	f53f af2c 	bmi.w	80048d8 <_svfiprintf_r+0x28>
 8004a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a82:	b01d      	add	sp, #116	; 0x74
 8004a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a88:	ab03      	add	r3, sp, #12
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	462a      	mov	r2, r5
 8004a8e:	4638      	mov	r0, r7
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <_svfiprintf_r+0x1fc>)
 8004a92:	a904      	add	r1, sp, #16
 8004a94:	f000 f87c 	bl	8004b90 <_printf_i>
 8004a98:	e7eb      	b.n	8004a72 <_svfiprintf_r+0x1c2>
 8004a9a:	bf00      	nop
 8004a9c:	080050fc 	.word	0x080050fc
 8004aa0:	08005102 	.word	0x08005102
 8004aa4:	08005106 	.word	0x08005106
 8004aa8:	00000000 	.word	0x00000000
 8004aac:	080047f9 	.word	0x080047f9

08004ab0 <_printf_common>:
 8004ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab4:	4616      	mov	r6, r2
 8004ab6:	4699      	mov	r9, r3
 8004ab8:	688a      	ldr	r2, [r1, #8]
 8004aba:	690b      	ldr	r3, [r1, #16]
 8004abc:	4607      	mov	r7, r0
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	bfb8      	it	lt
 8004ac2:	4613      	movlt	r3, r2
 8004ac4:	6033      	str	r3, [r6, #0]
 8004ac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aca:	460c      	mov	r4, r1
 8004acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ad0:	b10a      	cbz	r2, 8004ad6 <_printf_common+0x26>
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	6033      	str	r3, [r6, #0]
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	0699      	lsls	r1, r3, #26
 8004ada:	bf42      	ittt	mi
 8004adc:	6833      	ldrmi	r3, [r6, #0]
 8004ade:	3302      	addmi	r3, #2
 8004ae0:	6033      	strmi	r3, [r6, #0]
 8004ae2:	6825      	ldr	r5, [r4, #0]
 8004ae4:	f015 0506 	ands.w	r5, r5, #6
 8004ae8:	d106      	bne.n	8004af8 <_printf_common+0x48>
 8004aea:	f104 0a19 	add.w	sl, r4, #25
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	6832      	ldr	r2, [r6, #0]
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	42ab      	cmp	r3, r5
 8004af6:	dc28      	bgt.n	8004b4a <_printf_common+0x9a>
 8004af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004afc:	1e13      	subs	r3, r2, #0
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	bf18      	it	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	0692      	lsls	r2, r2, #26
 8004b06:	d42d      	bmi.n	8004b64 <_printf_common+0xb4>
 8004b08:	4649      	mov	r1, r9
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b10:	47c0      	blx	r8
 8004b12:	3001      	adds	r0, #1
 8004b14:	d020      	beq.n	8004b58 <_printf_common+0xa8>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	68e5      	ldr	r5, [r4, #12]
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	bf18      	it	ne
 8004b22:	2500      	movne	r5, #0
 8004b24:	6832      	ldr	r2, [r6, #0]
 8004b26:	f04f 0600 	mov.w	r6, #0
 8004b2a:	68a3      	ldr	r3, [r4, #8]
 8004b2c:	bf08      	it	eq
 8004b2e:	1aad      	subeq	r5, r5, r2
 8004b30:	6922      	ldr	r2, [r4, #16]
 8004b32:	bf08      	it	eq
 8004b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	bfc4      	itt	gt
 8004b3c:	1a9b      	subgt	r3, r3, r2
 8004b3e:	18ed      	addgt	r5, r5, r3
 8004b40:	341a      	adds	r4, #26
 8004b42:	42b5      	cmp	r5, r6
 8004b44:	d11a      	bne.n	8004b7c <_printf_common+0xcc>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e008      	b.n	8004b5c <_printf_common+0xac>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4652      	mov	r2, sl
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4638      	mov	r0, r7
 8004b52:	47c0      	blx	r8
 8004b54:	3001      	adds	r0, #1
 8004b56:	d103      	bne.n	8004b60 <_printf_common+0xb0>
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b60:	3501      	adds	r5, #1
 8004b62:	e7c4      	b.n	8004aee <_printf_common+0x3e>
 8004b64:	2030      	movs	r0, #48	; 0x30
 8004b66:	18e1      	adds	r1, r4, r3
 8004b68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b72:	4422      	add	r2, r4
 8004b74:	3302      	adds	r3, #2
 8004b76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b7a:	e7c5      	b.n	8004b08 <_printf_common+0x58>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	4622      	mov	r2, r4
 8004b80:	4649      	mov	r1, r9
 8004b82:	4638      	mov	r0, r7
 8004b84:	47c0      	blx	r8
 8004b86:	3001      	adds	r0, #1
 8004b88:	d0e6      	beq.n	8004b58 <_printf_common+0xa8>
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7d9      	b.n	8004b42 <_printf_common+0x92>
	...

08004b90 <_printf_i>:
 8004b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	7e0f      	ldrb	r7, [r1, #24]
 8004b96:	4691      	mov	r9, r2
 8004b98:	2f78      	cmp	r7, #120	; 0x78
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	469a      	mov	sl, r3
 8004ba0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ba6:	d807      	bhi.n	8004bb8 <_printf_i+0x28>
 8004ba8:	2f62      	cmp	r7, #98	; 0x62
 8004baa:	d80a      	bhi.n	8004bc2 <_printf_i+0x32>
 8004bac:	2f00      	cmp	r7, #0
 8004bae:	f000 80d9 	beq.w	8004d64 <_printf_i+0x1d4>
 8004bb2:	2f58      	cmp	r7, #88	; 0x58
 8004bb4:	f000 80a4 	beq.w	8004d00 <_printf_i+0x170>
 8004bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bc0:	e03a      	b.n	8004c38 <_printf_i+0xa8>
 8004bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bc6:	2b15      	cmp	r3, #21
 8004bc8:	d8f6      	bhi.n	8004bb8 <_printf_i+0x28>
 8004bca:	a101      	add	r1, pc, #4	; (adr r1, 8004bd0 <_printf_i+0x40>)
 8004bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bd0:	08004c29 	.word	0x08004c29
 8004bd4:	08004c3d 	.word	0x08004c3d
 8004bd8:	08004bb9 	.word	0x08004bb9
 8004bdc:	08004bb9 	.word	0x08004bb9
 8004be0:	08004bb9 	.word	0x08004bb9
 8004be4:	08004bb9 	.word	0x08004bb9
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004bb9 	.word	0x08004bb9
 8004bf0:	08004bb9 	.word	0x08004bb9
 8004bf4:	08004bb9 	.word	0x08004bb9
 8004bf8:	08004bb9 	.word	0x08004bb9
 8004bfc:	08004d4b 	.word	0x08004d4b
 8004c00:	08004c6d 	.word	0x08004c6d
 8004c04:	08004d2d 	.word	0x08004d2d
 8004c08:	08004bb9 	.word	0x08004bb9
 8004c0c:	08004bb9 	.word	0x08004bb9
 8004c10:	08004d6d 	.word	0x08004d6d
 8004c14:	08004bb9 	.word	0x08004bb9
 8004c18:	08004c6d 	.word	0x08004c6d
 8004c1c:	08004bb9 	.word	0x08004bb9
 8004c20:	08004bb9 	.word	0x08004bb9
 8004c24:	08004d35 	.word	0x08004d35
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	1d1a      	adds	r2, r3, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	602a      	str	r2, [r5, #0]
 8004c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0a4      	b.n	8004d86 <_printf_i+0x1f6>
 8004c3c:	6820      	ldr	r0, [r4, #0]
 8004c3e:	6829      	ldr	r1, [r5, #0]
 8004c40:	0606      	lsls	r6, r0, #24
 8004c42:	f101 0304 	add.w	r3, r1, #4
 8004c46:	d50a      	bpl.n	8004c5e <_printf_i+0xce>
 8004c48:	680e      	ldr	r6, [r1, #0]
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	da03      	bge.n	8004c58 <_printf_i+0xc8>
 8004c50:	232d      	movs	r3, #45	; 0x2d
 8004c52:	4276      	negs	r6, r6
 8004c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c58:	230a      	movs	r3, #10
 8004c5a:	485e      	ldr	r0, [pc, #376]	; (8004dd4 <_printf_i+0x244>)
 8004c5c:	e019      	b.n	8004c92 <_printf_i+0x102>
 8004c5e:	680e      	ldr	r6, [r1, #0]
 8004c60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c64:	602b      	str	r3, [r5, #0]
 8004c66:	bf18      	it	ne
 8004c68:	b236      	sxthne	r6, r6
 8004c6a:	e7ef      	b.n	8004c4c <_printf_i+0xbc>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	6820      	ldr	r0, [r4, #0]
 8004c70:	1d19      	adds	r1, r3, #4
 8004c72:	6029      	str	r1, [r5, #0]
 8004c74:	0601      	lsls	r1, r0, #24
 8004c76:	d501      	bpl.n	8004c7c <_printf_i+0xec>
 8004c78:	681e      	ldr	r6, [r3, #0]
 8004c7a:	e002      	b.n	8004c82 <_printf_i+0xf2>
 8004c7c:	0646      	lsls	r6, r0, #25
 8004c7e:	d5fb      	bpl.n	8004c78 <_printf_i+0xe8>
 8004c80:	881e      	ldrh	r6, [r3, #0]
 8004c82:	2f6f      	cmp	r7, #111	; 0x6f
 8004c84:	bf0c      	ite	eq
 8004c86:	2308      	moveq	r3, #8
 8004c88:	230a      	movne	r3, #10
 8004c8a:	4852      	ldr	r0, [pc, #328]	; (8004dd4 <_printf_i+0x244>)
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c92:	6865      	ldr	r5, [r4, #4]
 8004c94:	2d00      	cmp	r5, #0
 8004c96:	bfa8      	it	ge
 8004c98:	6821      	ldrge	r1, [r4, #0]
 8004c9a:	60a5      	str	r5, [r4, #8]
 8004c9c:	bfa4      	itt	ge
 8004c9e:	f021 0104 	bicge.w	r1, r1, #4
 8004ca2:	6021      	strge	r1, [r4, #0]
 8004ca4:	b90e      	cbnz	r6, 8004caa <_printf_i+0x11a>
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	d04d      	beq.n	8004d46 <_printf_i+0x1b6>
 8004caa:	4615      	mov	r5, r2
 8004cac:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cb0:	fb03 6711 	mls	r7, r3, r1, r6
 8004cb4:	5dc7      	ldrb	r7, [r0, r7]
 8004cb6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cba:	4637      	mov	r7, r6
 8004cbc:	42bb      	cmp	r3, r7
 8004cbe:	460e      	mov	r6, r1
 8004cc0:	d9f4      	bls.n	8004cac <_printf_i+0x11c>
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d10b      	bne.n	8004cde <_printf_i+0x14e>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	07de      	lsls	r6, r3, #31
 8004cca:	d508      	bpl.n	8004cde <_printf_i+0x14e>
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	6861      	ldr	r1, [r4, #4]
 8004cd0:	4299      	cmp	r1, r3
 8004cd2:	bfde      	ittt	le
 8004cd4:	2330      	movle	r3, #48	; 0x30
 8004cd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cde:	1b52      	subs	r2, r2, r5
 8004ce0:	6122      	str	r2, [r4, #16]
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	f8cd a000 	str.w	sl, [sp]
 8004cec:	aa03      	add	r2, sp, #12
 8004cee:	f7ff fedf 	bl	8004ab0 <_printf_common>
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d14c      	bne.n	8004d90 <_printf_i+0x200>
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfa:	b004      	add	sp, #16
 8004cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d00:	4834      	ldr	r0, [pc, #208]	; (8004dd4 <_printf_i+0x244>)
 8004d02:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d06:	6829      	ldr	r1, [r5, #0]
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d0e:	6029      	str	r1, [r5, #0]
 8004d10:	061d      	lsls	r5, r3, #24
 8004d12:	d514      	bpl.n	8004d3e <_printf_i+0x1ae>
 8004d14:	07df      	lsls	r7, r3, #31
 8004d16:	bf44      	itt	mi
 8004d18:	f043 0320 	orrmi.w	r3, r3, #32
 8004d1c:	6023      	strmi	r3, [r4, #0]
 8004d1e:	b91e      	cbnz	r6, 8004d28 <_printf_i+0x198>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	f023 0320 	bic.w	r3, r3, #32
 8004d26:	6023      	str	r3, [r4, #0]
 8004d28:	2310      	movs	r3, #16
 8004d2a:	e7af      	b.n	8004c8c <_printf_i+0xfc>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	f043 0320 	orr.w	r3, r3, #32
 8004d32:	6023      	str	r3, [r4, #0]
 8004d34:	2378      	movs	r3, #120	; 0x78
 8004d36:	4828      	ldr	r0, [pc, #160]	; (8004dd8 <_printf_i+0x248>)
 8004d38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d3c:	e7e3      	b.n	8004d06 <_printf_i+0x176>
 8004d3e:	0659      	lsls	r1, r3, #25
 8004d40:	bf48      	it	mi
 8004d42:	b2b6      	uxthmi	r6, r6
 8004d44:	e7e6      	b.n	8004d14 <_printf_i+0x184>
 8004d46:	4615      	mov	r5, r2
 8004d48:	e7bb      	b.n	8004cc2 <_printf_i+0x132>
 8004d4a:	682b      	ldr	r3, [r5, #0]
 8004d4c:	6826      	ldr	r6, [r4, #0]
 8004d4e:	1d18      	adds	r0, r3, #4
 8004d50:	6961      	ldr	r1, [r4, #20]
 8004d52:	6028      	str	r0, [r5, #0]
 8004d54:	0635      	lsls	r5, r6, #24
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	d501      	bpl.n	8004d5e <_printf_i+0x1ce>
 8004d5a:	6019      	str	r1, [r3, #0]
 8004d5c:	e002      	b.n	8004d64 <_printf_i+0x1d4>
 8004d5e:	0670      	lsls	r0, r6, #25
 8004d60:	d5fb      	bpl.n	8004d5a <_printf_i+0x1ca>
 8004d62:	8019      	strh	r1, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	4615      	mov	r5, r2
 8004d68:	6123      	str	r3, [r4, #16]
 8004d6a:	e7ba      	b.n	8004ce2 <_printf_i+0x152>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	2100      	movs	r1, #0
 8004d70:	1d1a      	adds	r2, r3, #4
 8004d72:	602a      	str	r2, [r5, #0]
 8004d74:	681d      	ldr	r5, [r3, #0]
 8004d76:	6862      	ldr	r2, [r4, #4]
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f000 f82f 	bl	8004ddc <memchr>
 8004d7e:	b108      	cbz	r0, 8004d84 <_printf_i+0x1f4>
 8004d80:	1b40      	subs	r0, r0, r5
 8004d82:	6060      	str	r0, [r4, #4]
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	6123      	str	r3, [r4, #16]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d8e:	e7a8      	b.n	8004ce2 <_printf_i+0x152>
 8004d90:	462a      	mov	r2, r5
 8004d92:	4649      	mov	r1, r9
 8004d94:	4640      	mov	r0, r8
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	47d0      	blx	sl
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d0ab      	beq.n	8004cf6 <_printf_i+0x166>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	079b      	lsls	r3, r3, #30
 8004da2:	d413      	bmi.n	8004dcc <_printf_i+0x23c>
 8004da4:	68e0      	ldr	r0, [r4, #12]
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	4298      	cmp	r0, r3
 8004daa:	bfb8      	it	lt
 8004dac:	4618      	movlt	r0, r3
 8004dae:	e7a4      	b.n	8004cfa <_printf_i+0x16a>
 8004db0:	2301      	movs	r3, #1
 8004db2:	4632      	mov	r2, r6
 8004db4:	4649      	mov	r1, r9
 8004db6:	4640      	mov	r0, r8
 8004db8:	47d0      	blx	sl
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d09b      	beq.n	8004cf6 <_printf_i+0x166>
 8004dbe:	3501      	adds	r5, #1
 8004dc0:	68e3      	ldr	r3, [r4, #12]
 8004dc2:	9903      	ldr	r1, [sp, #12]
 8004dc4:	1a5b      	subs	r3, r3, r1
 8004dc6:	42ab      	cmp	r3, r5
 8004dc8:	dcf2      	bgt.n	8004db0 <_printf_i+0x220>
 8004dca:	e7eb      	b.n	8004da4 <_printf_i+0x214>
 8004dcc:	2500      	movs	r5, #0
 8004dce:	f104 0619 	add.w	r6, r4, #25
 8004dd2:	e7f5      	b.n	8004dc0 <_printf_i+0x230>
 8004dd4:	0800510d 	.word	0x0800510d
 8004dd8:	0800511e 	.word	0x0800511e

08004ddc <memchr>:
 8004ddc:	4603      	mov	r3, r0
 8004dde:	b510      	push	{r4, lr}
 8004de0:	b2c9      	uxtb	r1, r1
 8004de2:	4402      	add	r2, r0
 8004de4:	4293      	cmp	r3, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	d101      	bne.n	8004dee <memchr+0x12>
 8004dea:	2000      	movs	r0, #0
 8004dec:	e003      	b.n	8004df6 <memchr+0x1a>
 8004dee:	7804      	ldrb	r4, [r0, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	428c      	cmp	r4, r1
 8004df4:	d1f6      	bne.n	8004de4 <memchr+0x8>
 8004df6:	bd10      	pop	{r4, pc}

08004df8 <memcpy>:
 8004df8:	440a      	add	r2, r1
 8004dfa:	4291      	cmp	r1, r2
 8004dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e00:	d100      	bne.n	8004e04 <memcpy+0xc>
 8004e02:	4770      	bx	lr
 8004e04:	b510      	push	{r4, lr}
 8004e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e0a:	4291      	cmp	r1, r2
 8004e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e10:	d1f9      	bne.n	8004e06 <memcpy+0xe>
 8004e12:	bd10      	pop	{r4, pc}

08004e14 <memmove>:
 8004e14:	4288      	cmp	r0, r1
 8004e16:	b510      	push	{r4, lr}
 8004e18:	eb01 0402 	add.w	r4, r1, r2
 8004e1c:	d902      	bls.n	8004e24 <memmove+0x10>
 8004e1e:	4284      	cmp	r4, r0
 8004e20:	4623      	mov	r3, r4
 8004e22:	d807      	bhi.n	8004e34 <memmove+0x20>
 8004e24:	1e43      	subs	r3, r0, #1
 8004e26:	42a1      	cmp	r1, r4
 8004e28:	d008      	beq.n	8004e3c <memmove+0x28>
 8004e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e32:	e7f8      	b.n	8004e26 <memmove+0x12>
 8004e34:	4601      	mov	r1, r0
 8004e36:	4402      	add	r2, r0
 8004e38:	428a      	cmp	r2, r1
 8004e3a:	d100      	bne.n	8004e3e <memmove+0x2a>
 8004e3c:	bd10      	pop	{r4, pc}
 8004e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e46:	e7f7      	b.n	8004e38 <memmove+0x24>

08004e48 <_free_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	d040      	beq.n	8004ed2 <_free_r+0x8a>
 8004e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e54:	1f0c      	subs	r4, r1, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bfb8      	it	lt
 8004e5a:	18e4      	addlt	r4, r4, r3
 8004e5c:	f000 f910 	bl	8005080 <__malloc_lock>
 8004e60:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <_free_r+0x8c>)
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	b933      	cbnz	r3, 8004e74 <_free_r+0x2c>
 8004e66:	6063      	str	r3, [r4, #4]
 8004e68:	6014      	str	r4, [r2, #0]
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e70:	f000 b90c 	b.w	800508c <__malloc_unlock>
 8004e74:	42a3      	cmp	r3, r4
 8004e76:	d908      	bls.n	8004e8a <_free_r+0x42>
 8004e78:	6820      	ldr	r0, [r4, #0]
 8004e7a:	1821      	adds	r1, r4, r0
 8004e7c:	428b      	cmp	r3, r1
 8004e7e:	bf01      	itttt	eq
 8004e80:	6819      	ldreq	r1, [r3, #0]
 8004e82:	685b      	ldreq	r3, [r3, #4]
 8004e84:	1809      	addeq	r1, r1, r0
 8004e86:	6021      	streq	r1, [r4, #0]
 8004e88:	e7ed      	b.n	8004e66 <_free_r+0x1e>
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	b10b      	cbz	r3, 8004e94 <_free_r+0x4c>
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	d9fa      	bls.n	8004e8a <_free_r+0x42>
 8004e94:	6811      	ldr	r1, [r2, #0]
 8004e96:	1850      	adds	r0, r2, r1
 8004e98:	42a0      	cmp	r0, r4
 8004e9a:	d10b      	bne.n	8004eb4 <_free_r+0x6c>
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	4401      	add	r1, r0
 8004ea0:	1850      	adds	r0, r2, r1
 8004ea2:	4283      	cmp	r3, r0
 8004ea4:	6011      	str	r1, [r2, #0]
 8004ea6:	d1e0      	bne.n	8004e6a <_free_r+0x22>
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4401      	add	r1, r0
 8004eae:	6011      	str	r1, [r2, #0]
 8004eb0:	6053      	str	r3, [r2, #4]
 8004eb2:	e7da      	b.n	8004e6a <_free_r+0x22>
 8004eb4:	d902      	bls.n	8004ebc <_free_r+0x74>
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	e7d6      	b.n	8004e6a <_free_r+0x22>
 8004ebc:	6820      	ldr	r0, [r4, #0]
 8004ebe:	1821      	adds	r1, r4, r0
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	bf01      	itttt	eq
 8004ec4:	6819      	ldreq	r1, [r3, #0]
 8004ec6:	685b      	ldreq	r3, [r3, #4]
 8004ec8:	1809      	addeq	r1, r1, r0
 8004eca:	6021      	streq	r1, [r4, #0]
 8004ecc:	6063      	str	r3, [r4, #4]
 8004ece:	6054      	str	r4, [r2, #4]
 8004ed0:	e7cb      	b.n	8004e6a <_free_r+0x22>
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	20000578 	.word	0x20000578

08004ed8 <sbrk_aligned>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	4e0e      	ldr	r6, [pc, #56]	; (8004f14 <sbrk_aligned+0x3c>)
 8004edc:	460c      	mov	r4, r1
 8004ede:	6831      	ldr	r1, [r6, #0]
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	b911      	cbnz	r1, 8004eea <sbrk_aligned+0x12>
 8004ee4:	f000 f8bc 	bl	8005060 <_sbrk_r>
 8004ee8:	6030      	str	r0, [r6, #0]
 8004eea:	4621      	mov	r1, r4
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 f8b7 	bl	8005060 <_sbrk_r>
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	d00a      	beq.n	8004f0c <sbrk_aligned+0x34>
 8004ef6:	1cc4      	adds	r4, r0, #3
 8004ef8:	f024 0403 	bic.w	r4, r4, #3
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d007      	beq.n	8004f10 <sbrk_aligned+0x38>
 8004f00:	1a21      	subs	r1, r4, r0
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 f8ac 	bl	8005060 <_sbrk_r>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d101      	bne.n	8004f10 <sbrk_aligned+0x38>
 8004f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f10:	4620      	mov	r0, r4
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
 8004f14:	2000057c 	.word	0x2000057c

08004f18 <_malloc_r>:
 8004f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1c:	1ccd      	adds	r5, r1, #3
 8004f1e:	f025 0503 	bic.w	r5, r5, #3
 8004f22:	3508      	adds	r5, #8
 8004f24:	2d0c      	cmp	r5, #12
 8004f26:	bf38      	it	cc
 8004f28:	250c      	movcc	r5, #12
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	db01      	blt.n	8004f34 <_malloc_r+0x1c>
 8004f30:	42a9      	cmp	r1, r5
 8004f32:	d905      	bls.n	8004f40 <_malloc_r+0x28>
 8004f34:	230c      	movs	r3, #12
 8004f36:	2600      	movs	r6, #0
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f40:	4e2e      	ldr	r6, [pc, #184]	; (8004ffc <_malloc_r+0xe4>)
 8004f42:	f000 f89d 	bl	8005080 <__malloc_lock>
 8004f46:	6833      	ldr	r3, [r6, #0]
 8004f48:	461c      	mov	r4, r3
 8004f4a:	bb34      	cbnz	r4, 8004f9a <_malloc_r+0x82>
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f7ff ffc2 	bl	8004ed8 <sbrk_aligned>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	4604      	mov	r4, r0
 8004f58:	d14d      	bne.n	8004ff6 <_malloc_r+0xde>
 8004f5a:	6834      	ldr	r4, [r6, #0]
 8004f5c:	4626      	mov	r6, r4
 8004f5e:	2e00      	cmp	r6, #0
 8004f60:	d140      	bne.n	8004fe4 <_malloc_r+0xcc>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	4631      	mov	r1, r6
 8004f66:	4638      	mov	r0, r7
 8004f68:	eb04 0803 	add.w	r8, r4, r3
 8004f6c:	f000 f878 	bl	8005060 <_sbrk_r>
 8004f70:	4580      	cmp	r8, r0
 8004f72:	d13a      	bne.n	8004fea <_malloc_r+0xd2>
 8004f74:	6821      	ldr	r1, [r4, #0]
 8004f76:	3503      	adds	r5, #3
 8004f78:	1a6d      	subs	r5, r5, r1
 8004f7a:	f025 0503 	bic.w	r5, r5, #3
 8004f7e:	3508      	adds	r5, #8
 8004f80:	2d0c      	cmp	r5, #12
 8004f82:	bf38      	it	cc
 8004f84:	250c      	movcc	r5, #12
 8004f86:	4638      	mov	r0, r7
 8004f88:	4629      	mov	r1, r5
 8004f8a:	f7ff ffa5 	bl	8004ed8 <sbrk_aligned>
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d02b      	beq.n	8004fea <_malloc_r+0xd2>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	442b      	add	r3, r5
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	e00e      	b.n	8004fb8 <_malloc_r+0xa0>
 8004f9a:	6822      	ldr	r2, [r4, #0]
 8004f9c:	1b52      	subs	r2, r2, r5
 8004f9e:	d41e      	bmi.n	8004fde <_malloc_r+0xc6>
 8004fa0:	2a0b      	cmp	r2, #11
 8004fa2:	d916      	bls.n	8004fd2 <_malloc_r+0xba>
 8004fa4:	1961      	adds	r1, r4, r5
 8004fa6:	42a3      	cmp	r3, r4
 8004fa8:	6025      	str	r5, [r4, #0]
 8004faa:	bf18      	it	ne
 8004fac:	6059      	strne	r1, [r3, #4]
 8004fae:	6863      	ldr	r3, [r4, #4]
 8004fb0:	bf08      	it	eq
 8004fb2:	6031      	streq	r1, [r6, #0]
 8004fb4:	5162      	str	r2, [r4, r5]
 8004fb6:	604b      	str	r3, [r1, #4]
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f104 060b 	add.w	r6, r4, #11
 8004fbe:	f000 f865 	bl	800508c <__malloc_unlock>
 8004fc2:	f026 0607 	bic.w	r6, r6, #7
 8004fc6:	1d23      	adds	r3, r4, #4
 8004fc8:	1af2      	subs	r2, r6, r3
 8004fca:	d0b6      	beq.n	8004f3a <_malloc_r+0x22>
 8004fcc:	1b9b      	subs	r3, r3, r6
 8004fce:	50a3      	str	r3, [r4, r2]
 8004fd0:	e7b3      	b.n	8004f3a <_malloc_r+0x22>
 8004fd2:	6862      	ldr	r2, [r4, #4]
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	bf0c      	ite	eq
 8004fd8:	6032      	streq	r2, [r6, #0]
 8004fda:	605a      	strne	r2, [r3, #4]
 8004fdc:	e7ec      	b.n	8004fb8 <_malloc_r+0xa0>
 8004fde:	4623      	mov	r3, r4
 8004fe0:	6864      	ldr	r4, [r4, #4]
 8004fe2:	e7b2      	b.n	8004f4a <_malloc_r+0x32>
 8004fe4:	4634      	mov	r4, r6
 8004fe6:	6876      	ldr	r6, [r6, #4]
 8004fe8:	e7b9      	b.n	8004f5e <_malloc_r+0x46>
 8004fea:	230c      	movs	r3, #12
 8004fec:	4638      	mov	r0, r7
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	f000 f84c 	bl	800508c <__malloc_unlock>
 8004ff4:	e7a1      	b.n	8004f3a <_malloc_r+0x22>
 8004ff6:	6025      	str	r5, [r4, #0]
 8004ff8:	e7de      	b.n	8004fb8 <_malloc_r+0xa0>
 8004ffa:	bf00      	nop
 8004ffc:	20000578 	.word	0x20000578

08005000 <_realloc_r>:
 8005000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005004:	4680      	mov	r8, r0
 8005006:	4614      	mov	r4, r2
 8005008:	460e      	mov	r6, r1
 800500a:	b921      	cbnz	r1, 8005016 <_realloc_r+0x16>
 800500c:	4611      	mov	r1, r2
 800500e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005012:	f7ff bf81 	b.w	8004f18 <_malloc_r>
 8005016:	b92a      	cbnz	r2, 8005024 <_realloc_r+0x24>
 8005018:	f7ff ff16 	bl	8004e48 <_free_r>
 800501c:	4625      	mov	r5, r4
 800501e:	4628      	mov	r0, r5
 8005020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005024:	f000 f838 	bl	8005098 <_malloc_usable_size_r>
 8005028:	4284      	cmp	r4, r0
 800502a:	4607      	mov	r7, r0
 800502c:	d802      	bhi.n	8005034 <_realloc_r+0x34>
 800502e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005032:	d812      	bhi.n	800505a <_realloc_r+0x5a>
 8005034:	4621      	mov	r1, r4
 8005036:	4640      	mov	r0, r8
 8005038:	f7ff ff6e 	bl	8004f18 <_malloc_r>
 800503c:	4605      	mov	r5, r0
 800503e:	2800      	cmp	r0, #0
 8005040:	d0ed      	beq.n	800501e <_realloc_r+0x1e>
 8005042:	42bc      	cmp	r4, r7
 8005044:	4622      	mov	r2, r4
 8005046:	4631      	mov	r1, r6
 8005048:	bf28      	it	cs
 800504a:	463a      	movcs	r2, r7
 800504c:	f7ff fed4 	bl	8004df8 <memcpy>
 8005050:	4631      	mov	r1, r6
 8005052:	4640      	mov	r0, r8
 8005054:	f7ff fef8 	bl	8004e48 <_free_r>
 8005058:	e7e1      	b.n	800501e <_realloc_r+0x1e>
 800505a:	4635      	mov	r5, r6
 800505c:	e7df      	b.n	800501e <_realloc_r+0x1e>
	...

08005060 <_sbrk_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	2300      	movs	r3, #0
 8005064:	4d05      	ldr	r5, [pc, #20]	; (800507c <_sbrk_r+0x1c>)
 8005066:	4604      	mov	r4, r0
 8005068:	4608      	mov	r0, r1
 800506a:	602b      	str	r3, [r5, #0]
 800506c:	f7fc fec4 	bl	8001df8 <_sbrk>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_sbrk_r+0x1a>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	b103      	cbz	r3, 800507a <_sbrk_r+0x1a>
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	20000580 	.word	0x20000580

08005080 <__malloc_lock>:
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <__malloc_lock+0x8>)
 8005082:	f000 b811 	b.w	80050a8 <__retarget_lock_acquire_recursive>
 8005086:	bf00      	nop
 8005088:	20000584 	.word	0x20000584

0800508c <__malloc_unlock>:
 800508c:	4801      	ldr	r0, [pc, #4]	; (8005094 <__malloc_unlock+0x8>)
 800508e:	f000 b80c 	b.w	80050aa <__retarget_lock_release_recursive>
 8005092:	bf00      	nop
 8005094:	20000584 	.word	0x20000584

08005098 <_malloc_usable_size_r>:
 8005098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800509c:	1f18      	subs	r0, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bfbc      	itt	lt
 80050a2:	580b      	ldrlt	r3, [r1, r0]
 80050a4:	18c0      	addlt	r0, r0, r3
 80050a6:	4770      	bx	lr

080050a8 <__retarget_lock_acquire_recursive>:
 80050a8:	4770      	bx	lr

080050aa <__retarget_lock_release_recursive>:
 80050aa:	4770      	bx	lr

080050ac <_init>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	bf00      	nop
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr

080050b8 <_fini>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	bf00      	nop
 80050bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050be:	bc08      	pop	{r3}
 80050c0:	469e      	mov	lr, r3
 80050c2:	4770      	bx	lr
