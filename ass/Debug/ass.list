
ass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800511c  0800511c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800511c  0800511c  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800511c  0800511c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000009c  080051c0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080051c0  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c444  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242e  00000000  00000000  0002c509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  0002f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003652  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f50  00000000  00000000  00033b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b185  00000000  00000000  00044ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfc67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d88  00000000  00000000  000cfcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005098 	.word	0x08005098

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08005098 	.word	0x08005098

0800014c <fsm_automatic_1_run>:
 */


#include <fsm_automatic_1.h>

void fsm_automatic_1_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status_ver){
 8000150:	4b56      	ldr	r3, [pc, #344]	; (80002ac <fsm_automatic_1_run+0x160>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b0e      	cmp	r3, #14
 8000156:	f200 809a 	bhi.w	800028e <fsm_automatic_1_run+0x142>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic_1_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800019d 	.word	0x0800019d
 8000164:	0800028f 	.word	0x0800028f
 8000168:	0800028f 	.word	0x0800028f
 800016c:	0800028f 	.word	0x0800028f
 8000170:	0800028f 	.word	0x0800028f
 8000174:	0800028f 	.word	0x0800028f
 8000178:	0800028f 	.word	0x0800028f
 800017c:	0800028f 	.word	0x0800028f
 8000180:	080001c3 	.word	0x080001c3
 8000184:	080001f1 	.word	0x080001f1
 8000188:	0800021f 	.word	0x0800021f
 800018c:	0800028f 	.word	0x0800028f
 8000190:	0800024d 	.word	0x0800024d
 8000194:	08000263 	.word	0x08000263
 8000198:	08000279 	.word	0x08000279
	case INIT:

		SetOffVer();
 800019c:	f000 fdc2 	bl	8000d24 <SetOffVer>
		led12 = timered;
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a43      	ldr	r2, [pc, #268]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001a6:	6013      	str	r3, [r2, #0]
		status_ver = AUTO_RED;
 80001a8:	4b40      	ldr	r3, [pc, #256]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	601a      	str	r2, [r3, #0]

		setTimer1(timeTimer(timered));
 80001ae:	4b40      	ldr	r3, [pc, #256]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fb7a 	bl	80008ac <timeTimer>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 fba8 	bl	8001910 <setTimer1>
		break;
 80001c0:	e072      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
	case AUTO_RED:
		SetRedVer();
 80001c2:	f000 fdf7 	bl	8000db4 <SetRedVer>
		if (timer1_flag == 1){
 80001c6:	4b3c      	ldr	r3, [pc, #240]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d161      	bne.n	8000292 <fsm_automatic_1_run+0x146>
			status_ver = AUTO_GREEN;
 80001ce:	4b37      	ldr	r3, [pc, #220]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001d0:	2209      	movs	r2, #9
 80001d2:	601a      	str	r2, [r3, #0]
			led12 = timegreen;
 80001d4:	4b39      	ldr	r3, [pc, #228]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a36      	ldr	r2, [pc, #216]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001da:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timegreen));
 80001dc:	4b37      	ldr	r3, [pc, #220]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fb63 	bl	80008ac <timeTimer>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fb91 	bl	8001910 <setTimer1>
		}

		break;
 80001ee:	e050      	b.n	8000292 <fsm_automatic_1_run+0x146>
	case AUTO_GREEN:

		SetGreenVer();
 80001f0:	f000 fdf2 	bl	8000dd8 <SetGreenVer>
		if (timer1_flag == 1){
 80001f4:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d14c      	bne.n	8000296 <fsm_automatic_1_run+0x14a>
			status_ver = AUTO_YELLOW;
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001fe:	220a      	movs	r2, #10
 8000200:	601a      	str	r2, [r3, #0]
			led12 = timeyellow;
 8000202:	4b2f      	ldr	r3, [pc, #188]	; (80002c0 <fsm_automatic_1_run+0x174>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a2b      	ldr	r2, [pc, #172]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000208:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timeyellow));
 800020a:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <fsm_automatic_1_run+0x174>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fb4c 	bl	80008ac <timeTimer>
 8000214:	4603      	mov	r3, r0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fb7a 	bl	8001910 <setTimer1>
		}

		break;
 800021c:	e03b      	b.n	8000296 <fsm_automatic_1_run+0x14a>
	case AUTO_YELLOW:

		SetYellowVer();
 800021e:	f000 fded 	bl	8000dfc <SetYellowVer>
		if (timer1_flag == 1){
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d137      	bne.n	800029a <fsm_automatic_1_run+0x14e>
			status_ver = AUTO_RED;
 800022a:	4b20      	ldr	r3, [pc, #128]	; (80002ac <fsm_automatic_1_run+0x160>)
 800022c:	2208      	movs	r2, #8
 800022e:	601a      	str	r2, [r3, #0]
			led12 = timered;
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <fsm_automatic_1_run+0x164>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000236:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timered));
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <fsm_automatic_1_run+0x164>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fb35 	bl	80008ac <timeTimer>
 8000242:	4603      	mov	r3, r0
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fb63 	bl	8001910 <setTimer1>
		}

		break;
 800024a:	e026      	b.n	800029a <fsm_automatic_1_run+0x14e>
	case MODIFY_RED:
		if (timer1_flag == 1){
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d124      	bne.n	800029e <fsm_automatic_1_run+0x152>
			BlinkyRedVer();
 8000254:	f000 fcde 	bl	8000c14 <BlinkyRedVer>
			setTimer1(500);
 8000258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025c:	f001 fb58 	bl	8001910 <setTimer1>
		}
		break;
 8000260:	e01d      	b.n	800029e <fsm_automatic_1_run+0x152>
	case MODIFY_GREEN:
		if (timer1_flag == 1){
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d11b      	bne.n	80002a2 <fsm_automatic_1_run+0x156>
			BlinkyGreenVer();
 800026a:	f000 fce5 	bl	8000c38 <BlinkyGreenVer>
			setTimer1(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f001 fb4d 	bl	8001910 <setTimer1>
		}
		break;
 8000276:	e014      	b.n	80002a2 <fsm_automatic_1_run+0x156>
	case MODIFY_YELLOW:
		if (timer1_flag == 1){
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d112      	bne.n	80002a6 <fsm_automatic_1_run+0x15a>
			BlinkyYellowVer();
 8000280:	f000 fcec 	bl	8000c5c <BlinkyYellowVer>
			setTimer1(500);
 8000284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000288:	f001 fb42 	bl	8001910 <setTimer1>
		}
		break;
 800028c:	e00b      	b.n	80002a6 <fsm_automatic_1_run+0x15a>
	default:
		break;
 800028e:	bf00      	nop
 8000290:	e00a      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000292:	bf00      	nop
 8000294:	e008      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000296:	bf00      	nop
 8000298:	e006      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029a:	bf00      	nop
 800029c:	e004      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029e:	bf00      	nop
 80002a0:	e002      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a2:	bf00      	nop
 80002a4:	e000      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a6:	bf00      	nop
	}

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	200000bc 	.word	0x200000bc
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	20000018 	.word	0x20000018
 80002b8:	2000053c 	.word	0x2000053c
 80002bc:	20000010 	.word	0x20000010
 80002c0:	20000014 	.word	0x20000014

080002c4 <fsm_automatic_2_run>:
 *      Author: pc
 */

#include "fsm_automatic_2.h"

void fsm_automatic_2_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch (status_hor){
 80002c8:	4b56      	ldr	r3, [pc, #344]	; (8000424 <fsm_automatic_2_run+0x160>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b0e      	cmp	r3, #14
 80002ce:	f200 809a 	bhi.w	8000406 <fsm_automatic_2_run+0x142>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_2_run+0x14>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	08000315 	.word	0x08000315
 80002dc:	08000407 	.word	0x08000407
 80002e0:	08000407 	.word	0x08000407
 80002e4:	08000407 	.word	0x08000407
 80002e8:	08000407 	.word	0x08000407
 80002ec:	08000407 	.word	0x08000407
 80002f0:	08000407 	.word	0x08000407
 80002f4:	08000407 	.word	0x08000407
 80002f8:	0800033b 	.word	0x0800033b
 80002fc:	08000369 	.word	0x08000369
 8000300:	08000397 	.word	0x08000397
 8000304:	08000407 	.word	0x08000407
 8000308:	080003c5 	.word	0x080003c5
 800030c:	080003db 	.word	0x080003db
 8000310:	080003f1 	.word	0x080003f1
	case INIT:
		SetOffHor();
 8000314:	f000 fd84 	bl	8000e20 <SetOffHor>
		led34 = timegreen;
 8000318:	4b43      	ldr	r3, [pc, #268]	; (8000428 <fsm_automatic_2_run+0x164>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a43      	ldr	r2, [pc, #268]	; (800042c <fsm_automatic_2_run+0x168>)
 800031e:	6013      	str	r3, [r2, #0]
		status_hor = AUTO_GREEN;
 8000320:	4b40      	ldr	r3, [pc, #256]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000322:	2209      	movs	r2, #9
 8000324:	601a      	str	r2, [r3, #0]
		setTimer2(timeTimer(timegreen));
 8000326:	4b40      	ldr	r3, [pc, #256]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fabe 	bl	80008ac <timeTimer>
 8000330:	4603      	mov	r3, r0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fb06 	bl	8001944 <setTimer2>
		break;
 8000338:	e072      	b.n	8000420 <fsm_automatic_2_run+0x15c>
	case AUTO_RED :
		SetRedHor();
 800033a:	f000 fd83 	bl	8000e44 <SetRedHor>
		if (timer2_flag == 1){
 800033e:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <fsm_automatic_2_run+0x16c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d161      	bne.n	800040a <fsm_automatic_2_run+0x146>
			status_hor = AUTO_GREEN;
 8000346:	4b37      	ldr	r3, [pc, #220]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000348:	2209      	movs	r2, #9
 800034a:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <fsm_automatic_2_run+0x164>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <fsm_automatic_2_run+0x168>)
 8000352:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timegreen));
 8000354:	4b34      	ldr	r3, [pc, #208]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 faa7 	bl	80008ac <timeTimer>
 800035e:	4603      	mov	r3, r0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 faef 	bl	8001944 <setTimer2>
		}

		break;
 8000366:	e050      	b.n	800040a <fsm_automatic_2_run+0x146>
	case AUTO_GREEN:

		SetGreenHor();
 8000368:	f000 fd7e 	bl	8000e68 <SetGreenHor>
		if (timer2_flag == 1){
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d14c      	bne.n	800040e <fsm_automatic_2_run+0x14a>
			status_hor = AUTO_YELLOW;
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000376:	220a      	movs	r2, #10
 8000378:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <fsm_automatic_2_run+0x170>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a2b      	ldr	r2, [pc, #172]	; (800042c <fsm_automatic_2_run+0x168>)
 8000380:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timeyellow));
 8000382:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <fsm_automatic_2_run+0x170>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fa90 	bl	80008ac <timeTimer>
 800038c:	4603      	mov	r3, r0
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fad8 	bl	8001944 <setTimer2>
		}

		break;
 8000394:	e03b      	b.n	800040e <fsm_automatic_2_run+0x14a>
	case AUTO_YELLOW:
		SetYellowHor();
 8000396:	f000 fd79 	bl	8000e8c <SetYellowHor>
		if (timer2_flag == 1){
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d137      	bne.n	8000412 <fsm_automatic_2_run+0x14e>
			status_hor = AUTO_RED;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <fsm_automatic_2_run+0x160>)
 80003a4:	2208      	movs	r2, #8
 80003a6:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1f      	ldr	r2, [pc, #124]	; (800042c <fsm_automatic_2_run+0x168>)
 80003ae:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timered));
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fa79 	bl	80008ac <timeTimer>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fac1 	bl	8001944 <setTimer2>
		}
		break;
 80003c2:	e026      	b.n	8000412 <fsm_automatic_2_run+0x14e>
	case MODIFY_RED:
		if (timer2_flag == 1){
 80003c4:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d124      	bne.n	8000416 <fsm_automatic_2_run+0x152>
			BlinkyRedHor();
 80003cc:	f000 fc56 	bl	8000c7c <BlinkyRedHor>
			setTimer2(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f001 fab6 	bl	8001944 <setTimer2>
		}
		break;
 80003d8:	e01d      	b.n	8000416 <fsm_automatic_2_run+0x152>
	case MODIFY_GREEN:
		if (timer2_flag == 1){
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d11b      	bne.n	800041a <fsm_automatic_2_run+0x156>
			BlinkyGreenHor();
 80003e2:	f000 fc5d 	bl	8000ca0 <BlinkyGreenHor>
			setTimer2(500);
 80003e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ea:	f001 faab 	bl	8001944 <setTimer2>
		}
		break;
 80003ee:	e014      	b.n	800041a <fsm_automatic_2_run+0x156>
	case MODIFY_YELLOW:
		if (timer2_flag == 1){
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d112      	bne.n	800041e <fsm_automatic_2_run+0x15a>
			BlinkyYellowHor();
 80003f8:	f000 fc64 	bl	8000cc4 <BlinkyYellowHor>
			setTimer2(500);
 80003fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000400:	f001 faa0 	bl	8001944 <setTimer2>
		}
		break;
 8000404:	e00b      	b.n	800041e <fsm_automatic_2_run+0x15a>
	default:
		break;
 8000406:	bf00      	nop
 8000408:	e00a      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040a:	bf00      	nop
 800040c:	e008      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040e:	bf00      	nop
 8000410:	e006      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000412:	bf00      	nop
 8000414:	e004      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000416:	bf00      	nop
 8000418:	e002      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041a:	bf00      	nop
 800041c:	e000      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041e:	bf00      	nop
	}

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000c0 	.word	0x200000c0
 8000428:	20000010 	.word	0x20000010
 800042c:	2000001c 	.word	0x2000001c
 8000430:	20000540 	.word	0x20000540
 8000434:	20000014 	.word	0x20000014
 8000438:	2000000c 	.word	0x2000000c

0800043c <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	switch (status_mode){
 8000440:	4b89      	ldr	r3, [pc, #548]	; (8000668 <fsm_mode_run+0x22c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b04      	cmp	r3, #4
 8000446:	f200 8103 	bhi.w	8000650 <fsm_mode_run+0x214>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_mode_run+0x14>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000465 	.word	0x08000465
 8000454:	0800048b 	.word	0x0800048b
 8000458:	080004dd 	.word	0x080004dd
 800045c:	08000565 	.word	0x08000565
 8000460:	080005ed 	.word	0x080005ed
	case INIT:
		status_mode = MODE1;
 8000464:	4b80      	ldr	r3, [pc, #512]	; (8000668 <fsm_mode_run+0x22c>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
		status_ver = INIT;
 800046a:	4b80      	ldr	r3, [pc, #512]	; (800066c <fsm_mode_run+0x230>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
		status_hor = INIT;
 8000470:	4b7f      	ldr	r3, [pc, #508]	; (8000670 <fsm_mode_run+0x234>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
		status_pedes = Pedes_Off;
 8000476:	4b7f      	ldr	r3, [pc, #508]	; (8000674 <fsm_mode_run+0x238>)
 8000478:	2228      	movs	r2, #40	; 0x28
 800047a:	601a      	str	r2, [r3, #0]
		status_led7seg = INIT;
 800047c:	4b7e      	ldr	r3, [pc, #504]	; (8000678 <fsm_mode_run+0x23c>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
		index_led = 0;
 8000482:	4b7e      	ldr	r3, [pc, #504]	; (800067c <fsm_mode_run+0x240>)
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
		//setTimer1(500);
		break;
 8000488:	e0eb      	b.n	8000662 <fsm_mode_run+0x226>
	case MODE1 :

		if (isButtonflag(but1) == 1){
 800048a:	4b7d      	ldr	r3, [pc, #500]	; (8000680 <fsm_mode_run+0x244>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fa1a 	bl	80008c8 <isButtonflag>
 8000494:	4603      	mov	r3, r0
 8000496:	2b01      	cmp	r3, #1
 8000498:	f040 80dc 	bne.w	8000654 <fsm_mode_run+0x218>
			clearTimer1();
 800049c:	f001 f9f8 	bl	8001890 <clearTimer1>
			clearTimer2();
 80004a0:	f001 fa06 	bl	80018b0 <clearTimer2>
			clearTimer3();
 80004a4:	f001 fa14 	bl	80018d0 <clearTimer3>
			status_mode = MODE2;
 80004a8:	4b6f      	ldr	r3, [pc, #444]	; (8000668 <fsm_mode_run+0x22c>)
 80004aa:	2202      	movs	r2, #2
 80004ac:	601a      	str	r2, [r3, #0]
			SetOffVerHor();// to when blinky, led red ver and hor are the same
 80004ae:	f000 fc19 	bl	8000ce4 <SetOffVerHor>
			status_ver = MODIFY_RED;
 80004b2:	4b6e      	ldr	r3, [pc, #440]	; (800066c <fsm_mode_run+0x230>)
 80004b4:	220c      	movs	r2, #12
 80004b6:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_RED;
 80004b8:	4b6d      	ldr	r3, [pc, #436]	; (8000670 <fsm_mode_run+0x234>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	601a      	str	r2, [r3, #0]
			led12 = MODE2;
 80004be:	4b71      	ldr	r3, [pc, #452]	; (8000684 <fsm_mode_run+0x248>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80004c4:	4b70      	ldr	r3, [pc, #448]	; (8000688 <fsm_mode_run+0x24c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a70      	ldr	r2, [pc, #448]	; (800068c <fsm_mode_run+0x250>)
 80004ca:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80004cc:	4b6a      	ldr	r3, [pc, #424]	; (8000678 <fsm_mode_run+0x23c>)
 80004ce:	221e      	movs	r2, #30
 80004d0:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 80004d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d6:	f001 fa4f 	bl	8001978 <setTimer3>
		}

		break;
 80004da:	e0bb      	b.n	8000654 <fsm_mode_run+0x218>
	case MODE2:
		if (isButtonflag(but1) == 1){
 80004dc:	4b68      	ldr	r3, [pc, #416]	; (8000680 <fsm_mode_run+0x244>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f9f1 	bl	80008c8 <isButtonflag>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d11a      	bne.n	8000522 <fsm_mode_run+0xe6>
			clearTimer1();
 80004ec:	f001 f9d0 	bl	8001890 <clearTimer1>
			clearTimer2();
 80004f0:	f001 f9de 	bl	80018b0 <clearTimer2>
			clearTimer3();
 80004f4:	f001 f9ec 	bl	80018d0 <clearTimer3>
			status_mode = MODE3;
 80004f8:	4b5b      	ldr	r3, [pc, #364]	; (8000668 <fsm_mode_run+0x22c>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	601a      	str	r2, [r3, #0]
			SetOffVerHor();
 80004fe:	f000 fbf1 	bl	8000ce4 <SetOffVerHor>
			status_ver = MODIFY_YELLOW;
 8000502:	4b5a      	ldr	r3, [pc, #360]	; (800066c <fsm_mode_run+0x230>)
 8000504:	220e      	movs	r2, #14
 8000506:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_YELLOW;
 8000508:	4b59      	ldr	r3, [pc, #356]	; (8000670 <fsm_mode_run+0x234>)
 800050a:	220e      	movs	r2, #14
 800050c:	601a      	str	r2, [r3, #0]
			led12 = MODE3;
 800050e:	4b5d      	ldr	r3, [pc, #372]	; (8000684 <fsm_mode_run+0x248>)
 8000510:	2203      	movs	r2, #3
 8000512:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 8000514:	4b5e      	ldr	r3, [pc, #376]	; (8000690 <fsm_mode_run+0x254>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a5c      	ldr	r2, [pc, #368]	; (800068c <fsm_mode_run+0x250>)
 800051a:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 800051c:	4b56      	ldr	r3, [pc, #344]	; (8000678 <fsm_mode_run+0x23c>)
 800051e:	221e      	movs	r2, #30
 8000520:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000522:	4b5c      	ldr	r3, [pc, #368]	; (8000694 <fsm_mode_run+0x258>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f9ce 	bl	80008c8 <isButtonflag>
 800052c:	4603      	mov	r3, r0
 800052e:	2b01      	cmp	r3, #1
 8000530:	d10b      	bne.n	800054a <fsm_mode_run+0x10e>
			led34++;
 8000532:	4b56      	ldr	r3, [pc, #344]	; (800068c <fsm_mode_run+0x250>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	3301      	adds	r3, #1
 8000538:	4a54      	ldr	r2, [pc, #336]	; (800068c <fsm_mode_run+0x250>)
 800053a:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 800053c:	4b53      	ldr	r3, [pc, #332]	; (800068c <fsm_mode_run+0x250>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b63      	cmp	r3, #99	; 0x63
 8000542:	dd02      	ble.n	800054a <fsm_mode_run+0x10e>
				led34 = 0;
 8000544:	4b51      	ldr	r3, [pc, #324]	; (800068c <fsm_mode_run+0x250>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 800054a:	4b53      	ldr	r3, [pc, #332]	; (8000698 <fsm_mode_run+0x25c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f9ba 	bl	80008c8 <isButtonflag>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d17e      	bne.n	8000658 <fsm_mode_run+0x21c>
			timered  = led34;
 800055a:	4b4c      	ldr	r3, [pc, #304]	; (800068c <fsm_mode_run+0x250>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a4a      	ldr	r2, [pc, #296]	; (8000688 <fsm_mode_run+0x24c>)
 8000560:	6013      	str	r3, [r2, #0]
		}
		break;
 8000562:	e079      	b.n	8000658 <fsm_mode_run+0x21c>
	case MODE3:

		if (isButtonflag(but1) == 1){
 8000564:	4b46      	ldr	r3, [pc, #280]	; (8000680 <fsm_mode_run+0x244>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f9ad 	bl	80008c8 <isButtonflag>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	d11a      	bne.n	80005aa <fsm_mode_run+0x16e>
			clearTimer1();
 8000574:	f001 f98c 	bl	8001890 <clearTimer1>
			clearTimer2();
 8000578:	f001 f99a 	bl	80018b0 <clearTimer2>
			clearTimer3();
 800057c:	f001 f9a8 	bl	80018d0 <clearTimer3>
			status_mode = MODE4;
 8000580:	4b39      	ldr	r3, [pc, #228]	; (8000668 <fsm_mode_run+0x22c>)
 8000582:	2204      	movs	r2, #4
 8000584:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_GREEN;
 8000586:	4b39      	ldr	r3, [pc, #228]	; (800066c <fsm_mode_run+0x230>)
 8000588:	220d      	movs	r2, #13
 800058a:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_GREEN;
 800058c:	4b38      	ldr	r3, [pc, #224]	; (8000670 <fsm_mode_run+0x234>)
 800058e:	220d      	movs	r2, #13
 8000590:	601a      	str	r2, [r3, #0]
			SetOffVerHor();
 8000592:	f000 fba7 	bl	8000ce4 <SetOffVerHor>
			led12 = MODE4;
 8000596:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <fsm_mode_run+0x248>)
 8000598:	2204      	movs	r2, #4
 800059a:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 800059c:	4b3f      	ldr	r3, [pc, #252]	; (800069c <fsm_mode_run+0x260>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a3a      	ldr	r2, [pc, #232]	; (800068c <fsm_mode_run+0x250>)
 80005a2:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80005a4:	4b34      	ldr	r3, [pc, #208]	; (8000678 <fsm_mode_run+0x23c>)
 80005a6:	221e      	movs	r2, #30
 80005a8:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <fsm_mode_run+0x258>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f98a 	bl	80008c8 <isButtonflag>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d10b      	bne.n	80005d2 <fsm_mode_run+0x196>
			led34++;
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <fsm_mode_run+0x250>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a32      	ldr	r2, [pc, #200]	; (800068c <fsm_mode_run+0x250>)
 80005c2:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 80005c4:	4b31      	ldr	r3, [pc, #196]	; (800068c <fsm_mode_run+0x250>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b63      	cmp	r3, #99	; 0x63
 80005ca:	dd02      	ble.n	80005d2 <fsm_mode_run+0x196>
				led34 = 0;
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <fsm_mode_run+0x250>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 80005d2:	4b31      	ldr	r3, [pc, #196]	; (8000698 <fsm_mode_run+0x25c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f976 	bl	80008c8 <isButtonflag>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d13c      	bne.n	800065c <fsm_mode_run+0x220>
			timeyellow  = led34;
 80005e2:	4b2a      	ldr	r3, [pc, #168]	; (800068c <fsm_mode_run+0x250>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <fsm_mode_run+0x254>)
 80005e8:	6013      	str	r3, [r2, #0]
		}

		break;
 80005ea:	e037      	b.n	800065c <fsm_mode_run+0x220>
	case MODE4:
		if (isButtonflag(but1) == 1){
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <fsm_mode_run+0x244>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f969 	bl	80008c8 <isButtonflag>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d108      	bne.n	800060e <fsm_mode_run+0x1d2>
			clearTimer1();
 80005fc:	f001 f948 	bl	8001890 <clearTimer1>
			clearTimer2();
 8000600:	f001 f956 	bl	80018b0 <clearTimer2>
			clearTimer3();
 8000604:	f001 f964 	bl	80018d0 <clearTimer3>
			status_mode = INIT;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <fsm_mode_run+0x22c>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
//			status_ver = INIT;
//			status_hor = INIT;
//			status_led7seg = MODE1_led7seg_1;
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <fsm_mode_run+0x258>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f958 	bl	80008c8 <isButtonflag>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d10b      	bne.n	8000636 <fsm_mode_run+0x1fa>
			led34++;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <fsm_mode_run+0x250>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	4a19      	ldr	r2, [pc, #100]	; (800068c <fsm_mode_run+0x250>)
 8000626:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <fsm_mode_run+0x250>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b63      	cmp	r3, #99	; 0x63
 800062e:	dd02      	ble.n	8000636 <fsm_mode_run+0x1fa>
				led34 = 0;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <fsm_mode_run+0x250>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <fsm_mode_run+0x25c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f944 	bl	80008c8 <isButtonflag>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d10c      	bne.n	8000660 <fsm_mode_run+0x224>
			timegreen = led34;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <fsm_mode_run+0x250>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <fsm_mode_run+0x260>)
 800064c:	6013      	str	r3, [r2, #0]
		}
		break;
 800064e:	e007      	b.n	8000660 <fsm_mode_run+0x224>
	default:
		break;
 8000650:	bf00      	nop
 8000652:	e006      	b.n	8000662 <fsm_mode_run+0x226>
		break;
 8000654:	bf00      	nop
 8000656:	e004      	b.n	8000662 <fsm_mode_run+0x226>
		break;
 8000658:	bf00      	nop
 800065a:	e002      	b.n	8000662 <fsm_mode_run+0x226>
		break;
 800065c:	bf00      	nop
 800065e:	e000      	b.n	8000662 <fsm_mode_run+0x226>
		break;
 8000660:	bf00      	nop
	}


}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000b8 	.word	0x200000b8
 800066c:	200000bc 	.word	0x200000bc
 8000670:	200000c0 	.word	0x200000c0
 8000674:	200000c8 	.word	0x200000c8
 8000678:	200000c4 	.word	0x200000c4
 800067c:	200000cc 	.word	0x200000cc
 8000680:	200000d0 	.word	0x200000d0
 8000684:	20000018 	.word	0x20000018
 8000688:	2000000c 	.word	0x2000000c
 800068c:	2000001c 	.word	0x2000001c
 8000690:	20000014 	.word	0x20000014
 8000694:	20000000 	.word	0x20000000
 8000698:	20000004 	.word	0x20000004
 800069c:	20000010 	.word	0x20000010

080006a0 <fsm_mode_led7seg>:
 */

#include "fsm_mode_Led7Seg.h"
//int Ts = 10;
//int count = 1;
void fsm_mode_led7seg(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

	switch (status_led7seg){
 80006a4:	4b7c      	ldr	r3, [pc, #496]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b21      	cmp	r3, #33	; 0x21
 80006aa:	f200 80e2 	bhi.w	8000872 <fsm_mode_led7seg+0x1d2>
 80006ae:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <fsm_mode_led7seg+0x14>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	0800073d 	.word	0x0800073d
 80006b8:	08000873 	.word	0x08000873
 80006bc:	08000873 	.word	0x08000873
 80006c0:	08000873 	.word	0x08000873
 80006c4:	08000873 	.word	0x08000873
 80006c8:	08000873 	.word	0x08000873
 80006cc:	08000873 	.word	0x08000873
 80006d0:	08000873 	.word	0x08000873
 80006d4:	08000873 	.word	0x08000873
 80006d8:	08000873 	.word	0x08000873
 80006dc:	08000873 	.word	0x08000873
 80006e0:	08000873 	.word	0x08000873
 80006e4:	08000873 	.word	0x08000873
 80006e8:	08000873 	.word	0x08000873
 80006ec:	08000873 	.word	0x08000873
 80006f0:	08000873 	.word	0x08000873
 80006f4:	08000873 	.word	0x08000873
 80006f8:	08000873 	.word	0x08000873
 80006fc:	08000873 	.word	0x08000873
 8000700:	08000873 	.word	0x08000873
 8000704:	08000755 	.word	0x08000755
 8000708:	08000777 	.word	0x08000777
 800070c:	08000797 	.word	0x08000797
 8000710:	080007d7 	.word	0x080007d7
 8000714:	08000873 	.word	0x08000873
 8000718:	08000873 	.word	0x08000873
 800071c:	08000873 	.word	0x08000873
 8000720:	08000873 	.word	0x08000873
 8000724:	08000873 	.word	0x08000873
 8000728:	08000873 	.word	0x08000873
 800072c:	080007f7 	.word	0x080007f7
 8000730:	08000817 	.word	0x08000817
 8000734:	08000837 	.word	0x08000837
 8000738:	08000853 	.word	0x08000853
		case INIT:
				status_led7seg = MODE1_led7seg_1;
 800073c:	4b56      	ldr	r3, [pc, #344]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 800073e:	2214      	movs	r2, #20
 8000740:	601a      	str	r2, [r3, #0]
				//updateLedBuffer(led12,led34);
				//SetLed7Seg1On();
				//update7SEG(index_led);
				index_led++;
 8000742:	4b56      	ldr	r3, [pc, #344]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	4a54      	ldr	r2, [pc, #336]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800074a:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800074c:	20fa      	movs	r0, #250	; 0xfa
 800074e:	f001 f913 	bl	8001978 <setTimer3>
			break;
 8000752:	e09f      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
		case MODE1_led7seg_1:
			if (timer3_flag == 1){
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	f040 808c 	bne.w	8000876 <fsm_mode_led7seg+0x1d6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_2;
 800075e:	4b4e      	ldr	r3, [pc, #312]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000760:	2215      	movs	r2, #21
 8000762:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 8000764:	4b4d      	ldr	r3, [pc, #308]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a4c      	ldr	r2, [pc, #304]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800076c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800076e:	20fa      	movs	r0, #250	; 0xfa
 8000770:	f001 f902 	bl	8001978 <setTimer3>
			}
			break;
 8000774:	e07f      	b.n	8000876 <fsm_mode_led7seg+0x1d6>
		case MODE1_led7seg_2:
			if (timer3_flag == 1){
 8000776:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d17d      	bne.n	800087a <fsm_mode_led7seg+0x1da>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_3;
 800077e:	4b46      	ldr	r3, [pc, #280]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000780:	2216      	movs	r2, #22
 8000782:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 8000784:	4b45      	ldr	r3, [pc, #276]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a44      	ldr	r2, [pc, #272]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800078c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(255);
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	f001 f8f2 	bl	8001978 <setTimer3>
			}
			break;
 8000794:	e071      	b.n	800087a <fsm_mode_led7seg+0x1da>
		case MODE1_led7seg_3:

			if (timer3_flag == 1){
 8000796:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d16f      	bne.n	800087e <fsm_mode_led7seg+0x1de>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_4;
 800079e:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 80007a0:	2217      	movs	r2, #23
 80007a2:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 80007a4:	4b3d      	ldr	r3, [pc, #244]	; (800089c <fsm_mode_led7seg+0x1fc>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
//			    	led34--;
//			    	count = 1;
//			    }
//			    else count++;
//				setTimer3(Ts);
				if (led12 - 1 != 0 ) led12--;
 80007aa:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <fsm_mode_led7seg+0x204>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d004      	beq.n	80007bc <fsm_mode_led7seg+0x11c>
 80007b2:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <fsm_mode_led7seg+0x204>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	4a3a      	ldr	r2, [pc, #232]	; (80008a4 <fsm_mode_led7seg+0x204>)
 80007ba:	6013      	str	r3, [r2, #0]
				if (led34 - 1 != 0 ) led34--;
 80007bc:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <fsm_mode_led7seg+0x208>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d004      	beq.n	80007ce <fsm_mode_led7seg+0x12e>
 80007c4:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <fsm_mode_led7seg+0x208>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	4a37      	ldr	r2, [pc, #220]	; (80008a8 <fsm_mode_led7seg+0x208>)
 80007cc:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80007ce:	20fa      	movs	r0, #250	; 0xfa
 80007d0:	f001 f8d2 	bl	8001978 <setTimer3>
			}
			break;
 80007d4:	e053      	b.n	800087e <fsm_mode_led7seg+0x1de>
		case MODE1_led7seg_4:
			if (timer3_flag == 1){
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <fsm_mode_led7seg+0x200>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d151      	bne.n	8000882 <fsm_mode_led7seg+0x1e2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE1_led7seg_1;
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 80007e0:	2214      	movs	r2, #20
 80007e2:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <fsm_mode_led7seg+0x1fc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a2c      	ldr	r2, [pc, #176]	; (800089c <fsm_mode_led7seg+0x1fc>)
 80007ec:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80007ee:	20fa      	movs	r0, #250	; 0xfa
 80007f0:	f001 f8c2 	bl	8001978 <setTimer3>
			}
			break;
 80007f4:	e045      	b.n	8000882 <fsm_mode_led7seg+0x1e2>
		case MODE_MODIFY_led7seg_1:
			if (timer3_flag == 1){
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <fsm_mode_led7seg+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d143      	bne.n	8000886 <fsm_mode_led7seg+0x1e6>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_2;
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000800:	221f      	movs	r2, #31
 8000802:	601a      	str	r2, [r3, #0]
//				SetLed7Seg2On();
//				update7SEG(index_led);
				index_led++;
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a24      	ldr	r2, [pc, #144]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800080c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800080e:	20fa      	movs	r0, #250	; 0xfa
 8000810:	f001 f8b2 	bl	8001978 <setTimer3>
			}
			break;
 8000814:	e037      	b.n	8000886 <fsm_mode_led7seg+0x1e6>
		case MODE_MODIFY_led7seg_2:
			if (timer3_flag == 1){
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d135      	bne.n	800088a <fsm_mode_led7seg+0x1ea>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_3;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000820:	2220      	movs	r2, #32
 8000822:	601a      	str	r2, [r3, #0]
//				SetLed7Seg3On();
//				update7SEG(index_led);
				index_led++;
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <fsm_mode_led7seg+0x1fc>)
 800082c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800082e:	20fa      	movs	r0, #250	; 0xfa
 8000830:	f001 f8a2 	bl	8001978 <setTimer3>
			}
			break;
 8000834:	e029      	b.n	800088a <fsm_mode_led7seg+0x1ea>
		case MODE_MODIFY_led7seg_3:
			if (timer3_flag == 1){
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d127      	bne.n	800088e <fsm_mode_led7seg+0x1ee>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_4;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 8000840:	2221      	movs	r2, #33	; 0x21
 8000842:	601a      	str	r2, [r3, #0]
//				SetLed7Seg4On();
//				update7SEG(index_led);
				index_led = 0;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 800084a:	20fa      	movs	r0, #250	; 0xfa
 800084c:	f001 f894 	bl	8001978 <setTimer3>
			}
			break;
 8000850:	e01d      	b.n	800088e <fsm_mode_led7seg+0x1ee>
		case MODE_MODIFY_led7seg_4:
			if (timer3_flag == 1){
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <fsm_mode_led7seg+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d11b      	bne.n	8000892 <fsm_mode_led7seg+0x1f2>
//				updateLedBuffer(led12,led34);
				status_led7seg = MODE_MODIFY_led7seg_1;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <fsm_mode_led7seg+0x1f8>)
 800085c:	221e      	movs	r2, #30
 800085e:	601a      	str	r2, [r3, #0]
//				SetLed7Seg1On();
//				update7SEG(index_led);
				index_led++;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a0d      	ldr	r2, [pc, #52]	; (800089c <fsm_mode_led7seg+0x1fc>)
 8000868:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800086a:	20fa      	movs	r0, #250	; 0xfa
 800086c:	f001 f884 	bl	8001978 <setTimer3>
			}
			break;
 8000870:	e00f      	b.n	8000892 <fsm_mode_led7seg+0x1f2>
		default:
			break;
 8000872:	bf00      	nop
 8000874:	e00e      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 8000876:	bf00      	nop
 8000878:	e00c      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 800087a:	bf00      	nop
 800087c:	e00a      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 800087e:	bf00      	nop
 8000880:	e008      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 8000882:	bf00      	nop
 8000884:	e006      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 8000886:	bf00      	nop
 8000888:	e004      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 800088a:	bf00      	nop
 800088c:	e002      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 800088e:	bf00      	nop
 8000890:	e000      	b.n	8000894 <fsm_mode_led7seg+0x1f4>
			break;
 8000892:	bf00      	nop
	}
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000c4 	.word	0x200000c4
 800089c:	200000cc 	.word	0x200000cc
 80008a0:	20000544 	.word	0x20000544
 80008a4:	20000018 	.word	0x20000018
 80008a8:	2000001c 	.word	0x2000001c

080008ac <timeTimer>:
int timeyellow = 2;

int led12 = 5;
int led34 = 3;

int timeTimer(int time){
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	return time * 1000;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 80008d0:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <isButtonflag+0x30>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d106      	bne.n	80008ea <isButtonflag+0x22>
		flagForButton[index] = 0;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <isButtonflag+0x30>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
		return 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <isButtonflag+0x24>
	}
	return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	200000e8 	.word	0x200000e8

080008fc <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d901      	bls.n	8000910 <is_button_pressed+0x14>
 800090c:	2300      	movs	r3, #0
 800090e:	e007      	b.n	8000920 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4a06      	ldr	r2, [pc, #24]	; (800092c <is_button_pressed+0x30>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf0c      	ite	eq
 800091a:	2301      	moveq	r3, #1
 800091c:	2300      	movne	r3, #0
 800091e:	b2db      	uxtb	r3, r3
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	200000d4 	.word	0x200000d4

08000930 <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b03      	cmp	r3, #3
 800093e:	d901      	bls.n	8000944 <is_button_pressed_3s+0x14>
 8000940:	23ff      	movs	r3, #255	; 0xff
 8000942:	e007      	b.n	8000954 <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	4a06      	ldr	r2, [pc, #24]	; (8000960 <is_button_pressed_3s+0x30>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	2b01      	cmp	r3, #1
 800094c:	bf0c      	ite	eq
 800094e:	2301      	moveq	r3, #1
 8000950:	2300      	movne	r3, #0
 8000952:	b2db      	uxtb	r3, r3
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	200000e4 	.word	0x200000e4

08000964 <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
int counter10S = 0;
void fsm_for_input_processing(uint8_t index ){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4a63      	ldr	r2, [pc, #396]	; (8000b00 <fsm_for_input_processing+0x19c>)
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	2b02      	cmp	r3, #2
 8000976:	f000 8089 	beq.w	8000a8c <fsm_for_input_processing+0x128>
 800097a:	2b02      	cmp	r3, #2
 800097c:	f300 80bb 	bgt.w	8000af6 <fsm_for_input_processing+0x192>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <fsm_for_input_processing+0x26>
 8000984:	2b01      	cmp	r3, #1
 8000986:	d037      	beq.n	80009f8 <fsm_for_input_processing+0x94>
					}
				}

			break ;
	}
}
 8000988:	e0b5      	b.n	8000af6 <fsm_for_input_processing+0x192>
			if( is_button_pressed(index)){
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffb5 	bl	80008fc <is_button_pressed>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d011      	beq.n	80009bc <fsm_for_input_processing+0x58>
				buttonState[index] = BUTTON_PRESSED ;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4a59      	ldr	r2, [pc, #356]	; (8000b00 <fsm_for_input_processing+0x19c>)
 800099c:	2101      	movs	r1, #1
 800099e:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4a58      	ldr	r2, [pc, #352]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4a56      	ldr	r2, [pc, #344]	; (8000b08 <fsm_for_input_processing+0x1a4>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a55      	ldr	r2, [pc, #340]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 80009b6:	2101      	movs	r1, #1
 80009b8:	54d1      	strb	r1, [r2, r3]
			break ;
 80009ba:	e099      	b.n	8000af0 <fsm_for_input_processing+0x18c>
				if(timer4_flag==1 && status_mode != MODE1){
 80009bc:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <fsm_for_input_processing+0x1ac>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	f040 8095 	bne.w	8000af0 <fsm_for_input_processing+0x18c>
 80009c6:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <fsm_for_input_processing+0x1b0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	f000 8090 	beq.w	8000af0 <fsm_for_input_processing+0x18c>
					counter10S++;
 80009d0:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a50      	ldr	r2, [pc, #320]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009d8:	6013      	str	r3, [r2, #0]
					if(counter10S >= 10){
 80009da:	4b4f      	ldr	r3, [pc, #316]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b09      	cmp	r3, #9
 80009e0:	dd05      	ble.n	80009ee <fsm_for_input_processing+0x8a>
						counter10S = 0;
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
						status_mode = INIT;
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <fsm_for_input_processing+0x1b0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
					setTimer4(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f2:	f000 ffdb 	bl	80019ac <setTimer4>
			break ;
 80009f6:	e07b      	b.n	8000af0 <fsm_for_input_processing+0x18c>
			counter10S = 0;
 80009f8:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
			if (!is_button_pressed(index)){
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff7b 	bl	80008fc <is_button_pressed>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10d      	bne.n	8000a28 <fsm_for_input_processing+0xc4>
				buttonState[index] =	 BUTTON_RELEASED ;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4a3c      	ldr	r2, [pc, #240]	; (8000b00 <fsm_for_input_processing+0x19c>)
 8000a10:	2100      	movs	r1, #0
 8000a12:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4a3d      	ldr	r2, [pc, #244]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4a39      	ldr	r2, [pc, #228]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000a26:	e065      	b.n	8000af4 <fsm_for_input_processing+0x190>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4a36      	ldr	r2, [pc, #216]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a30:	2b63      	cmp	r3, #99	; 0x63
 8000a32:	d809      	bhi.n	8000a48 <fsm_for_input_processing+0xe4>
						counterForButtonPress1s[index]++;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a3c:	3201      	adds	r2, #1
 8000a3e:	b291      	uxth	r1, r2
 8000a40:	4a30      	ldr	r2, [pc, #192]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a46:	e011      	b.n	8000a6c <fsm_for_input_processing+0x108>
					flagForButtonPress1s[index] = 1;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <fsm_for_input_processing+0x1a4>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4a30      	ldr	r2, [pc, #192]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <fsm_for_input_processing+0x1a0>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff5e 	bl	8000930 <is_button_pressed_3s>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d03c      	beq.n	8000af4 <fsm_for_input_processing+0x190>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <fsm_for_input_processing+0x19c>)
 8000a7e:	2102      	movs	r1, #2
 8000a80:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <fsm_for_input_processing+0x1a4>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	54d1      	strb	r1, [r2, r3]
			break ;
 8000a8a:	e033      	b.n	8000af4 <fsm_for_input_processing+0x190>
			counter10S = 0;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <fsm_for_input_processing+0x1b4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
			if (! is_button_pressed(index)){
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff31 	bl	80008fc <is_button_pressed>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10d      	bne.n	8000abc <fsm_for_input_processing+0x158>
				buttonState[index] = BUTTON_RELEASED;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <fsm_for_input_processing+0x19c>)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 8000aac:	2100      	movs	r1, #0
 8000aae:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000aba:	e01c      	b.n	8000af6 <fsm_for_input_processing+0x192>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac4:	2b13      	cmp	r3, #19
 8000ac6:	d809      	bhi.n	8000adc <fsm_for_input_processing+0x178>
							counterForButtonAfterPress1s[index]++;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000acc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ad0:	3201      	adds	r2, #1
 8000ad2:	b291      	uxth	r1, r2
 8000ad4:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000ad6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000ada:	e00c      	b.n	8000af6 <fsm_for_input_processing+0x192>
						flagForButton[index] = 1;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <fsm_for_input_processing+0x1a8>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <fsm_for_input_processing+0x1b8>)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000aee:	e002      	b.n	8000af6 <fsm_for_input_processing+0x192>
			break ;
 8000af0:	bf00      	nop
 8000af2:	e000      	b.n	8000af6 <fsm_for_input_processing+0x192>
			break ;
 8000af4:	bf00      	nop
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000fc 	.word	0x200000fc
 8000b04:	200000ec 	.word	0x200000ec
 8000b08:	200000e4 	.word	0x200000e4
 8000b0c:	200000e8 	.word	0x200000e8
 8000b10:	20000548 	.word	0x20000548
 8000b14:	200000b8 	.word	0x200000b8
 8000b18:	20000100 	.word	0x20000100
 8000b1c:	200000f4 	.word	0x200000f4

08000b20 <button_reading>:




void button_reading(void){
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000b26:	2300      	movs	r3, #0
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	e05f      	b.n	8000bec <button_reading+0xcc>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4932      	ldr	r1, [pc, #200]	; (8000bfc <button_reading+0xdc>)
 8000b32:	5c89      	ldrb	r1, [r1, r2]
 8000b34:	4a32      	ldr	r2, [pc, #200]	; (8000c00 <button_reading+0xe0>)
 8000b36:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	4931      	ldr	r1, [pc, #196]	; (8000c04 <button_reading+0xe4>)
 8000b3e:	5c89      	ldrb	r1, [r1, r2]
 8000b40:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <button_reading+0xdc>)
 8000b42:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d832      	bhi.n	8000bb0 <button_reading+0x90>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <button_reading+0x30>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b61 	.word	0x08000b61
 8000b54:	08000b75 	.word	0x08000b75
 8000b58:	08000b89 	.word	0x08000b89
 8000b5c:	08000b9d 	.word	0x08000b9d
		  case 0: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000b60:	79fc      	ldrb	r4, [r7, #7]
 8000b62:	2102      	movs	r1, #2
 8000b64:	4828      	ldr	r0, [pc, #160]	; (8000c08 <button_reading+0xe8>)
 8000b66:	f001 fd53 	bl	8002610 <HAL_GPIO_ReadPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <button_reading+0xe4>)
 8000b70:	551a      	strb	r2, [r3, r4]
			  break;
 8000b72:	e01e      	b.n	8000bb2 <button_reading+0x92>
		  case 1: // read data from Button 2
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000b74:	79fc      	ldrb	r4, [r7, #7]
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4824      	ldr	r0, [pc, #144]	; (8000c0c <button_reading+0xec>)
 8000b7a:	f001 fd49 	bl	8002610 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <button_reading+0xe4>)
 8000b84:	551a      	strb	r2, [r3, r4]
			  break;
 8000b86:	e014      	b.n	8000bb2 <button_reading+0x92>
		  case 2: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000b88:	79fc      	ldrb	r4, [r7, #7]
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <button_reading+0xec>)
 8000b8e:	f001 fd3f 	bl	8002610 <HAL_GPIO_ReadPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <button_reading+0xe4>)
 8000b98:	551a      	strb	r2, [r3, r4]
			  break;
 8000b9a:	e00a      	b.n	8000bb2 <button_reading+0x92>
		  case 3: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_P_GPIO_Port, BUTTON_P_Pin);
 8000b9c:	79fc      	ldrb	r4, [r7, #7]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4819      	ldr	r0, [pc, #100]	; (8000c08 <button_reading+0xe8>)
 8000ba2:	f001 fd35 	bl	8002610 <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <button_reading+0xe4>)
 8000bac:	551a      	strb	r2, [r3, r4]
			  break;
 8000bae:	e000      	b.n	8000bb2 <button_reading+0x92>
		  default:
			  break;
 8000bb0:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <button_reading+0xe4>)
 8000bb6:	5cd2      	ldrb	r2, [r2, r3]
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4910      	ldr	r1, [pc, #64]	; (8000bfc <button_reading+0xdc>)
 8000bbc:	5ccb      	ldrb	r3, [r1, r3]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d111      	bne.n	8000be6 <button_reading+0xc6>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <button_reading+0xdc>)
 8000bc6:	5cd2      	ldrb	r2, [r2, r3]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <button_reading+0xe0>)
 8000bcc:	5ccb      	ldrb	r3, [r1, r3]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d109      	bne.n	8000be6 <button_reading+0xc6>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000bd2:	79fa      	ldrb	r2, [r7, #7]
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	490a      	ldr	r1, [pc, #40]	; (8000c00 <button_reading+0xe0>)
 8000bd8:	5c89      	ldrb	r1, [r1, r2]
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <button_reading+0xf0>)
 8000bdc:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff febf 	bl	8000964 <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3301      	adds	r3, #1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d99c      	bls.n	8000b2c <button_reading+0xc>
		  }

	}
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	200000dc 	.word	0x200000dc
 8000c00:	200000e0 	.word	0x200000e0
 8000c04:	200000d8 	.word	0x200000d8
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	200000d4 	.word	0x200000d4

08000c14 <BlinkyRedVer>:
//	led_buffer[1] = led1_2 % 10;
//	led_buffer[2] = led3_4 / 10;
//	led_buffer[3] = led3_4 % 10;
//}

void BlinkyRedVer(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);

//	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
	//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <BlinkyRedVer+0x20>)
 8000c20:	f001 fd0d 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8000c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <BlinkyRedVer+0x20>)
 8000c2a:	f001 fd20 	bl	800266e <HAL_GPIO_TogglePin>

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40011000 	.word	0x40011000

08000c38 <BlinkyGreenVer>:
void BlinkyGreenVer(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8000c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <BlinkyGreenVer+0x20>)
 8000c42:	f001 fd14 	bl	800266e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <BlinkyGreenVer+0x20>)
 8000c4e:	f001 fcf6 	bl	800263e <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40011000 	.word	0x40011000

08000c5c <BlinkyYellowVer>:
void BlinkyYellowVer(){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <BlinkyYellowVer+0x1c>)
 8000c66:	f001 fd02 	bl	800266e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8000c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6e:	4802      	ldr	r0, [pc, #8]	; (8000c78 <BlinkyYellowVer+0x1c>)
 8000c70:	f001 fcfd 	bl	800266e <HAL_GPIO_TogglePin>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40011000 	.word	0x40011000

08000c7c <BlinkyRedHor>:

void BlinkyRedHor(){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_TogglePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2110      	movs	r1, #16
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <BlinkyRedHor+0x1c>)
 8000c86:	f001 fcda 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <BlinkyRedHor+0x20>)
 8000c8e:	f001 fcee 	bl	800266e <HAL_GPIO_TogglePin>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	40010c00 	.word	0x40010c00

08000ca0 <BlinkyGreenHor>:
void BlinkyGreenHor(){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <BlinkyGreenHor+0x1c>)
 8000ca8:	f001 fce1 	bl	800266e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <BlinkyGreenHor+0x20>)
 8000cb2:	f001 fcc4 	bl	800263e <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <BlinkyYellowHor>:
void BlinkyYellowHor(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000cc8:	2110      	movs	r1, #16
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <BlinkyYellowHor+0x18>)
 8000ccc:	f001 fccf 	bl	800266e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <BlinkyYellowHor+0x1c>)
 8000cd4:	f001 fccb 	bl	800266e <HAL_GPIO_TogglePin>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <SetOffVerHor>:
//	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
//	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
//	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
//}

void SetOffVerHor(){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cee:	480a      	ldr	r0, [pc, #40]	; (8000d18 <SetOffVerHor+0x34>)
 8000cf0:	f001 fca5 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <SetOffVerHor+0x34>)
 8000cfc:	f001 fc9f 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2110      	movs	r1, #16
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <SetOffVerHor+0x38>)
 8000d06:	f001 fc9a 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <SetOffVerHor+0x3c>)
 8000d10:	f001 fc95 	bl	800263e <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00

08000d24 <SetOffVer>:


void SetOffVer(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <SetOffVer+0x20>)
 8000d30:	f001 fc85 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3a:	4802      	ldr	r0, [pc, #8]	; (8000d44 <SetOffVer+0x20>)
 8000d3c:	f001 fc7f 	bl	800263e <HAL_GPIO_WritePin>

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40011000 	.word	0x40011000

08000d48 <SetPedesRed>:

void SetPedesRed(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <SetPedesRed+0x20>)
 8000d54:	f001 fc73 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5e:	4802      	ldr	r0, [pc, #8]	; (8000d68 <SetPedesRed+0x20>)
 8000d60:	f001 fc6d 	bl	800263e <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010c00 	.word	0x40010c00

08000d6c <SetPedesGreen>:
void SetPedesGreen(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <SetPedesGreen+0x20>)
 8000d78:	f001 fc61 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d82:	4802      	ldr	r0, [pc, #8]	; (8000d8c <SetPedesGreen+0x20>)
 8000d84:	f001 fc5b 	bl	800263e <HAL_GPIO_WritePin>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <SetPedesOff>:

void SetPedesOff(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <SetPedesOff+0x20>)
 8000d9c:	f001 fc4f 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <SetPedesOff+0x20>)
 8000da8:	f001 fc49 	bl	800263e <HAL_GPIO_WritePin>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40010c00 	.word	0x40010c00

08000db4 <SetRedVer>:

void SetRedVer(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <SetRedVer+0x20>)
 8000dc0:	f001 fc3d 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dca:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <SetRedVer+0x20>)
 8000dcc:	f001 fc37 	bl	800263e <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40011000 	.word	0x40011000

08000dd8 <SetGreenVer>:

void SetGreenVer(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <SetGreenVer+0x20>)
 8000de4:	f001 fc2b 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	4802      	ldr	r0, [pc, #8]	; (8000df8 <SetGreenVer+0x20>)
 8000df0:	f001 fc25 	bl	800263e <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40011000 	.word	0x40011000

08000dfc <SetYellowVer>:

void SetYellowVer(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <SetYellowVer+0x20>)
 8000e08:	f001 fc19 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e12:	4802      	ldr	r0, [pc, #8]	; (8000e1c <SetYellowVer+0x20>)
 8000e14:	f001 fc13 	bl	800263e <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40011000 	.word	0x40011000

08000e20 <SetOffHor>:


void SetOffHor(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <SetOffHor+0x1c>)
 8000e2a:	f001 fc08 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <SetOffHor+0x20>)
 8000e34:	f001 fc03 	bl	800263e <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <SetRedHor>:

void SetRedHor(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <SetRedHor+0x1c>)
 8000e4e:	f001 fbf6 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <SetRedHor+0x20>)
 8000e58:	f001 fbf1 	bl	800263e <HAL_GPIO_WritePin>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40010c00 	.word	0x40010c00

08000e68 <SetGreenHor>:

void SetGreenHor(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <SetGreenHor+0x1c>)
 8000e72:	f001 fbe4 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4803      	ldr	r0, [pc, #12]	; (8000e88 <SetGreenHor+0x20>)
 8000e7c:	f001 fbdf 	bl	800263e <HAL_GPIO_WritePin>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <SetYellowHor>:

void SetYellowHor(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2110      	movs	r1, #16
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <SetYellowHor+0x1c>)
 8000e96:	f001 fbd2 	bl	800263e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <SetYellowHor+0x20>)
 8000ea0:	f001 fbcd 	bl	800263e <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <Buzzer_On>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char str[50];
int increase = 30;
//int delay = 380;
void Buzzer_On(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
		if (timer6_flag == 1){
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <Buzzer_On+0x70>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d12e      	bne.n	8000f1a <Buzzer_On+0x6a>
			dutycycle += 1000 / ((timered)*5);
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <Buzzer_On+0x74>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eca:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <Buzzer_On+0x78>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <Buzzer_On+0x78>)
 8000ed6:	6013      	str	r3, [r2, #0]
			if (dutycycle > 1000) dutycycle = 1000;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <Buzzer_On+0x78>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ee0:	dd03      	ble.n	8000eea <Buzzer_On+0x3a>
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <Buzzer_On+0x78>)
 8000ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <Buzzer_On+0x78>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <Buzzer_On+0x7c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
//			HAL_Delay(delay);
			setTimer6(delay);
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <Buzzer_On+0x80>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fd8b 	bl	8001a14 <setTimer6>
			delay -= increase;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <Buzzer_On+0x80>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <Buzzer_On+0x84>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <Buzzer_On+0x80>)
 8000f0a:	6013      	str	r3, [r2, #0]
			if (delay <= 0) delay = 10;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <Buzzer_On+0x80>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dc02      	bgt.n	8000f1a <Buzzer_On+0x6a>
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <Buzzer_On+0x80>)
 8000f16:	220a      	movs	r2, #10
 8000f18:	601a      	str	r2, [r3, #0]
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000550 	.word	0x20000550
 8000f24:	2000000c 	.word	0x2000000c
 8000f28:	2000020c 	.word	0x2000020c
 8000f2c:	2000014c 	.word	0x2000014c
 8000f30:	20000024 	.word	0x20000024
 8000f34:	20000020 	.word	0x20000020

08000f38 <Buzzer_Off>:
void Buzzer_Off(){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	dutycycle = 0;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <Buzzer_Off+0x1c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,dutycycle);
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <Buzzer_Off+0x1c>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <Buzzer_Off+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	2000020c 	.word	0x2000020c
 8000f58:	2000014c 	.word	0x2000014c

08000f5c <Uart_transmit>:
void Uart_transmit(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d#","!7SEG:",led12), 1000);
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <Uart_transmit+0x28>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <Uart_transmit+0x2c>)
 8000f66:	4909      	ldr	r1, [pc, #36]	; (8000f8c <Uart_transmit+0x30>)
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <Uart_transmit+0x34>)
 8000f6a:	f003 fc1b 	bl	80047a4 <siprintf>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	4906      	ldr	r1, [pc, #24]	; (8000f90 <Uart_transmit+0x34>)
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <Uart_transmit+0x38>)
 8000f7a:	f002 ff56 	bl	8003e2a <HAL_UART_Transmit>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000018 	.word	0x20000018
 8000f88:	080050b0 	.word	0x080050b0
 8000f8c:	080050b8 	.word	0x080050b8
 8000f90:	200001d8 	.word	0x200001d8
 8000f94:	20000194 	.word	0x20000194

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f000 ff94 	bl	8001ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f86e 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 f99a 	bl	80012dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fa8:	f000 f8ac 	bl	8001104 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fac:	f000 f8f6 	bl	800119c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000fb0:	f000 f96a 	bl	8001288 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fb4:	4827      	ldr	r0, [pc, #156]	; (8001054 <main+0xbc>)
 8000fb6:	f001 ffdd 	bl	8002f74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4826      	ldr	r0, [pc, #152]	; (8001058 <main+0xc0>)
 8000fbe:	f002 f883 	bl	80030c8 <HAL_TIM_PWM_Start>

  status_mode = INIT;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <main+0xc4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]

  setTimer1(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fcc:	f000 fca0 	bl	8001910 <setTimer1>
  setTimer2(1000);
 8000fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd4:	f000 fcb6 	bl	8001944 <setTimer2>
  setTimer3(1000);
 8000fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fdc:	f000 fccc 	bl	8001978 <setTimer3>
  setTimer4(1000);
 8000fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe4:	f000 fce2 	bl	80019ac <setTimer4>
  setTimer5(1000);
 8000fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fec:	f000 fcf8 	bl	80019e0 <setTimer5>
  setTimer6(1000);
 8000ff0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff4:	f000 fd0e 	bl	8001a14 <setTimer6>

  SCH_Init();
 8000ff8:	f000 fabc 	bl	8001574 <SCH_Init>
  SCH_Add_Task(timerRun, 0, 10);
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	2100      	movs	r1, #0
 8001000:	4817      	ldr	r0, [pc, #92]	; (8001060 <main+0xc8>)
 8001002:	f000 fac3 	bl	800158c <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 10);
 8001006:	220a      	movs	r2, #10
 8001008:	2100      	movs	r1, #0
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <main+0xcc>)
 800100c:	f000 fabe 	bl	800158c <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_run, 0 , 10);
 8001010:	220a      	movs	r2, #10
 8001012:	2100      	movs	r1, #0
 8001014:	4814      	ldr	r0, [pc, #80]	; (8001068 <main+0xd0>)
 8001016:	f000 fab9 	bl	800158c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_1_run, 0 , 10);
 800101a:	220a      	movs	r2, #10
 800101c:	2100      	movs	r1, #0
 800101e:	4813      	ldr	r0, [pc, #76]	; (800106c <main+0xd4>)
 8001020:	f000 fab4 	bl	800158c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_2_run, 0 , 10);
 8001024:	220a      	movs	r2, #10
 8001026:	2100      	movs	r1, #0
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <main+0xd8>)
 800102a:	f000 faaf 	bl	800158c <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_led7seg, 0, 10);
 800102e:	220a      	movs	r2, #10
 8001030:	2100      	movs	r1, #0
 8001032:	4810      	ldr	r0, [pc, #64]	; (8001074 <main+0xdc>)
 8001034:	f000 faaa 	bl	800158c <SCH_Add_Task>
  SCH_Add_Task(pedestrian_cramble, 0, 10);
 8001038:	220a      	movs	r2, #10
 800103a:	2100      	movs	r1, #0
 800103c:	480e      	ldr	r0, [pc, #56]	; (8001078 <main+0xe0>)
 800103e:	f000 faa5 	bl	800158c <SCH_Add_Task>
  SCH_Add_Task(Uart_transmit, 0, 10);
 8001042:	220a      	movs	r2, #10
 8001044:	2100      	movs	r1, #0
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <main+0xe4>)
 8001048:	f000 faa0 	bl	800158c <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800104c:	f000 fb5e 	bl	800170c <SCH_Dispatch_Tasks>
 8001050:	e7fc      	b.n	800104c <main+0xb4>
 8001052:	bf00      	nop
 8001054:	20000104 	.word	0x20000104
 8001058:	2000014c 	.word	0x2000014c
 800105c:	200000b8 	.word	0x200000b8
 8001060:	08001a49 	.word	0x08001a49
 8001064:	08000b21 	.word	0x08000b21
 8001068:	0800043d 	.word	0x0800043d
 800106c:	0800014d 	.word	0x0800014d
 8001070:	080002c5 	.word	0x080002c5
 8001074:	080006a1 	.word	0x080006a1
 8001078:	08001441 	.word	0x08001441
 800107c:	08000f5d 	.word	0x08000f5d

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	; 0x40
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2228      	movs	r2, #40	; 0x28
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fb80 	bl	8004794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a6:	2301      	movs	r3, #1
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010aa:	2310      	movs	r3, #16
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	2302      	movs	r3, #2
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010b6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 faed 	bl	80026a0 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010cc:	f000 f9b2 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2102      	movs	r1, #2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fd5a 	bl	8002ba4 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010f6:	f000 f99d 	bl	8001434 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3740      	adds	r7, #64	; 0x40
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM2_Init+0x94>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM2_Init+0x94>)
 800112a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800112e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_TIM2_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM2_Init+0x94>)
 8001138:	2209      	movs	r2, #9
 800113a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM2_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM2_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM2_Init+0x94>)
 800114a:	f001 fec3 	bl	8002ed4 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001154:	f000 f96e 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM2_Init+0x94>)
 8001166:	f002 fa17 	bl	8003598 <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f960 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM2_Init+0x94>)
 8001182:	f002 fd95 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f952 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000104 	.word	0x20000104

0800119c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011ce:	4a2d      	ldr	r2, [pc, #180]	; (8001284 <MX_TIM3_Init+0xe8>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011d4:	223f      	movs	r2, #63	; 0x3f
 80011d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f2:	4823      	ldr	r0, [pc, #140]	; (8001280 <MX_TIM3_Init+0xe4>)
 80011f4:	f001 fe6e 	bl	8002ed4 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011fe:	f000 f919 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120c:	4619      	mov	r1, r3
 800120e:	481c      	ldr	r0, [pc, #112]	; (8001280 <MX_TIM3_Init+0xe4>)
 8001210:	f002 f9c2 	bl	8003598 <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800121a:	f000 f90b 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <MX_TIM3_Init+0xe4>)
 8001220:	f001 fefa 	bl	8003018 <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800122a:	f000 f903 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	4619      	mov	r1, r3
 800123c:	4810      	ldr	r0, [pc, #64]	; (8001280 <MX_TIM3_Init+0xe4>)
 800123e:	f002 fd37 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001248:	f000 f8f4 	bl	8001434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_TIM3_Init+0xe4>)
 8001264:	f002 f8da 	bl	800341c <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800126e:	f000 f8e1 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <MX_TIM3_Init+0xe4>)
 8001274:	f000 fcec 	bl	8001c50 <HAL_TIM_MspPostInit>

}
 8001278:	bf00      	nop
 800127a:	3738      	adds	r7, #56	; 0x38
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000014c 	.word	0x2000014c
 8001284:	40000400 	.word	0x40000400

08001288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <MX_USART2_UART_Init+0x50>)
 8001290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 8001294:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f002 fd66 	bl	8003d90 <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ca:	f000 f8b3 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000194 	.word	0x20000194
 80012d8:	40004400 	.word	0x40004400

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <MX_GPIO_Init+0x148>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <MX_GPIO_Init+0x148>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b49      	ldr	r3, [pc, #292]	; (8001424 <MX_GPIO_Init+0x148>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	4b46      	ldr	r3, [pc, #280]	; (8001424 <MX_GPIO_Init+0x148>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a45      	ldr	r2, [pc, #276]	; (8001424 <MX_GPIO_Init+0x148>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <MX_GPIO_Init+0x148>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001320:	4b40      	ldr	r3, [pc, #256]	; (8001424 <MX_GPIO_Init+0x148>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a3f      	ldr	r2, [pc, #252]	; (8001424 <MX_GPIO_Init+0x148>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <MX_GPIO_Init+0x148>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2110      	movs	r1, #16
 800133c:	483a      	ldr	r0, [pc, #232]	; (8001428 <MX_GPIO_Init+0x14c>)
 800133e:	f001 f97e 	bl	800263e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f240 3101 	movw	r1, #769	; 0x301
 8001348:	4838      	ldr	r0, [pc, #224]	; (800142c <MX_GPIO_Init+0x150>)
 800134a:	f001 f978 	bl	800263e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLK_Pin|DATA_Pin|LIGHT1_B_Pin|LIGHT1_A_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001354:	4836      	ldr	r0, [pc, #216]	; (8001430 <MX_GPIO_Init+0x154>)
 8001356:	f001 f972 	bl	800263e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_P_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_P_Pin|BUTTON_1_Pin;
 800135a:	2303      	movs	r3, #3
 800135c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	482e      	ldr	r0, [pc, #184]	; (8001428 <MX_GPIO_Init+0x14c>)
 800136e:	f000 ffcb 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIGHT2_A_Pin */
  GPIO_InitStruct.Pin = LIGHT2_A_Pin;
 8001372:	2310      	movs	r3, #16
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIGHT2_A_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	4827      	ldr	r0, [pc, #156]	; (8001428 <MX_GPIO_Init+0x14c>)
 800138a:	f000 ffbd 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT2_B_Pin P_LIGHT_A_Pin P_LIGHT_B_Pin */
  GPIO_InitStruct.Pin = LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin;
 800138e:	f240 3301 	movw	r3, #769	; 0x301
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2302      	movs	r3, #2
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4821      	ldr	r0, [pc, #132]	; (800142c <MX_GPIO_Init+0x150>)
 80013a8:	f000 ffae 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	481a      	ldr	r0, [pc, #104]	; (800142c <MX_GPIO_Init+0x150>)
 80013c2:	f000 ffa1 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin;
 80013c6:	23c0      	movs	r3, #192	; 0xc0
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	4815      	ldr	r0, [pc, #84]	; (8001430 <MX_GPIO_Init+0x154>)
 80013da:	f000 ff95 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 80013de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	480e      	ldr	r0, [pc, #56]	; (8001430 <MX_GPIO_Init+0x154>)
 80013f8:	f000 ff86 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT1_B_Pin LIGHT1_A_Pin */
  GPIO_InitStruct.Pin = LIGHT1_B_Pin|LIGHT1_A_Pin;
 80013fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2302      	movs	r3, #2
 800140c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4619      	mov	r1, r3
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_GPIO_Init+0x154>)
 8001416:	f000 ff77 	bl	8002308 <HAL_GPIO_Init>

}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800
 800142c:	40010c00 	.word	0x40010c00
 8001430:	40011000 	.word	0x40011000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <pedestrian_cramble>:
//int counter_Pedes_On = 0;
//
int dutycycle = 0;
int delay = 380;
int count = 0;
void pedestrian_cramble(){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	switch (status_pedes){
 8001444:	4b45      	ldr	r3, [pc, #276]	; (800155c <pedestrian_cramble+0x11c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b29      	cmp	r3, #41	; 0x29
 800144a:	d037      	beq.n	80014bc <pedestrian_cramble+0x7c>
 800144c:	2b29      	cmp	r3, #41	; 0x29
 800144e:	dc7c      	bgt.n	800154a <pedestrian_cramble+0x10a>
 8001450:	2b20      	cmp	r3, #32
 8001452:	d054      	beq.n	80014fe <pedestrian_cramble+0xbe>
 8001454:	2b28      	cmp	r3, #40	; 0x28
 8001456:	d178      	bne.n	800154a <pedestrian_cramble+0x10a>
	case Pedes_Off:
		SetPedesOff();
 8001458:	f7ff fc9a 	bl	8000d90 <SetPedesOff>
		Buzzer_Off();
 800145c:	f7ff fd6c 	bl	8000f38 <Buzzer_Off>
		if (isButtonflag(butp) == 1){
 8001460:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <pedestrian_cramble+0x120>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fa2f 	bl	80008c8 <isButtonflag>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d16e      	bne.n	800154e <pedestrian_cramble+0x10e>
			count = 0;
 8001470:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <pedestrian_cramble+0x124>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
			if (status_ver == AUTO_RED){
 8001476:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <pedestrian_cramble+0x128>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b08      	cmp	r3, #8
 800147c:	d113      	bne.n	80014a6 <pedestrian_cramble+0x66>
				status_pedes = Pedes_Go;
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <pedestrian_cramble+0x11c>)
 8001480:	2229      	movs	r2, #41	; 0x29
 8001482:	601a      	str	r2, [r3, #0]
				dutycycle = 0;
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <pedestrian_cramble+0x12c>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
				delay = 380;
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <pedestrian_cramble+0x130>)
 800148c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001490:	601a      	str	r2, [r3, #0]
				clearTimer6();
 8001492:	f000 fa2d 	bl	80018f0 <clearTimer6>
				Buzzer_On();
 8001496:	f7ff fd0b 	bl	8000eb0 <Buzzer_On>
				count++;
 800149a:	4b32      	ldr	r3, [pc, #200]	; (8001564 <pedestrian_cramble+0x124>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	4a30      	ldr	r2, [pc, #192]	; (8001564 <pedestrian_cramble+0x124>)
 80014a2:	6013      	str	r3, [r2, #0]
				status_pedes = Pedes_Stop;
				Buzzer_Off();
				count++;
			}
		}
		break;
 80014a4:	e053      	b.n	800154e <pedestrian_cramble+0x10e>
				status_pedes = Pedes_Stop;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <pedestrian_cramble+0x11c>)
 80014a8:	2220      	movs	r2, #32
 80014aa:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 80014ac:	f7ff fd44 	bl	8000f38 <Buzzer_Off>
				count++;
 80014b0:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <pedestrian_cramble+0x124>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <pedestrian_cramble+0x124>)
 80014b8:	6013      	str	r3, [r2, #0]
		break;
 80014ba:	e048      	b.n	800154e <pedestrian_cramble+0x10e>
	case Pedes_Go:
		SetPedesGreen();
 80014bc:	f7ff fc56 	bl	8000d6c <SetPedesGreen>
		Buzzer_On();
 80014c0:	f7ff fcf6 	bl	8000eb0 <Buzzer_On>
		if (status_ver == AUTO_GREEN || status_ver == AUTO_YELLOW){
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <pedestrian_cramble+0x128>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d003      	beq.n	80014d4 <pedestrian_cramble+0x94>
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <pedestrian_cramble+0x128>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b0a      	cmp	r3, #10
 80014d2:	d13e      	bne.n	8001552 <pedestrian_cramble+0x112>
			if (count >= Ncycle_Pe_off * 2) { // 2 cycle => Off
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <pedestrian_cramble+0x124>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	dd05      	ble.n	80014e8 <pedestrian_cramble+0xa8>
				status_pedes = Pedes_Off;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <pedestrian_cramble+0x11c>)
 80014de:	2228      	movs	r2, #40	; 0x28
 80014e0:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 80014e2:	f7ff fd29 	bl	8000f38 <Buzzer_Off>
				status_pedes = Pedes_Stop;
				Buzzer_Off();
				count++;
			}
		}
		break;
 80014e6:	e034      	b.n	8001552 <pedestrian_cramble+0x112>
				status_pedes = Pedes_Stop;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <pedestrian_cramble+0x11c>)
 80014ea:	2220      	movs	r2, #32
 80014ec:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 80014ee:	f7ff fd23 	bl	8000f38 <Buzzer_Off>
				count++;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <pedestrian_cramble+0x124>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <pedestrian_cramble+0x124>)
 80014fa:	6013      	str	r3, [r2, #0]
		break;
 80014fc:	e029      	b.n	8001552 <pedestrian_cramble+0x112>
	case Pedes_Stop:
		SetPedesRed();
 80014fe:	f7ff fc23 	bl	8000d48 <SetPedesRed>
		Buzzer_Off();
 8001502:	f7ff fd19 	bl	8000f38 <Buzzer_Off>
		if (status_ver == AUTO_RED){
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <pedestrian_cramble+0x128>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b08      	cmp	r3, #8
 800150c:	d123      	bne.n	8001556 <pedestrian_cramble+0x116>
			if (count >= Ncycle_Pe_off * 2) {//2 cycle => Off
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <pedestrian_cramble+0x124>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b03      	cmp	r3, #3
 8001514:	dd05      	ble.n	8001522 <pedestrian_cramble+0xe2>
				status_pedes = Pedes_Off;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <pedestrian_cramble+0x11c>)
 8001518:	2228      	movs	r2, #40	; 0x28
 800151a:	601a      	str	r2, [r3, #0]
				Buzzer_Off();
 800151c:	f7ff fd0c 	bl	8000f38 <Buzzer_Off>
				clearTimer6();
				Buzzer_On();
				count++;
			}
		}
		break;
 8001520:	e019      	b.n	8001556 <pedestrian_cramble+0x116>
				status_pedes = Pedes_Go;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <pedestrian_cramble+0x11c>)
 8001524:	2229      	movs	r2, #41	; 0x29
 8001526:	601a      	str	r2, [r3, #0]
				dutycycle = 0;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <pedestrian_cramble+0x12c>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
				delay = 380;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <pedestrian_cramble+0x130>)
 8001530:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001534:	601a      	str	r2, [r3, #0]
				clearTimer6();
 8001536:	f000 f9db 	bl	80018f0 <clearTimer6>
				Buzzer_On();
 800153a:	f7ff fcb9 	bl	8000eb0 <Buzzer_On>
				count++;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <pedestrian_cramble+0x124>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <pedestrian_cramble+0x124>)
 8001546:	6013      	str	r3, [r2, #0]
		break;
 8001548:	e005      	b.n	8001556 <pedestrian_cramble+0x116>
	default:
		break;
 800154a:	bf00      	nop
 800154c:	e004      	b.n	8001558 <pedestrian_cramble+0x118>
		break;
 800154e:	bf00      	nop
 8001550:	e002      	b.n	8001558 <pedestrian_cramble+0x118>
		break;
 8001552:	bf00      	nop
 8001554:	e000      	b.n	8001558 <pedestrian_cramble+0x118>
		break;
 8001556:	bf00      	nop
	}
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200000c8 	.word	0x200000c8
 8001560:	20000008 	.word	0x20000008
 8001564:	20000210 	.word	0x20000210
 8001568:	200000bc 	.word	0x200000bc
 800156c:	2000020c 	.word	0x2000020c
 8001570:	20000024 	.word	0x20000024

08001574 <SCH_Init>:
 */
#include "scheduler.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <SCH_Init+0x14>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000534 	.word	0x20000534

0800158c <SCH_Add_Task>:

//int Tick = 10; // 10ms

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <SCH_Add_Task+0xb4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b27      	cmp	r3, #39	; 0x27
 800159e:	d84a      	bhi.n	8001636 <SCH_Add_Task+0xaa>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <SCH_Add_Task+0xb4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4a27      	ldr	r2, [pc, #156]	; (8001644 <SCH_Add_Task+0xb8>)
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TICK;
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <SCH_Add_Task+0xb4>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4a22      	ldr	r2, [pc, #136]	; (8001648 <SCH_Add_Task+0xbc>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	491f      	ldr	r1, [pc, #124]	; (8001644 <SCH_Add_Task+0xb8>)
 80015c8:	4603      	mov	r3, r0
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4403      	add	r3, r0
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3304      	adds	r3, #4
 80015d4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD/TICK;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <SCH_Add_Task+0xb4>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <SCH_Add_Task+0xbc>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	4917      	ldr	r1, [pc, #92]	; (8001644 <SCH_Add_Task+0xb8>)
 80015e8:	4603      	mov	r3, r0
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4403      	add	r3, r0
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3308      	adds	r3, #8
 80015f4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <SCH_Add_Task+0xb4>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4a11      	ldr	r2, [pc, #68]	; (8001644 <SCH_Add_Task+0xb8>)
 80015fe:	460b      	mov	r3, r1
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	330c      	adds	r3, #12
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <SCH_Add_Task+0xb4>)
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <SCH_Add_Task+0xb4>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	4610      	mov	r0, r2
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SCH_Add_Task+0xb8>)
 800161c:	460b      	mov	r3, r1
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	3310      	adds	r3, #16
 8001628:	6018      	str	r0, [r3, #0]


		current_index_task++;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SCH_Add_Task+0xb4>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b03      	ldr	r3, [pc, #12]	; (8001640 <SCH_Add_Task+0xb4>)
 8001634:	701a      	strb	r2, [r3, #0]
	}
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20000534 	.word	0x20000534
 8001644:	20000214 	.word	0x20000214
 8001648:	cccccccd 	.word	0xcccccccd

0800164c <SCH_Update>:

void SCH_Update(void){
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	e048      	b.n	80016ea <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0 ){
 8001658:	492a      	ldr	r1, [pc, #168]	; (8001704 <SCH_Update+0xb8>)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3304      	adds	r3, #4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d013      	beq.n	8001696 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 800166e:	4925      	ldr	r1, [pc, #148]	; (8001704 <SCH_Update+0xb8>)
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	3304      	adds	r3, #4
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1e59      	subs	r1, r3, #1
 8001682:	4820      	ldr	r0, [pc, #128]	; (8001704 <SCH_Update+0xb8>)
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4403      	add	r3, r0
 8001690:	3304      	adds	r3, #4
 8001692:	6019      	str	r1, [r3, #0]
 8001694:	e026      	b.n	80016e4 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay =SCH_tasks_G[i].Period;
 8001696:	491b      	ldr	r1, [pc, #108]	; (8001704 <SCH_Update+0xb8>)
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3308      	adds	r3, #8
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	4816      	ldr	r0, [pc, #88]	; (8001704 <SCH_Update+0xb8>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4403      	add	r3, r0
 80016b6:	3304      	adds	r3, #4
 80016b8:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 80016ba:	4912      	ldr	r1, [pc, #72]	; (8001704 <SCH_Update+0xb8>)
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	330c      	adds	r3, #12
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2d8      	uxtb	r0, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <SCH_Update+0xb8>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	330c      	adds	r3, #12
 80016e0:	4602      	mov	r2, r0
 80016e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < current_index_task; i++){
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3301      	adds	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <SCH_Update+0xbc>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4293      	cmp	r3, r2
 80016f4:	dbb0      	blt.n	8001658 <SCH_Update+0xc>
		}
	}
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000214 	.word	0x20000214
 8001708:	20000534 	.word	0x20000534

0800170c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	e039      	b.n	800178c <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[i].RunMe > 0 ){
 8001718:	4922      	ldr	r1, [pc, #136]	; (80017a4 <SCH_Dispatch_Tasks+0x98>)
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	330c      	adds	r3, #12
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d02b      	beq.n	8001786 <SCH_Dispatch_Tasks+0x7a>
			SCH_tasks_G[i].RunMe--;
 800172e:	491d      	ldr	r1, [pc, #116]	; (80017a4 <SCH_Dispatch_Tasks+0x98>)
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	330c      	adds	r3, #12
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3b01      	subs	r3, #1
 8001742:	b2d8      	uxtb	r0, r3
 8001744:	4917      	ldr	r1, [pc, #92]	; (80017a4 <SCH_Dispatch_Tasks+0x98>)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	330c      	adds	r3, #12
 8001754:	4602      	mov	r2, r0
 8001756:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)(); // Run the task
 8001758:	4912      	ldr	r1, [pc, #72]	; (80017a4 <SCH_Dispatch_Tasks+0x98>)
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4798      	blx	r3
			if (SCH_tasks_G[i].Period == 0 ){ // one shot task
 800176a:	490e      	ldr	r1, [pc, #56]	; (80017a4 <SCH_Dispatch_Tasks+0x98>)
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	3308      	adds	r3, #8
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(i);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f813 	bl	80017ac <SCH_Delete_Task>
	for (int i = 0 ; i < current_index_task; i++){
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SCH_Dispatch_Tasks+0x9c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4293      	cmp	r3, r2
 8001796:	dbbf      	blt.n	8001718 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000214 	.word	0x20000214
 80017a8:	20000534 	.word	0x20000534

080017ac <SCH_Delete_Task>:


void SCH_Delete_Task(int index){
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	if (index >= current_index_task ){ //
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <SCH_Delete_Task+0xdc>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4293      	cmp	r3, r2
 80017be:	da5d      	bge.n	800187c <SCH_Delete_Task+0xd0>

		return;
	}else {
		for (int i = index; i <current_index_task - 1; i++){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e04d      	b.n	8001862 <SCH_Delete_Task+0xb6>
			SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	4930      	ldr	r1, [pc, #192]	; (800188c <SCH_Delete_Task+0xe0>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	482c      	ldr	r0, [pc, #176]	; (800188c <SCH_Delete_Task+0xe0>)
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4403      	add	r3, r0
 80017e6:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	4927      	ldr	r1, [pc, #156]	; (800188c <SCH_Delete_Task+0xe0>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	3308      	adds	r3, #8
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	4823      	ldr	r0, [pc, #140]	; (800188c <SCH_Delete_Task+0xe0>)
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4403      	add	r3, r0
 800180a:	3308      	adds	r3, #8
 800180c:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i+1].RunMe;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	491e      	ldr	r1, [pc, #120]	; (800188c <SCH_Delete_Task+0xe0>)
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	330c      	adds	r3, #12
 8001820:	7818      	ldrb	r0, [r3, #0]
 8001822:	491a      	ldr	r1, [pc, #104]	; (800188c <SCH_Delete_Task+0xe0>)
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	330c      	adds	r3, #12
 8001832:	4602      	mov	r2, r0
 8001834:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	4914      	ldr	r1, [pc, #80]	; (800188c <SCH_Delete_Task+0xe0>)
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	3304      	adds	r3, #4
 8001848:	6819      	ldr	r1, [r3, #0]
 800184a:	4810      	ldr	r0, [pc, #64]	; (800188c <SCH_Delete_Task+0xe0>)
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4403      	add	r3, r0
 8001858:	3304      	adds	r3, #4
 800185a:	6019      	str	r1, [r3, #0]
		for (int i = index; i <current_index_task - 1; i++){
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <SCH_Delete_Task+0xdc>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	3b01      	subs	r3, #1
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	429a      	cmp	r2, r3
 800186c:	dbab      	blt.n	80017c6 <SCH_Delete_Task+0x1a>
		}
		current_index_task--;
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <SCH_Delete_Task+0xdc>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SCH_Delete_Task+0xdc>)
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e000      	b.n	800187e <SCH_Delete_Task+0xd2>
		return;
 800187c:	bf00      	nop
	}
}
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000534 	.word	0x20000534
 800188c:	20000214 	.word	0x20000214

08001890 <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <clearTimer1+0x18>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <clearTimer1+0x1c>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	20000558 	.word	0x20000558
 80018ac:	2000053c 	.word	0x2000053c

080018b0 <clearTimer2>:
void clearTimer2(){
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <clearTimer2+0x18>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <clearTimer2+0x1c>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	2000055c 	.word	0x2000055c
 80018cc:	20000540 	.word	0x20000540

080018d0 <clearTimer3>:
void clearTimer3(){
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <clearTimer3+0x18>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <clearTimer3+0x1c>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	20000560 	.word	0x20000560
 80018ec:	20000544 	.word	0x20000544

080018f0 <clearTimer6>:
}
void clearTimer5(){
	timer5_counter = 0;
	timer5_flag = 1;
}
void clearTimer6(){
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	timer6_counter = 0;
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <clearTimer6+0x18>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
	timer6_flag = 1;
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <clearTimer6+0x1c>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	2000056c 	.word	0x2000056c
 800190c:	20000550 	.word	0x20000550

08001910 <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <setTimer1+0x28>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001922:	4a06      	ldr	r2, [pc, #24]	; (800193c <setTimer1+0x2c>)
 8001924:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <setTimer1+0x30>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000028 	.word	0x20000028
 800193c:	20000558 	.word	0x20000558
 8001940:	2000053c 	.word	0x2000053c

08001944 <setTimer2>:

void setTimer2( int duration){
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <setTimer2+0x28>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	fb92 f3f3 	sdiv	r3, r2, r3
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <setTimer2+0x2c>)
 8001958:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <setTimer2+0x30>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000028 	.word	0x20000028
 8001970:	2000055c 	.word	0x2000055c
 8001974:	20000540 	.word	0x20000540

08001978 <setTimer3>:

void setTimer3( int duration){
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <setTimer3+0x28>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	fb92 f3f3 	sdiv	r3, r2, r3
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <setTimer3+0x2c>)
 800198c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <setTimer3+0x30>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000028 	.word	0x20000028
 80019a4:	20000560 	.word	0x20000560
 80019a8:	20000544 	.word	0x20000544

080019ac <setTimer4>:

void setTimer4( int duration){
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <setTimer4+0x28>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <setTimer4+0x2c>)
 80019c0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <setTimer4+0x30>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000028 	.word	0x20000028
 80019d8:	20000564 	.word	0x20000564
 80019dc:	20000548 	.word	0x20000548

080019e0 <setTimer5>:

void setTimer5( int duration){
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <setTimer5+0x28>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80019f2:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <setTimer5+0x2c>)
 80019f4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <setTimer5+0x30>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000028 	.word	0x20000028
 8001a0c:	20000568 	.word	0x20000568
 8001a10:	2000054c 	.word	0x2000054c

08001a14 <setTimer6>:
void setTimer6( int duration){
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <setTimer6+0x28>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a26:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <setTimer6+0x2c>)
 8001a28:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <setTimer6+0x30>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000028 	.word	0x20000028
 8001a40:	2000056c 	.word	0x2000056c
 8001a44:	20000550 	.word	0x20000550

08001a48 <timerRun>:

void timerRun (){
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <timerRun+0xec>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dd0b      	ble.n	8001a6c <timerRun+0x24>
		timer0_counter --;
 8001a54:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <timerRun+0xec>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	4a36      	ldr	r2, [pc, #216]	; (8001b34 <timerRun+0xec>)
 8001a5c:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 8001a5e:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <timerRun+0xec>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	dc02      	bgt.n	8001a6c <timerRun+0x24>
			timer0_flag = 1;
 8001a66:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <timerRun+0xf0>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <timerRun+0xf4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	dd0b      	ble.n	8001a8c <timerRun+0x44>
		timer1_counter--;
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <timerRun+0xf4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	4a30      	ldr	r2, [pc, #192]	; (8001b3c <timerRun+0xf4>)
 8001a7c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <timerRun+0xf4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	dc02      	bgt.n	8001a8c <timerRun+0x44>
			timer1_flag = 1;
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <timerRun+0xf8>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <timerRun+0xfc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	dd0b      	ble.n	8001aac <timerRun+0x64>
		timer2_counter--;
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <timerRun+0xfc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <timerRun+0xfc>)
 8001a9c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <timerRun+0xfc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dc02      	bgt.n	8001aac <timerRun+0x64>
			timer2_flag = 1;
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <timerRun+0x100>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <timerRun+0x104>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	dd0b      	ble.n	8001acc <timerRun+0x84>
		timer3_counter--;
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <timerRun+0x104>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <timerRun+0x104>)
 8001abc:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <timerRun+0x104>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	dc02      	bgt.n	8001acc <timerRun+0x84>
			timer3_flag = 1;
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <timerRun+0x108>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <timerRun+0x10c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	dd0b      	ble.n	8001aec <timerRun+0xa4>
		timer4_counter--;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <timerRun+0x10c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <timerRun+0x10c>)
 8001adc:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <timerRun+0x10c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	dc02      	bgt.n	8001aec <timerRun+0xa4>
			timer4_flag = 1;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <timerRun+0x110>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <timerRun+0x114>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	dd0b      	ble.n	8001b0c <timerRun+0xc4>
			timer5_counter--;
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <timerRun+0x114>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <timerRun+0x114>)
 8001afc:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <timerRun+0x114>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	dc02      	bgt.n	8001b0c <timerRun+0xc4>
				timer5_flag = 1;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <timerRun+0x118>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <timerRun+0x11c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	dd0b      	ble.n	8001b2c <timerRun+0xe4>
			timer6_counter--;
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <timerRun+0x11c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <timerRun+0x11c>)
 8001b1c:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <timerRun+0x11c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	dc02      	bgt.n	8001b2c <timerRun+0xe4>
				timer6_flag = 1;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <timerRun+0x120>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	20000554 	.word	0x20000554
 8001b38:	20000538 	.word	0x20000538
 8001b3c:	20000558 	.word	0x20000558
 8001b40:	2000053c 	.word	0x2000053c
 8001b44:	2000055c 	.word	0x2000055c
 8001b48:	20000540 	.word	0x20000540
 8001b4c:	20000560 	.word	0x20000560
 8001b50:	20000544 	.word	0x20000544
 8001b54:	20000564 	.word	0x20000564
 8001b58:	20000548 	.word	0x20000548
 8001b5c:	20000568 	.word	0x20000568
 8001b60:	2000054c 	.word	0x2000054c
 8001b64:	2000056c 	.word	0x2000056c
 8001b68:	20000550 	.word	0x20000550

08001b6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6193      	str	r3, [r2, #24]
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	61d3      	str	r3, [r2, #28]
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_MspInit+0x60>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_MspInit+0x60>)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000

08001bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be0:	d114      	bne.n	8001c0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_TIM_Base_MspInit+0x78>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <HAL_TIM_Base_MspInit+0x78>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	61d3      	str	r3, [r2, #28]
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_TIM_Base_MspInit+0x78>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	201c      	movs	r0, #28
 8001c00:	f000 fa9b 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c04:	201c      	movs	r0, #28
 8001c06:	f000 fab4 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c0a:	e018      	b.n	8001c3e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_TIM_Base_MspInit+0x7c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d113      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_TIM_Base_MspInit+0x78>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <HAL_TIM_Base_MspInit+0x78>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	61d3      	str	r3, [r2, #28]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_TIM_Base_MspInit+0x78>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	201d      	movs	r0, #29
 8001c34:	f000 fa81 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c38:	201d      	movs	r0, #29
 8001c3a:	f000 fa9a 	bl	8002172 <HAL_NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40000400 	.word	0x40000400

08001c50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_TIM_MspPostInit+0x58>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d117      	bne.n	8001ca0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_TIM_MspPostInit+0x5c>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_TIM_MspPostInit+0x5c>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_TIM_MspPostInit+0x5c>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c88:	2340      	movs	r3, #64	; 0x40
 8001c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <HAL_TIM_MspPostInit+0x60>)
 8001c9c:	f000 fb34 	bl	8002308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010800 	.word	0x40010800

08001cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_UART_MspInit+0x98>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d137      	bne.n	8001d44 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_UART_MspInit+0x9c>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_UART_MspInit+0x9c>)
 8001cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cde:	61d3      	str	r3, [r2, #28]
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_UART_MspInit+0x9c>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_UART_MspInit+0x9c>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_UART_MspInit+0x9c>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_UART_MspInit+0x9c>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d04:	2304      	movs	r3, #4
 8001d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	4619      	mov	r1, r3
 8001d16:	480f      	ldr	r0, [pc, #60]	; (8001d54 <HAL_UART_MspInit+0xa0>)
 8001d18:	f000 faf6 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4809      	ldr	r0, [pc, #36]	; (8001d54 <HAL_UART_MspInit+0xa0>)
 8001d30:	f000 faea 	bl	8002308 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	2026      	movs	r0, #38	; 0x26
 8001d3a:	f000 f9fe 	bl	800213a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d3e:	2026      	movs	r0, #38	; 0x26
 8001d40:	f000 fa17 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40004400 	.word	0x40004400
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010800 	.word	0x40010800

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0x4>

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9e:	f000 f8d9 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <TIM2_IRQHandler+0x10>)
 8001dae:	f001 fa2d 	bl	800320c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000104 	.word	0x20000104

08001dbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM3_IRQHandler+0x10>)
 8001dc2:	f001 fa23 	bl	800320c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000014c 	.word	0x2000014c

08001dd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <USART2_IRQHandler+0x10>)
 8001dd6:	f002 f8bb 	bl	8003f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000194 	.word	0x20000194

08001de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <_sbrk+0x5c>)
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <_sbrk+0x60>)
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <_sbrk+0x64>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <_sbrk+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d207      	bcs.n	8001e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e14:	f002 fc94 	bl	8004740 <__errno>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	e009      	b.n	8001e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <_sbrk+0x64>)
 8001e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20005000 	.word	0x20005000
 8001e44:	00000400 	.word	0x00000400
 8001e48:	20000570 	.word	0x20000570
 8001e4c:	20000588 	.word	0x20000588

08001e50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d101      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x16>
//		button_reading();
//		timerRun();
		//getKeyInput();
		SCH_Update();
 8001e6e:	f7ff fbed 	bl	800164c <SCH_Update>
	}
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e7e:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e94:	4c0a      	ldr	r4, [pc, #40]	; (8001ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea2:	f7ff ffd5 	bl	8001e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f002 fc51 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eaa:	f7ff f875 	bl	8000f98 <main>
  bx lr
 8001eae:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001eb8:	08005124 	.word	0x08005124
  ldr r2, =_sbss
 8001ebc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001ec0:	20000588 	.word	0x20000588

08001ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <ADC1_2_IRQHandler>
	...

08001ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_Init+0x28>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_Init+0x28>)
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 f923 	bl	8002124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ede:	200f      	movs	r0, #15
 8001ee0:	f000 f808 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff fe42 	bl	8001b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x54>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_InitTick+0x58>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f93b 	bl	800218e <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f000 f903 	bl	800213a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_InitTick+0x5c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	2000002c 	.word	0x2000002c
 8001f4c:	20000034 	.word	0x20000034
 8001f50:	20000030 	.word	0x20000030

08001f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_IncTick+0x1c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_IncTick+0x20>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_IncTick+0x20>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000034 	.word	0x20000034
 8001f74:	20000574 	.word	0x20000574

08001f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_GetTick+0x10>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	20000574 	.word	0x20000574

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4906      	ldr	r1, [pc, #24]	; (8002024 <__NVIC_EnableIRQ+0x34>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f0:	d301      	bcc.n	80020f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00f      	b.n	8002116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <SysTick_Config+0x40>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fe:	210f      	movs	r1, #15
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f7ff ff90 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Config+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SysTick_Config+0x40>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff2d 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff42 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff90 	bl	800207c <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5f 	bl	8002028 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff35 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffa2 	bl	80020e0 <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d008      	beq.n	80021ce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2204      	movs	r2, #4
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e020      	b.n	8002210 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 020e 	bic.w	r2, r2, #14
 80021dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
	...

0800221c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800222e:	2b02      	cmp	r3, #2
 8002230:	d005      	beq.n	800223e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2204      	movs	r2, #4
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e051      	b.n	80022e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 020e 	bic.w	r2, r2, #14
 800224c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a22      	ldr	r2, [pc, #136]	; (80022ec <HAL_DMA_Abort_IT+0xd0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d029      	beq.n	80022bc <HAL_DMA_Abort_IT+0xa0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_DMA_Abort_IT+0xd4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d022      	beq.n	80022b8 <HAL_DMA_Abort_IT+0x9c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <HAL_DMA_Abort_IT+0xd8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d01a      	beq.n	80022b2 <HAL_DMA_Abort_IT+0x96>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_DMA_Abort_IT+0xdc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d012      	beq.n	80022ac <HAL_DMA_Abort_IT+0x90>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <HAL_DMA_Abort_IT+0xe0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00a      	beq.n	80022a6 <HAL_DMA_Abort_IT+0x8a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_DMA_Abort_IT+0xe4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d102      	bne.n	80022a0 <HAL_DMA_Abort_IT+0x84>
 800229a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800229e:	e00e      	b.n	80022be <HAL_DMA_Abort_IT+0xa2>
 80022a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a4:	e00b      	b.n	80022be <HAL_DMA_Abort_IT+0xa2>
 80022a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022aa:	e008      	b.n	80022be <HAL_DMA_Abort_IT+0xa2>
 80022ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b0:	e005      	b.n	80022be <HAL_DMA_Abort_IT+0xa2>
 80022b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b6:	e002      	b.n	80022be <HAL_DMA_Abort_IT+0xa2>
 80022b8:	2310      	movs	r3, #16
 80022ba:	e000      	b.n	80022be <HAL_DMA_Abort_IT+0xa2>
 80022bc:	2301      	movs	r3, #1
 80022be:	4a11      	ldr	r2, [pc, #68]	; (8002304 <HAL_DMA_Abort_IT+0xe8>)
 80022c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	4798      	blx	r3
    } 
  }
  return status;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40020008 	.word	0x40020008
 80022f0:	4002001c 	.word	0x4002001c
 80022f4:	40020030 	.word	0x40020030
 80022f8:	40020044 	.word	0x40020044
 80022fc:	40020058 	.word	0x40020058
 8002300:	4002006c 	.word	0x4002006c
 8002304:	40020000 	.word	0x40020000

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b08b      	sub	sp, #44	; 0x2c
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231a:	e169      	b.n	80025f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800231c:	2201      	movs	r2, #1
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8158 	bne.w	80025ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4a9a      	ldr	r2, [pc, #616]	; (80025a8 <HAL_GPIO_Init+0x2a0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d05e      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002344:	4a98      	ldr	r2, [pc, #608]	; (80025a8 <HAL_GPIO_Init+0x2a0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d875      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800234a:	4a98      	ldr	r2, [pc, #608]	; (80025ac <HAL_GPIO_Init+0x2a4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d058      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002350:	4a96      	ldr	r2, [pc, #600]	; (80025ac <HAL_GPIO_Init+0x2a4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d86f      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002356:	4a96      	ldr	r2, [pc, #600]	; (80025b0 <HAL_GPIO_Init+0x2a8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d052      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 800235c:	4a94      	ldr	r2, [pc, #592]	; (80025b0 <HAL_GPIO_Init+0x2a8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d869      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002362:	4a94      	ldr	r2, [pc, #592]	; (80025b4 <HAL_GPIO_Init+0x2ac>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d04c      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002368:	4a92      	ldr	r2, [pc, #584]	; (80025b4 <HAL_GPIO_Init+0x2ac>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d863      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800236e:	4a92      	ldr	r2, [pc, #584]	; (80025b8 <HAL_GPIO_Init+0x2b0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d046      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002374:	4a90      	ldr	r2, [pc, #576]	; (80025b8 <HAL_GPIO_Init+0x2b0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d85d      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800237a:	2b12      	cmp	r3, #18
 800237c:	d82a      	bhi.n	80023d4 <HAL_GPIO_Init+0xcc>
 800237e:	2b12      	cmp	r3, #18
 8002380:	d859      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <HAL_GPIO_Init+0x80>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	08002403 	.word	0x08002403
 800238c:	080023dd 	.word	0x080023dd
 8002390:	080023ef 	.word	0x080023ef
 8002394:	08002431 	.word	0x08002431
 8002398:	08002437 	.word	0x08002437
 800239c:	08002437 	.word	0x08002437
 80023a0:	08002437 	.word	0x08002437
 80023a4:	08002437 	.word	0x08002437
 80023a8:	08002437 	.word	0x08002437
 80023ac:	08002437 	.word	0x08002437
 80023b0:	08002437 	.word	0x08002437
 80023b4:	08002437 	.word	0x08002437
 80023b8:	08002437 	.word	0x08002437
 80023bc:	08002437 	.word	0x08002437
 80023c0:	08002437 	.word	0x08002437
 80023c4:	08002437 	.word	0x08002437
 80023c8:	08002437 	.word	0x08002437
 80023cc:	080023e5 	.word	0x080023e5
 80023d0:	080023f9 	.word	0x080023f9
 80023d4:	4a79      	ldr	r2, [pc, #484]	; (80025bc <HAL_GPIO_Init+0x2b4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023da:	e02c      	b.n	8002436 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	623b      	str	r3, [r7, #32]
          break;
 80023e2:	e029      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	3304      	adds	r3, #4
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e024      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	3308      	adds	r3, #8
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e01f      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	330c      	adds	r3, #12
 80023fe:	623b      	str	r3, [r7, #32]
          break;
 8002400:	e01a      	b.n	8002438 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800240a:	2304      	movs	r3, #4
 800240c:	623b      	str	r3, [r7, #32]
          break;
 800240e:	e013      	b.n	8002438 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002418:	2308      	movs	r3, #8
 800241a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	611a      	str	r2, [r3, #16]
          break;
 8002422:	e009      	b.n	8002438 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002424:	2308      	movs	r3, #8
 8002426:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	615a      	str	r2, [r3, #20]
          break;
 800242e:	e003      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x130>
          break;
 8002436:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2bff      	cmp	r3, #255	; 0xff
 800243c:	d801      	bhi.n	8002442 <HAL_GPIO_Init+0x13a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	e001      	b.n	8002446 <HAL_GPIO_Init+0x13e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2bff      	cmp	r3, #255	; 0xff
 800244c:	d802      	bhi.n	8002454 <HAL_GPIO_Init+0x14c>
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	e002      	b.n	800245a <HAL_GPIO_Init+0x152>
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	3b08      	subs	r3, #8
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	210f      	movs	r1, #15
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	6a39      	ldr	r1, [r7, #32]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	431a      	orrs	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80b1 	beq.w	80025ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002488:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <HAL_GPIO_Init+0x2b8>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a4c      	ldr	r2, [pc, #304]	; (80025c0 <HAL_GPIO_Init+0x2b8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <HAL_GPIO_Init+0x2b8>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a0:	4a48      	ldr	r2, [pc, #288]	; (80025c4 <HAL_GPIO_Init+0x2bc>)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a40      	ldr	r2, [pc, #256]	; (80025c8 <HAL_GPIO_Init+0x2c0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <HAL_GPIO_Init+0x1ec>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3f      	ldr	r2, [pc, #252]	; (80025cc <HAL_GPIO_Init+0x2c4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00d      	beq.n	80024f0 <HAL_GPIO_Init+0x1e8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3e      	ldr	r2, [pc, #248]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_Init+0x1e4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3d      	ldr	r2, [pc, #244]	; (80025d4 <HAL_GPIO_Init+0x2cc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_GPIO_Init+0x1e0>
 80024e4:	2303      	movs	r3, #3
 80024e6:	e006      	b.n	80024f6 <HAL_GPIO_Init+0x1ee>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e004      	b.n	80024f6 <HAL_GPIO_Init+0x1ee>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e002      	b.n	80024f6 <HAL_GPIO_Init+0x1ee>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_GPIO_Init+0x1ee>
 80024f4:	2300      	movs	r3, #0
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	f002 0203 	and.w	r2, r2, #3
 80024fc:	0092      	lsls	r2, r2, #2
 80024fe:	4093      	lsls	r3, r2
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002506:	492f      	ldr	r1, [pc, #188]	; (80025c4 <HAL_GPIO_Init+0x2bc>)
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	492c      	ldr	r1, [pc, #176]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800252e:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	43db      	mvns	r3, r3
 8002536:	4928      	ldr	r1, [pc, #160]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002538:	4013      	ands	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4922      	ldr	r1, [pc, #136]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
 8002554:	e006      	b.n	8002564 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	43db      	mvns	r3, r3
 800255e:	491e      	ldr	r1, [pc, #120]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002560:	4013      	ands	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	4918      	ldr	r1, [pc, #96]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	43db      	mvns	r3, r3
 8002586:	4914      	ldr	r1, [pc, #80]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002588:	4013      	ands	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d021      	beq.n	80025dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
 80025a4:	e021      	b.n	80025ea <HAL_GPIO_Init+0x2e2>
 80025a6:	bf00      	nop
 80025a8:	10320000 	.word	0x10320000
 80025ac:	10310000 	.word	0x10310000
 80025b0:	10220000 	.word	0x10220000
 80025b4:	10210000 	.word	0x10210000
 80025b8:	10120000 	.word	0x10120000
 80025bc:	10110000 	.word	0x10110000
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40010800 	.word	0x40010800
 80025cc:	40010c00 	.word	0x40010c00
 80025d0:	40011000 	.word	0x40011000
 80025d4:	40011400 	.word	0x40011400
 80025d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_GPIO_Init+0x304>)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	4909      	ldr	r1, [pc, #36]	; (800260c <HAL_GPIO_Init+0x304>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	3301      	adds	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f47f ae8e 	bne.w	800231c <HAL_GPIO_Init+0x14>
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	372c      	adds	r7, #44	; 0x2c
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	e001      	b.n	8002632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	807b      	strh	r3, [r7, #2]
 800264a:	4613      	mov	r3, r2
 800264c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800264e:	787b      	ldrb	r3, [r7, #1]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002654:	887a      	ldrh	r2, [r7, #2]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800265a:	e003      	b.n	8002664 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800265c:	887b      	ldrh	r3, [r7, #2]
 800265e:	041a      	lsls	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	611a      	str	r2, [r3, #16]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	460b      	mov	r3, r1
 8002678:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002680:	887a      	ldrh	r2, [r7, #2]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	041a      	lsls	r2, r3, #16
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43d9      	mvns	r1, r3
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	400b      	ands	r3, r1
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e272      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8087 	beq.w	80027ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026c0:	4b92      	ldr	r3, [pc, #584]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d00c      	beq.n	80026e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026cc:	4b8f      	ldr	r3, [pc, #572]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d112      	bne.n	80026fe <HAL_RCC_OscConfig+0x5e>
 80026d8:	4b8c      	ldr	r3, [pc, #560]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d10b      	bne.n	80026fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e6:	4b89      	ldr	r3, [pc, #548]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d06c      	beq.n	80027cc <HAL_RCC_OscConfig+0x12c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d168      	bne.n	80027cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e24c      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x76>
 8002708:	4b80      	ldr	r3, [pc, #512]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a7f      	ldr	r2, [pc, #508]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e02e      	b.n	8002774 <HAL_RCC_OscConfig+0xd4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x98>
 800271e:	4b7b      	ldr	r3, [pc, #492]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7a      	ldr	r2, [pc, #488]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b78      	ldr	r3, [pc, #480]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a77      	ldr	r2, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xd4>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0xbc>
 8002742:	4b72      	ldr	r3, [pc, #456]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a71      	ldr	r2, [pc, #452]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xd4>
 800275c:	4b6b      	ldr	r3, [pc, #428]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6a      	ldr	r2, [pc, #424]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b68      	ldr	r3, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a67      	ldr	r2, [pc, #412]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7ff fbfc 	bl	8001f78 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7ff fbf8 	bl	8001f78 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e200      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b5d      	ldr	r3, [pc, #372]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xe4>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff fbe8 	bl	8001f78 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7ff fbe4 	bl	8001f78 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1ec      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x10c>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d063      	beq.n	80028a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027da:	4b4c      	ldr	r3, [pc, #304]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027e6:	4b49      	ldr	r3, [pc, #292]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11c      	bne.n	800282c <HAL_RCC_OscConfig+0x18c>
 80027f2:	4b46      	ldr	r3, [pc, #280]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x176>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e1c0      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4939      	ldr	r1, [pc, #228]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	e03a      	b.n	80028a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002834:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7ff fb9d 	bl	8001f78 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7ff fb99 	bl	8001f78 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1a1      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4927      	ldr	r1, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]
 8002874:	e015      	b.n	80028a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b26      	ldr	r3, [pc, #152]	; (8002910 <HAL_RCC_OscConfig+0x270>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff fb7c 	bl	8001f78 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002884:	f7ff fb78 	bl	8001f78 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e180      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d03a      	beq.n	8002924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_RCC_OscConfig+0x274>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028bc:	f7ff fb5c 	bl	8001f78 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c4:	f7ff fb58 	bl	8001f78 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e160      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028e2:	2001      	movs	r0, #1
 80028e4:	f000 fad8 	bl	8002e98 <RCC_Delay>
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_RCC_OscConfig+0x274>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7ff fb42 	bl	8001f78 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f6:	e00f      	b.n	8002918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f8:	f7ff fb3e 	bl	8001f78 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d908      	bls.n	8002918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e146      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	42420000 	.word	0x42420000
 8002914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	4b92      	ldr	r3, [pc, #584]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e9      	bne.n	80028f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80a6 	beq.w	8002a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002936:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10d      	bne.n	800295e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	4b88      	ldr	r3, [pc, #544]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	4a87      	ldr	r2, [pc, #540]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	61d3      	str	r3, [r2, #28]
 800294e:	4b85      	ldr	r3, [pc, #532]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b82      	ldr	r3, [pc, #520]	; (8002b68 <HAL_RCC_OscConfig+0x4c8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <HAL_RCC_OscConfig+0x4c8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a7e      	ldr	r2, [pc, #504]	; (8002b68 <HAL_RCC_OscConfig+0x4c8>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7ff faff 	bl	8001f78 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7ff fafb 	bl	8001f78 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b64      	cmp	r3, #100	; 0x64
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e103      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b75      	ldr	r3, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x4c8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x312>
 80029a4:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a6e      	ldr	r2, [pc, #440]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	e02d      	b.n	8002a0e <HAL_RCC_OscConfig+0x36e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x334>
 80029ba:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a69      	ldr	r2, [pc, #420]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6213      	str	r3, [r2, #32]
 80029c6:	4b67      	ldr	r3, [pc, #412]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a66      	ldr	r2, [pc, #408]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	6213      	str	r3, [r2, #32]
 80029d2:	e01c      	b.n	8002a0e <HAL_RCC_OscConfig+0x36e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d10c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x356>
 80029dc:	4b61      	ldr	r3, [pc, #388]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4a60      	ldr	r2, [pc, #384]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6213      	str	r3, [r2, #32]
 80029e8:	4b5e      	ldr	r3, [pc, #376]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4a5d      	ldr	r2, [pc, #372]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6213      	str	r3, [r2, #32]
 80029f4:	e00b      	b.n	8002a0e <HAL_RCC_OscConfig+0x36e>
 80029f6:	4b5b      	ldr	r3, [pc, #364]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	4a5a      	ldr	r2, [pc, #360]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6213      	str	r3, [r2, #32]
 8002a02:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a57      	ldr	r2, [pc, #348]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d015      	beq.n	8002a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7ff faaf 	bl	8001f78 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7ff faab 	bl	8001f78 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e0b1      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ee      	beq.n	8002a1e <HAL_RCC_OscConfig+0x37e>
 8002a40:	e014      	b.n	8002a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a42:	f7ff fa99 	bl	8001f78 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7ff fa95 	bl	8001f78 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e09b      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a60:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ee      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d105      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a72:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4a3b      	ldr	r2, [pc, #236]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8087 	beq.w	8002b96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a88:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d061      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d146      	bne.n	8002b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <HAL_RCC_OscConfig+0x4cc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7ff fa69 	bl	8001f78 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7ff fa65 	bl	8001f78 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e06d      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4921      	ldr	r1, [pc, #132]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a19      	ldr	r1, [r3, #32]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	430b      	orrs	r3, r1
 8002af6:	491b      	ldr	r1, [pc, #108]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_RCC_OscConfig+0x4cc>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7ff fa39 	bl	8001f78 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7ff fa35 	bl	8001f78 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e03d      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x46a>
 8002b28:	e035      	b.n	8002b96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_RCC_OscConfig+0x4cc>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7ff fa22 	bl	8001f78 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7ff fa1e 	bl	8001f78 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e026      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x498>
 8002b56:	e01e      	b.n	8002b96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e019      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_OscConfig+0x500>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0d0      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b6a      	ldr	r3, [pc, #424]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d910      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b67      	ldr	r3, [pc, #412]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 0207 	bic.w	r2, r3, #7
 8002bce:	4965      	ldr	r1, [pc, #404]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0b8      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c00:	4b59      	ldr	r3, [pc, #356]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c18:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	494d      	ldr	r1, [pc, #308]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d040      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d115      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e07f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e073      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e06b      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c82:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f023 0203 	bic.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4936      	ldr	r1, [pc, #216]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c94:	f7ff f970 	bl	8001f78 <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9c:	f7ff f96c 	bl	8001f78 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e053      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 020c 	and.w	r2, r3, #12
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d1eb      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b27      	ldr	r3, [pc, #156]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d210      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0207 	bic.w	r2, r3, #7
 8002cda:	4922      	ldr	r1, [pc, #136]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e032      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4916      	ldr	r1, [pc, #88]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	490e      	ldr	r1, [pc, #56]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d32:	f000 f821 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002d36:	4602      	mov	r2, r0
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	490a      	ldr	r1, [pc, #40]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d44:	5ccb      	ldrb	r3, [r1, r3]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <HAL_RCC_ClockConfig+0x1cc>)
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x1d0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f8ce 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	080050d0 	.word	0x080050d0
 8002d70:	2000002c 	.word	0x2000002c
 8002d74:	20000030 	.word	0x20000030

08002d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	b490      	push	{r4, r7}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d7e:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d80:	1d3c      	adds	r4, r7, #4
 8002d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d88:	f240 2301 	movw	r3, #513	; 0x201
 8002d8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002da2:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x40>
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x46>
 8002db6:	e02b      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dba:	623b      	str	r3, [r7, #32]
      break;
 8002dbc:	e02b      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	0c9b      	lsrs	r3, r3, #18
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	3328      	adds	r3, #40	; 0x28
 8002dc8:	443b      	add	r3, r7
 8002dca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dda:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	0c5b      	lsrs	r3, r3, #17
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	3328      	adds	r3, #40	; 0x28
 8002de6:	443b      	add	r3, r7
 8002de8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002df2:	fb03 f202 	mul.w	r2, r3, r2
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	e004      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4a0b      	ldr	r2, [pc, #44]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	623b      	str	r3, [r7, #32]
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e12:	623b      	str	r3, [r7, #32]
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc90      	pop	{r4, r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	080050c0 	.word	0x080050c0
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	007a1200 	.word	0x007a1200
 8002e30:	003d0900 	.word	0x003d0900

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	2000002c 	.word	0x2000002c

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff2 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	080050e0 	.word	0x080050e0

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e74:	f7ff ffde 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	0adb      	lsrs	r3, r3, #11
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	080050e0 	.word	0x080050e0

08002e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <RCC_Delay+0x34>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <RCC_Delay+0x38>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0a5b      	lsrs	r3, r3, #9
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eb4:	bf00      	nop
  }
  while (Delay --);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	60fa      	str	r2, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f9      	bne.n	8002eb4 <RCC_Delay+0x1c>
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	2000002c 	.word	0x2000002c
 8002ed0:	10624dd3 	.word	0x10624dd3

08002ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e041      	b.n	8002f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe fe68 	bl	8001bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f000 fc28 	bl	8003768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d001      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e03a      	b.n	8003002 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_TIM_Base_Start_IT+0x98>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x58>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d009      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x58>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x58>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a13      	ldr	r2, [pc, #76]	; (8003014 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d111      	bne.n	8002ff0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d010      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	e007      	b.n	8003000 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800

08003018 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e041      	b.n	80030ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f839 	bl	80030b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 fb86 	bl	8003768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_TIM_PWM_Start+0x24>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e022      	b.n	8003132 <HAL_TIM_PWM_Start+0x6a>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d109      	bne.n	8003106 <HAL_TIM_PWM_Start+0x3e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e015      	b.n	8003132 <HAL_TIM_PWM_Start+0x6a>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d109      	bne.n	8003120 <HAL_TIM_PWM_Start+0x58>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	bf14      	ite	ne
 8003118:	2301      	movne	r3, #1
 800311a:	2300      	moveq	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e008      	b.n	8003132 <HAL_TIM_PWM_Start+0x6a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e05e      	b.n	80031f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <HAL_TIM_PWM_Start+0x82>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003148:	e013      	b.n	8003172 <HAL_TIM_PWM_Start+0xaa>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Start+0x92>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003158:	e00b      	b.n	8003172 <HAL_TIM_PWM_Start+0xaa>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d104      	bne.n	800316a <HAL_TIM_PWM_Start+0xa2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003168:	e003      	b.n	8003172 <HAL_TIM_PWM_Start+0xaa>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2201      	movs	r2, #1
 8003178:	6839      	ldr	r1, [r7, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fd74 	bl	8003c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1e      	ldr	r2, [pc, #120]	; (8003200 <HAL_TIM_PWM_Start+0x138>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d107      	bne.n	800319a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a18      	ldr	r2, [pc, #96]	; (8003200 <HAL_TIM_PWM_Start+0x138>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00e      	beq.n	80031c2 <HAL_TIM_PWM_Start+0xfa>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ac:	d009      	beq.n	80031c2 <HAL_TIM_PWM_Start+0xfa>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a14      	ldr	r2, [pc, #80]	; (8003204 <HAL_TIM_PWM_Start+0x13c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_TIM_PWM_Start+0xfa>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a12      	ldr	r2, [pc, #72]	; (8003208 <HAL_TIM_PWM_Start+0x140>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d111      	bne.n	80031e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b06      	cmp	r3, #6
 80031d2:	d010      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e4:	e007      	b.n	80031f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40000400 	.word	0x40000400
 8003208:	40000800 	.word	0x40000800

0800320c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b02      	cmp	r3, #2
 8003220:	d122      	bne.n	8003268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0202 	mvn.w	r2, #2
 8003238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fa6f 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fa62 	bl	8003720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fa71 	bl	8003744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	d122      	bne.n	80032bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b04      	cmp	r3, #4
 8003282:	d11b      	bne.n	80032bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0204 	mvn.w	r2, #4
 800328c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa45 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fa38 	bl	8003720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fa47 	bl	8003744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d122      	bne.n	8003310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d11b      	bne.n	8003310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0208 	mvn.w	r2, #8
 80032e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2204      	movs	r2, #4
 80032e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa1b 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa0e 	bl	8003720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fa1d 	bl	8003744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b10      	cmp	r3, #16
 800331c:	d122      	bne.n	8003364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b10      	cmp	r3, #16
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0210 	mvn.w	r2, #16
 8003334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2208      	movs	r2, #8
 800333a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9f1 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f9e4 	bl	8003720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f9f3 	bl	8003744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10e      	bne.n	8003390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0201 	mvn.w	r2, #1
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fe fd66 	bl	8001e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	d10e      	bne.n	80033bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b80      	cmp	r3, #128	; 0x80
 80033aa:	d107      	bne.n	80033bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fce1 	bl	8003d7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	d10e      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d107      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f9b7 	bl	8003756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d10e      	bne.n	8003414 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b20      	cmp	r3, #32
 8003402:	d107      	bne.n	8003414 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0220 	mvn.w	r2, #32
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fcac 	bl	8003d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003432:	2302      	movs	r3, #2
 8003434:	e0ac      	b.n	8003590 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b0c      	cmp	r3, #12
 8003442:	f200 809f 	bhi.w	8003584 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003446:	a201      	add	r2, pc, #4	; (adr r2, 800344c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344c:	08003481 	.word	0x08003481
 8003450:	08003585 	.word	0x08003585
 8003454:	08003585 	.word	0x08003585
 8003458:	08003585 	.word	0x08003585
 800345c:	080034c1 	.word	0x080034c1
 8003460:	08003585 	.word	0x08003585
 8003464:	08003585 	.word	0x08003585
 8003468:	08003585 	.word	0x08003585
 800346c:	08003503 	.word	0x08003503
 8003470:	08003585 	.word	0x08003585
 8003474:	08003585 	.word	0x08003585
 8003478:	08003585 	.word	0x08003585
 800347c:	08003543 	.word	0x08003543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f9d0 	bl	800382c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0208 	orr.w	r2, r2, #8
 800349a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0204 	bic.w	r2, r2, #4
 80034aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6999      	ldr	r1, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	619a      	str	r2, [r3, #24]
      break;
 80034be:	e062      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fa16 	bl	80038f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6999      	ldr	r1, [r3, #24]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	021a      	lsls	r2, r3, #8
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	619a      	str	r2, [r3, #24]
      break;
 8003500:	e041      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fa5f 	bl	80039cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0208 	orr.w	r2, r2, #8
 800351c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0204 	bic.w	r2, r2, #4
 800352c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69d9      	ldr	r1, [r3, #28]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	61da      	str	r2, [r3, #28]
      break;
 8003540:	e021      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 faa9 	bl	8003aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69d9      	ldr	r1, [r3, #28]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	021a      	lsls	r2, r3, #8
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	61da      	str	r2, [r3, #28]
      break;
 8003582:	e000      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_TIM_ConfigClockSource+0x18>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0b3      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x180>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e8:	d03e      	beq.n	8003668 <HAL_TIM_ConfigClockSource+0xd0>
 80035ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ee:	f200 8087 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x168>
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f6:	f000 8085 	beq.w	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fe:	d87f      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x168>
 8003600:	2b70      	cmp	r3, #112	; 0x70
 8003602:	d01a      	beq.n	800363a <HAL_TIM_ConfigClockSource+0xa2>
 8003604:	2b70      	cmp	r3, #112	; 0x70
 8003606:	d87b      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x168>
 8003608:	2b60      	cmp	r3, #96	; 0x60
 800360a:	d050      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x116>
 800360c:	2b60      	cmp	r3, #96	; 0x60
 800360e:	d877      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x168>
 8003610:	2b50      	cmp	r3, #80	; 0x50
 8003612:	d03c      	beq.n	800368e <HAL_TIM_ConfigClockSource+0xf6>
 8003614:	2b50      	cmp	r3, #80	; 0x50
 8003616:	d873      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x168>
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d058      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x136>
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d86f      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x168>
 8003620:	2b30      	cmp	r3, #48	; 0x30
 8003622:	d064      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x156>
 8003624:	2b30      	cmp	r3, #48	; 0x30
 8003626:	d86b      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x168>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d060      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x156>
 800362c:	2b20      	cmp	r3, #32
 800362e:	d867      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x168>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d05c      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x156>
 8003634:	2b10      	cmp	r3, #16
 8003636:	d05a      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003638:	e062      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f000 faee 	bl	8003c2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800365c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	609a      	str	r2, [r3, #8]
      break;
 8003666:	e04e      	b.n	8003706 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6899      	ldr	r1, [r3, #8]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f000 fad7 	bl	8003c2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800368a:	609a      	str	r2, [r3, #8]
      break;
 800368c:	e03b      	b.n	8003706 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	461a      	mov	r2, r3
 800369c:	f000 fa4e 	bl	8003b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2150      	movs	r1, #80	; 0x50
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 faa5 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 80036ac:	e02b      	b.n	8003706 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6859      	ldr	r1, [r3, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f000 fa6c 	bl	8003b98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2160      	movs	r1, #96	; 0x60
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa95 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 80036cc:	e01b      	b.n	8003706 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6859      	ldr	r1, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	461a      	mov	r2, r3
 80036dc:	f000 fa2e 	bl	8003b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2140      	movs	r1, #64	; 0x40
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fa85 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 80036ec:	e00b      	b.n	8003706 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f000 fa7c 	bl	8003bf6 <TIM_ITRx_SetConfig>
        break;
 80036fe:	e002      	b.n	8003706 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003704:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr

08003732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a29      	ldr	r2, [pc, #164]	; (8003820 <TIM_Base_SetConfig+0xb8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00b      	beq.n	8003798 <TIM_Base_SetConfig+0x30>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d007      	beq.n	8003798 <TIM_Base_SetConfig+0x30>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a26      	ldr	r2, [pc, #152]	; (8003824 <TIM_Base_SetConfig+0xbc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_Base_SetConfig+0x30>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a25      	ldr	r2, [pc, #148]	; (8003828 <TIM_Base_SetConfig+0xc0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d108      	bne.n	80037aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <TIM_Base_SetConfig+0xb8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00b      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b8:	d007      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a19      	ldr	r2, [pc, #100]	; (8003824 <TIM_Base_SetConfig+0xbc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <TIM_Base_SetConfig+0xc0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d108      	bne.n	80037dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a07      	ldr	r2, [pc, #28]	; (8003820 <TIM_Base_SetConfig+0xb8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	615a      	str	r2, [r3, #20]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800

0800382c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f023 0201 	bic.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 0302 	bic.w	r3, r3, #2
 8003874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <TIM_OC1_SetConfig+0xc8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10c      	bne.n	80038a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0308 	bic.w	r3, r3, #8
 800388e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <TIM_OC1_SetConfig+0xc8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d111      	bne.n	80038ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	621a      	str	r2, [r3, #32]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40012c00 	.word	0x40012c00

080038f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0210 	bic.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0320 	bic.w	r3, r3, #32
 8003942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <TIM_OC2_SetConfig+0xd0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d10d      	bne.n	8003974 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <TIM_OC2_SetConfig+0xd0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d113      	bne.n	80039a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800398a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40012c00 	.word	0x40012c00

080039cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d113      	bne.n	8003a76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40012c00 	.word	0x40012c00

08003aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <TIM_OC4_SetConfig+0x98>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d109      	bne.n	8003b14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00

08003b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f023 0201 	bic.w	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f023 030a 	bic.w	r3, r3, #10
 8003b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	621a      	str	r2, [r3, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f023 0210 	bic.w	r2, r3, #16
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	031b      	lsls	r3, r3, #12
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	621a      	str	r2, [r3, #32]
}
 8003bec:	bf00      	nop
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f043 0307 	orr.w	r3, r3, #7
 8003c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	021a      	lsls	r2, r3, #8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e046      	b.n	8003d56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00e      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d009      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a10      	ldr	r2, [pc, #64]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10c      	bne.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800

08003d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e03f      	b.n	8003e22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd ff7c 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	; 0x24
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fc25 	bl	8004624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b08a      	sub	sp, #40	; 0x28
 8003e2e:	af02      	add	r7, sp, #8
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d17c      	bne.n	8003f44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_UART_Transmit+0x2c>
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e075      	b.n	8003f46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Transmit+0x3e>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e06e      	b.n	8003f46 <HAL_UART_Transmit+0x11c>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2221      	movs	r2, #33	; 0x21
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7e:	f7fe f87b 	bl	8001f78 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e98:	d108      	bne.n	8003eac <HAL_UART_Transmit+0x82>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e003      	b.n	8003eb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ebc:	e02a      	b.n	8003f14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fa11 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e036      	b.n	8003f46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10b      	bne.n	8003ef6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e007      	b.n	8003f06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	3301      	adds	r3, #1
 8003f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1cf      	bne.n	8003ebe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2200      	movs	r2, #0
 8003f26:	2140      	movs	r1, #64	; 0x40
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f9e1 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e006      	b.n	8003f46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x52>
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa99 	bl	80044d2 <UART_Receive_IT>
      return;
 8003fa0:	e17b      	b.n	800429a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80b1 	beq.w	800410c <HAL_UART_IRQHandler+0x1bc>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d105      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x70>
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80a6 	beq.w	800410c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x90>
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f043 0201 	orr.w	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_UART_IRQHandler+0xb0>
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f043 0202 	orr.w	r2, r3, #2
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_UART_IRQHandler+0xd0>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00f      	beq.n	800404a <HAL_UART_IRQHandler+0xfa>
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_UART_IRQHandler+0xee>
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0208 	orr.w	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 811e 	beq.w	8004290 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <HAL_UART_IRQHandler+0x11e>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fa32 	bl	80044d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf14      	ite	ne
 800407c:	2301      	movne	r3, #1
 800407e:	2300      	moveq	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <HAL_UART_IRQHandler+0x146>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d031      	beq.n	80040fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f974 	bl	8004384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d023      	beq.n	80040f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d013      	beq.n	80040ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	4a76      	ldr	r2, [pc, #472]	; (80042a0 <HAL_UART_IRQHandler+0x350>)
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe f8a4 	bl	800221c <HAL_DMA_Abort_IT>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040e4:	4610      	mov	r0, r2
 80040e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e00e      	b.n	8004108 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f8ec 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e00a      	b.n	8004108 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8e8 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	e006      	b.n	8004108 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8e4 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004106:	e0c3      	b.n	8004290 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	bf00      	nop
    return;
 800410a:	e0c1      	b.n	8004290 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	2b01      	cmp	r3, #1
 8004112:	f040 80a1 	bne.w	8004258 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 809b 	beq.w	8004258 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8095 	beq.w	8004258 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d04e      	beq.n	80041f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800415c:	8a3b      	ldrh	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 8098 	beq.w	8004294 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004168:	8a3a      	ldrh	r2, [r7, #16]
 800416a:	429a      	cmp	r2, r3
 800416c:	f080 8092 	bcs.w	8004294 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8a3a      	ldrh	r2, [r7, #16]
 8004174:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b20      	cmp	r3, #32
 800417e:	d02b      	beq.n	80041d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800418e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0210 	bic.w	r2, r2, #16
 80041cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fd ffe7 	bl	80021a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f876 	bl	80042da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041ee:	e051      	b.n	8004294 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d047      	beq.n	8004298 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004208:	8a7b      	ldrh	r3, [r7, #18]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d044      	beq.n	8004298 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800421c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0210 	bic.w	r2, r2, #16
 800424a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424c:	8a7b      	ldrh	r3, [r7, #18]
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f842 	bl	80042da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004256:	e01f      	b.n	8004298 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_UART_IRQHandler+0x324>
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8c9 	bl	8004404 <UART_Transmit_IT>
    return;
 8004272:	e012      	b.n	800429a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <HAL_UART_IRQHandler+0x34a>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f90a 	bl	80044a2 <UART_EndTransmit_IT>
    return;
 800428e:	e004      	b.n	800429a <HAL_UART_IRQHandler+0x34a>
    return;
 8004290:	bf00      	nop
 8004292:	e002      	b.n	800429a <HAL_UART_IRQHandler+0x34a>
      return;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <HAL_UART_IRQHandler+0x34a>
      return;
 8004298:	bf00      	nop
  }
}
 800429a:	3728      	adds	r7, #40	; 0x28
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	080043dd 	.word	0x080043dd

080042a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004300:	e02c      	b.n	800435c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d028      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0x30>
 8004310:	f7fd fe32 	bl	8001f78 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	429a      	cmp	r2, r3
 800431e:	d21d      	bcs.n	800435c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800432e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e00f      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	429a      	cmp	r2, r3
 8004378:	d0c3      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800439a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d107      	bne.n	80043c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0210 	bic.w	r2, r2, #16
 80043c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff ff66 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b21      	cmp	r3, #33	; 0x21
 8004416:	d13e      	bne.n	8004496 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d114      	bne.n	800444c <UART_Transmit_IT+0x48>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d110      	bne.n	800444c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	621a      	str	r2, [r3, #32]
 800444a:	e008      	b.n	800445e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	1c59      	adds	r1, r3, #1
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6211      	str	r1, [r2, #32]
 8004456:	781a      	ldrb	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29b      	uxth	r3, r3
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4619      	mov	r1, r3
 800446c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10f      	bne.n	8004492 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004480:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004490:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff feee 	bl	80042a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b22      	cmp	r3, #34	; 0x22
 80044e4:	f040 8099 	bne.w	800461a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f0:	d117      	bne.n	8004522 <UART_Receive_IT+0x50>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d113      	bne.n	8004522 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004510:	b29a      	uxth	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28
 8004520:	e026      	b.n	8004570 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004534:	d007      	beq.n	8004546 <UART_Receive_IT+0x74>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <UART_Receive_IT+0x82>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e008      	b.n	8004566 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004560:	b2da      	uxtb	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29b      	uxth	r3, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4619      	mov	r1, r3
 800457e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004580:	2b00      	cmp	r3, #0
 8004582:	d148      	bne.n	8004616 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0220 	bic.w	r2, r2, #32
 8004592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d123      	bne.n	800460c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0210 	bic.w	r2, r2, #16
 80045d8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d10a      	bne.n	80045fe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff fe68 	bl	80042da <HAL_UARTEx_RxEventCallback>
 800460a:	e002      	b.n	8004612 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fe52 	bl	80042b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e002      	b.n	800461c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800465e:	f023 030c 	bic.w	r3, r3, #12
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	430b      	orrs	r3, r1
 800466a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2c      	ldr	r2, [pc, #176]	; (8004738 <UART_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d103      	bne.n	8004694 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800468c:	f7fe fbf0 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	e002      	b.n	800469a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004694:	f7fe fbd8 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8004698:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	4a22      	ldr	r2, [pc, #136]	; (800473c <UART_SetConfig+0x118>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	0119      	lsls	r1, r3, #4
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009a      	lsls	r2, r3, #2
 80046c4:	441a      	add	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <UART_SetConfig+0x118>)
 80046d2:	fba3 0302 	umull	r0, r3, r3, r2
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2064      	movs	r0, #100	; 0x64
 80046da:	fb00 f303 	mul.w	r3, r0, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	; 0x32
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <UART_SetConfig+0x118>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f0:	4419      	add	r1, r3
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009a      	lsls	r2, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	fbb2 f2f3 	udiv	r2, r2, r3
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <UART_SetConfig+0x118>)
 800470a:	fba3 0302 	umull	r0, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2064      	movs	r0, #100	; 0x64
 8004712:	fb00 f303 	mul.w	r3, r0, r3
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	3332      	adds	r3, #50	; 0x32
 800471c:	4a07      	ldr	r2, [pc, #28]	; (800473c <UART_SetConfig+0x118>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	f003 020f 	and.w	r2, r3, #15
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	440a      	add	r2, r1
 800472e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40013800 	.word	0x40013800
 800473c:	51eb851f 	.word	0x51eb851f

08004740 <__errno>:
 8004740:	4b01      	ldr	r3, [pc, #4]	; (8004748 <__errno+0x8>)
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000038 	.word	0x20000038

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	2600      	movs	r6, #0
 8004750:	4d0c      	ldr	r5, [pc, #48]	; (8004784 <__libc_init_array+0x38>)
 8004752:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004754:	1b64      	subs	r4, r4, r5
 8004756:	10a4      	asrs	r4, r4, #2
 8004758:	42a6      	cmp	r6, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	f000 fc9c 	bl	8005098 <_init>
 8004760:	2600      	movs	r6, #0
 8004762:	4d0a      	ldr	r5, [pc, #40]	; (800478c <__libc_init_array+0x40>)
 8004764:	4c0a      	ldr	r4, [pc, #40]	; (8004790 <__libc_init_array+0x44>)
 8004766:	1b64      	subs	r4, r4, r5
 8004768:	10a4      	asrs	r4, r4, #2
 800476a:	42a6      	cmp	r6, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f855 3b04 	ldr.w	r3, [r5], #4
 8004774:	4798      	blx	r3
 8004776:	3601      	adds	r6, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f855 3b04 	ldr.w	r3, [r5], #4
 800477e:	4798      	blx	r3
 8004780:	3601      	adds	r6, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	0800511c 	.word	0x0800511c
 8004788:	0800511c 	.word	0x0800511c
 800478c:	0800511c 	.word	0x0800511c
 8004790:	08005120 	.word	0x08005120

08004794 <memset>:
 8004794:	4603      	mov	r3, r0
 8004796:	4402      	add	r2, r0
 8004798:	4293      	cmp	r3, r2
 800479a:	d100      	bne.n	800479e <memset+0xa>
 800479c:	4770      	bx	lr
 800479e:	f803 1b01 	strb.w	r1, [r3], #1
 80047a2:	e7f9      	b.n	8004798 <memset+0x4>

080047a4 <siprintf>:
 80047a4:	b40e      	push	{r1, r2, r3}
 80047a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047aa:	b500      	push	{lr}
 80047ac:	b09c      	sub	sp, #112	; 0x70
 80047ae:	ab1d      	add	r3, sp, #116	; 0x74
 80047b0:	9002      	str	r0, [sp, #8]
 80047b2:	9006      	str	r0, [sp, #24]
 80047b4:	9107      	str	r1, [sp, #28]
 80047b6:	9104      	str	r1, [sp, #16]
 80047b8:	4808      	ldr	r0, [pc, #32]	; (80047dc <siprintf+0x38>)
 80047ba:	4909      	ldr	r1, [pc, #36]	; (80047e0 <siprintf+0x3c>)
 80047bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047c0:	9105      	str	r1, [sp, #20]
 80047c2:	6800      	ldr	r0, [r0, #0]
 80047c4:	a902      	add	r1, sp, #8
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	f000 f868 	bl	800489c <_svfiprintf_r>
 80047cc:	2200      	movs	r2, #0
 80047ce:	9b02      	ldr	r3, [sp, #8]
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	b01c      	add	sp, #112	; 0x70
 80047d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047d8:	b003      	add	sp, #12
 80047da:	4770      	bx	lr
 80047dc:	20000038 	.word	0x20000038
 80047e0:	ffff0208 	.word	0xffff0208

080047e4 <__ssputs_r>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	688e      	ldr	r6, [r1, #8]
 80047ea:	4682      	mov	sl, r0
 80047ec:	429e      	cmp	r6, r3
 80047ee:	460c      	mov	r4, r1
 80047f0:	4690      	mov	r8, r2
 80047f2:	461f      	mov	r7, r3
 80047f4:	d838      	bhi.n	8004868 <__ssputs_r+0x84>
 80047f6:	898a      	ldrh	r2, [r1, #12]
 80047f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047fc:	d032      	beq.n	8004864 <__ssputs_r+0x80>
 80047fe:	6825      	ldr	r5, [r4, #0]
 8004800:	6909      	ldr	r1, [r1, #16]
 8004802:	3301      	adds	r3, #1
 8004804:	eba5 0901 	sub.w	r9, r5, r1
 8004808:	6965      	ldr	r5, [r4, #20]
 800480a:	444b      	add	r3, r9
 800480c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004814:	106d      	asrs	r5, r5, #1
 8004816:	429d      	cmp	r5, r3
 8004818:	bf38      	it	cc
 800481a:	461d      	movcc	r5, r3
 800481c:	0553      	lsls	r3, r2, #21
 800481e:	d531      	bpl.n	8004884 <__ssputs_r+0xa0>
 8004820:	4629      	mov	r1, r5
 8004822:	f000 fb6f 	bl	8004f04 <_malloc_r>
 8004826:	4606      	mov	r6, r0
 8004828:	b950      	cbnz	r0, 8004840 <__ssputs_r+0x5c>
 800482a:	230c      	movs	r3, #12
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	f8ca 3000 	str.w	r3, [sl]
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483a:	81a3      	strh	r3, [r4, #12]
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004840:	464a      	mov	r2, r9
 8004842:	6921      	ldr	r1, [r4, #16]
 8004844:	f000 face 	bl	8004de4 <memcpy>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800484e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	6126      	str	r6, [r4, #16]
 8004856:	444e      	add	r6, r9
 8004858:	6026      	str	r6, [r4, #0]
 800485a:	463e      	mov	r6, r7
 800485c:	6165      	str	r5, [r4, #20]
 800485e:	eba5 0509 	sub.w	r5, r5, r9
 8004862:	60a5      	str	r5, [r4, #8]
 8004864:	42be      	cmp	r6, r7
 8004866:	d900      	bls.n	800486a <__ssputs_r+0x86>
 8004868:	463e      	mov	r6, r7
 800486a:	4632      	mov	r2, r6
 800486c:	4641      	mov	r1, r8
 800486e:	6820      	ldr	r0, [r4, #0]
 8004870:	f000 fac6 	bl	8004e00 <memmove>
 8004874:	68a3      	ldr	r3, [r4, #8]
 8004876:	2000      	movs	r0, #0
 8004878:	1b9b      	subs	r3, r3, r6
 800487a:	60a3      	str	r3, [r4, #8]
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	4433      	add	r3, r6
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	e7db      	b.n	800483c <__ssputs_r+0x58>
 8004884:	462a      	mov	r2, r5
 8004886:	f000 fbb1 	bl	8004fec <_realloc_r>
 800488a:	4606      	mov	r6, r0
 800488c:	2800      	cmp	r0, #0
 800488e:	d1e1      	bne.n	8004854 <__ssputs_r+0x70>
 8004890:	4650      	mov	r0, sl
 8004892:	6921      	ldr	r1, [r4, #16]
 8004894:	f000 face 	bl	8004e34 <_free_r>
 8004898:	e7c7      	b.n	800482a <__ssputs_r+0x46>
	...

0800489c <_svfiprintf_r>:
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	4698      	mov	r8, r3
 80048a2:	898b      	ldrh	r3, [r1, #12]
 80048a4:	4607      	mov	r7, r0
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	460d      	mov	r5, r1
 80048aa:	4614      	mov	r4, r2
 80048ac:	b09d      	sub	sp, #116	; 0x74
 80048ae:	d50e      	bpl.n	80048ce <_svfiprintf_r+0x32>
 80048b0:	690b      	ldr	r3, [r1, #16]
 80048b2:	b963      	cbnz	r3, 80048ce <_svfiprintf_r+0x32>
 80048b4:	2140      	movs	r1, #64	; 0x40
 80048b6:	f000 fb25 	bl	8004f04 <_malloc_r>
 80048ba:	6028      	str	r0, [r5, #0]
 80048bc:	6128      	str	r0, [r5, #16]
 80048be:	b920      	cbnz	r0, 80048ca <_svfiprintf_r+0x2e>
 80048c0:	230c      	movs	r3, #12
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	e0d1      	b.n	8004a6e <_svfiprintf_r+0x1d2>
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	616b      	str	r3, [r5, #20]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9309      	str	r3, [sp, #36]	; 0x24
 80048d2:	2320      	movs	r3, #32
 80048d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048d8:	2330      	movs	r3, #48	; 0x30
 80048da:	f04f 0901 	mov.w	r9, #1
 80048de:	f8cd 800c 	str.w	r8, [sp, #12]
 80048e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a88 <_svfiprintf_r+0x1ec>
 80048e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ea:	4623      	mov	r3, r4
 80048ec:	469a      	mov	sl, r3
 80048ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048f2:	b10a      	cbz	r2, 80048f8 <_svfiprintf_r+0x5c>
 80048f4:	2a25      	cmp	r2, #37	; 0x25
 80048f6:	d1f9      	bne.n	80048ec <_svfiprintf_r+0x50>
 80048f8:	ebba 0b04 	subs.w	fp, sl, r4
 80048fc:	d00b      	beq.n	8004916 <_svfiprintf_r+0x7a>
 80048fe:	465b      	mov	r3, fp
 8004900:	4622      	mov	r2, r4
 8004902:	4629      	mov	r1, r5
 8004904:	4638      	mov	r0, r7
 8004906:	f7ff ff6d 	bl	80047e4 <__ssputs_r>
 800490a:	3001      	adds	r0, #1
 800490c:	f000 80aa 	beq.w	8004a64 <_svfiprintf_r+0x1c8>
 8004910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004912:	445a      	add	r2, fp
 8004914:	9209      	str	r2, [sp, #36]	; 0x24
 8004916:	f89a 3000 	ldrb.w	r3, [sl]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80a2 	beq.w	8004a64 <_svfiprintf_r+0x1c8>
 8004920:	2300      	movs	r3, #0
 8004922:	f04f 32ff 	mov.w	r2, #4294967295
 8004926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800492a:	f10a 0a01 	add.w	sl, sl, #1
 800492e:	9304      	str	r3, [sp, #16]
 8004930:	9307      	str	r3, [sp, #28]
 8004932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004936:	931a      	str	r3, [sp, #104]	; 0x68
 8004938:	4654      	mov	r4, sl
 800493a:	2205      	movs	r2, #5
 800493c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004940:	4851      	ldr	r0, [pc, #324]	; (8004a88 <_svfiprintf_r+0x1ec>)
 8004942:	f000 fa41 	bl	8004dc8 <memchr>
 8004946:	9a04      	ldr	r2, [sp, #16]
 8004948:	b9d8      	cbnz	r0, 8004982 <_svfiprintf_r+0xe6>
 800494a:	06d0      	lsls	r0, r2, #27
 800494c:	bf44      	itt	mi
 800494e:	2320      	movmi	r3, #32
 8004950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004954:	0711      	lsls	r1, r2, #28
 8004956:	bf44      	itt	mi
 8004958:	232b      	movmi	r3, #43	; 0x2b
 800495a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800495e:	f89a 3000 	ldrb.w	r3, [sl]
 8004962:	2b2a      	cmp	r3, #42	; 0x2a
 8004964:	d015      	beq.n	8004992 <_svfiprintf_r+0xf6>
 8004966:	4654      	mov	r4, sl
 8004968:	2000      	movs	r0, #0
 800496a:	f04f 0c0a 	mov.w	ip, #10
 800496e:	9a07      	ldr	r2, [sp, #28]
 8004970:	4621      	mov	r1, r4
 8004972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004976:	3b30      	subs	r3, #48	; 0x30
 8004978:	2b09      	cmp	r3, #9
 800497a:	d94e      	bls.n	8004a1a <_svfiprintf_r+0x17e>
 800497c:	b1b0      	cbz	r0, 80049ac <_svfiprintf_r+0x110>
 800497e:	9207      	str	r2, [sp, #28]
 8004980:	e014      	b.n	80049ac <_svfiprintf_r+0x110>
 8004982:	eba0 0308 	sub.w	r3, r0, r8
 8004986:	fa09 f303 	lsl.w	r3, r9, r3
 800498a:	4313      	orrs	r3, r2
 800498c:	46a2      	mov	sl, r4
 800498e:	9304      	str	r3, [sp, #16]
 8004990:	e7d2      	b.n	8004938 <_svfiprintf_r+0x9c>
 8004992:	9b03      	ldr	r3, [sp, #12]
 8004994:	1d19      	adds	r1, r3, #4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	9103      	str	r1, [sp, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfbb      	ittet	lt
 800499e:	425b      	neglt	r3, r3
 80049a0:	f042 0202 	orrlt.w	r2, r2, #2
 80049a4:	9307      	strge	r3, [sp, #28]
 80049a6:	9307      	strlt	r3, [sp, #28]
 80049a8:	bfb8      	it	lt
 80049aa:	9204      	strlt	r2, [sp, #16]
 80049ac:	7823      	ldrb	r3, [r4, #0]
 80049ae:	2b2e      	cmp	r3, #46	; 0x2e
 80049b0:	d10c      	bne.n	80049cc <_svfiprintf_r+0x130>
 80049b2:	7863      	ldrb	r3, [r4, #1]
 80049b4:	2b2a      	cmp	r3, #42	; 0x2a
 80049b6:	d135      	bne.n	8004a24 <_svfiprintf_r+0x188>
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	3402      	adds	r4, #2
 80049bc:	1d1a      	adds	r2, r3, #4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	9203      	str	r2, [sp, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bfb8      	it	lt
 80049c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80049ca:	9305      	str	r3, [sp, #20]
 80049cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a8c <_svfiprintf_r+0x1f0>
 80049d0:	2203      	movs	r2, #3
 80049d2:	4650      	mov	r0, sl
 80049d4:	7821      	ldrb	r1, [r4, #0]
 80049d6:	f000 f9f7 	bl	8004dc8 <memchr>
 80049da:	b140      	cbz	r0, 80049ee <_svfiprintf_r+0x152>
 80049dc:	2340      	movs	r3, #64	; 0x40
 80049de:	eba0 000a 	sub.w	r0, r0, sl
 80049e2:	fa03 f000 	lsl.w	r0, r3, r0
 80049e6:	9b04      	ldr	r3, [sp, #16]
 80049e8:	3401      	adds	r4, #1
 80049ea:	4303      	orrs	r3, r0
 80049ec:	9304      	str	r3, [sp, #16]
 80049ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f2:	2206      	movs	r2, #6
 80049f4:	4826      	ldr	r0, [pc, #152]	; (8004a90 <_svfiprintf_r+0x1f4>)
 80049f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049fa:	f000 f9e5 	bl	8004dc8 <memchr>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d038      	beq.n	8004a74 <_svfiprintf_r+0x1d8>
 8004a02:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <_svfiprintf_r+0x1f8>)
 8004a04:	bb1b      	cbnz	r3, 8004a4e <_svfiprintf_r+0x1b2>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	3307      	adds	r3, #7
 8004a0a:	f023 0307 	bic.w	r3, r3, #7
 8004a0e:	3308      	adds	r3, #8
 8004a10:	9303      	str	r3, [sp, #12]
 8004a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a14:	4433      	add	r3, r6
 8004a16:	9309      	str	r3, [sp, #36]	; 0x24
 8004a18:	e767      	b.n	80048ea <_svfiprintf_r+0x4e>
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a22:	e7a5      	b.n	8004970 <_svfiprintf_r+0xd4>
 8004a24:	2300      	movs	r3, #0
 8004a26:	f04f 0c0a 	mov.w	ip, #10
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	3401      	adds	r4, #1
 8004a2e:	9305      	str	r3, [sp, #20]
 8004a30:	4620      	mov	r0, r4
 8004a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a36:	3a30      	subs	r2, #48	; 0x30
 8004a38:	2a09      	cmp	r2, #9
 8004a3a:	d903      	bls.n	8004a44 <_svfiprintf_r+0x1a8>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0c5      	beq.n	80049cc <_svfiprintf_r+0x130>
 8004a40:	9105      	str	r1, [sp, #20]
 8004a42:	e7c3      	b.n	80049cc <_svfiprintf_r+0x130>
 8004a44:	4604      	mov	r4, r0
 8004a46:	2301      	movs	r3, #1
 8004a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a4c:	e7f0      	b.n	8004a30 <_svfiprintf_r+0x194>
 8004a4e:	ab03      	add	r3, sp, #12
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	462a      	mov	r2, r5
 8004a54:	4638      	mov	r0, r7
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <_svfiprintf_r+0x1fc>)
 8004a58:	a904      	add	r1, sp, #16
 8004a5a:	f3af 8000 	nop.w
 8004a5e:	1c42      	adds	r2, r0, #1
 8004a60:	4606      	mov	r6, r0
 8004a62:	d1d6      	bne.n	8004a12 <_svfiprintf_r+0x176>
 8004a64:	89ab      	ldrh	r3, [r5, #12]
 8004a66:	065b      	lsls	r3, r3, #25
 8004a68:	f53f af2c 	bmi.w	80048c4 <_svfiprintf_r+0x28>
 8004a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a6e:	b01d      	add	sp, #116	; 0x74
 8004a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a74:	ab03      	add	r3, sp, #12
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	462a      	mov	r2, r5
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <_svfiprintf_r+0x1fc>)
 8004a7e:	a904      	add	r1, sp, #16
 8004a80:	f000 f87c 	bl	8004b7c <_printf_i>
 8004a84:	e7eb      	b.n	8004a5e <_svfiprintf_r+0x1c2>
 8004a86:	bf00      	nop
 8004a88:	080050e8 	.word	0x080050e8
 8004a8c:	080050ee 	.word	0x080050ee
 8004a90:	080050f2 	.word	0x080050f2
 8004a94:	00000000 	.word	0x00000000
 8004a98:	080047e5 	.word	0x080047e5

08004a9c <_printf_common>:
 8004a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	4699      	mov	r9, r3
 8004aa4:	688a      	ldr	r2, [r1, #8]
 8004aa6:	690b      	ldr	r3, [r1, #16]
 8004aa8:	4607      	mov	r7, r0
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	bfb8      	it	lt
 8004aae:	4613      	movlt	r3, r2
 8004ab0:	6033      	str	r3, [r6, #0]
 8004ab2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004abc:	b10a      	cbz	r2, 8004ac2 <_printf_common+0x26>
 8004abe:	3301      	adds	r3, #1
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	0699      	lsls	r1, r3, #26
 8004ac6:	bf42      	ittt	mi
 8004ac8:	6833      	ldrmi	r3, [r6, #0]
 8004aca:	3302      	addmi	r3, #2
 8004acc:	6033      	strmi	r3, [r6, #0]
 8004ace:	6825      	ldr	r5, [r4, #0]
 8004ad0:	f015 0506 	ands.w	r5, r5, #6
 8004ad4:	d106      	bne.n	8004ae4 <_printf_common+0x48>
 8004ad6:	f104 0a19 	add.w	sl, r4, #25
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	6832      	ldr	r2, [r6, #0]
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	42ab      	cmp	r3, r5
 8004ae2:	dc28      	bgt.n	8004b36 <_printf_common+0x9a>
 8004ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ae8:	1e13      	subs	r3, r2, #0
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	bf18      	it	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	0692      	lsls	r2, r2, #26
 8004af2:	d42d      	bmi.n	8004b50 <_printf_common+0xb4>
 8004af4:	4649      	mov	r1, r9
 8004af6:	4638      	mov	r0, r7
 8004af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004afc:	47c0      	blx	r8
 8004afe:	3001      	adds	r0, #1
 8004b00:	d020      	beq.n	8004b44 <_printf_common+0xa8>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	68e5      	ldr	r5, [r4, #12]
 8004b06:	f003 0306 	and.w	r3, r3, #6
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	bf18      	it	ne
 8004b0e:	2500      	movne	r5, #0
 8004b10:	6832      	ldr	r2, [r6, #0]
 8004b12:	f04f 0600 	mov.w	r6, #0
 8004b16:	68a3      	ldr	r3, [r4, #8]
 8004b18:	bf08      	it	eq
 8004b1a:	1aad      	subeq	r5, r5, r2
 8004b1c:	6922      	ldr	r2, [r4, #16]
 8004b1e:	bf08      	it	eq
 8004b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bfc4      	itt	gt
 8004b28:	1a9b      	subgt	r3, r3, r2
 8004b2a:	18ed      	addgt	r5, r5, r3
 8004b2c:	341a      	adds	r4, #26
 8004b2e:	42b5      	cmp	r5, r6
 8004b30:	d11a      	bne.n	8004b68 <_printf_common+0xcc>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e008      	b.n	8004b48 <_printf_common+0xac>
 8004b36:	2301      	movs	r3, #1
 8004b38:	4652      	mov	r2, sl
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	47c0      	blx	r8
 8004b40:	3001      	adds	r0, #1
 8004b42:	d103      	bne.n	8004b4c <_printf_common+0xb0>
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4c:	3501      	adds	r5, #1
 8004b4e:	e7c4      	b.n	8004ada <_printf_common+0x3e>
 8004b50:	2030      	movs	r0, #48	; 0x30
 8004b52:	18e1      	adds	r1, r4, r3
 8004b54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b5e:	4422      	add	r2, r4
 8004b60:	3302      	adds	r3, #2
 8004b62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b66:	e7c5      	b.n	8004af4 <_printf_common+0x58>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	4638      	mov	r0, r7
 8004b70:	47c0      	blx	r8
 8004b72:	3001      	adds	r0, #1
 8004b74:	d0e6      	beq.n	8004b44 <_printf_common+0xa8>
 8004b76:	3601      	adds	r6, #1
 8004b78:	e7d9      	b.n	8004b2e <_printf_common+0x92>
	...

08004b7c <_printf_i>:
 8004b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b80:	7e0f      	ldrb	r7, [r1, #24]
 8004b82:	4691      	mov	r9, r2
 8004b84:	2f78      	cmp	r7, #120	; 0x78
 8004b86:	4680      	mov	r8, r0
 8004b88:	460c      	mov	r4, r1
 8004b8a:	469a      	mov	sl, r3
 8004b8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b92:	d807      	bhi.n	8004ba4 <_printf_i+0x28>
 8004b94:	2f62      	cmp	r7, #98	; 0x62
 8004b96:	d80a      	bhi.n	8004bae <_printf_i+0x32>
 8004b98:	2f00      	cmp	r7, #0
 8004b9a:	f000 80d9 	beq.w	8004d50 <_printf_i+0x1d4>
 8004b9e:	2f58      	cmp	r7, #88	; 0x58
 8004ba0:	f000 80a4 	beq.w	8004cec <_printf_i+0x170>
 8004ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bac:	e03a      	b.n	8004c24 <_printf_i+0xa8>
 8004bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bb2:	2b15      	cmp	r3, #21
 8004bb4:	d8f6      	bhi.n	8004ba4 <_printf_i+0x28>
 8004bb6:	a101      	add	r1, pc, #4	; (adr r1, 8004bbc <_printf_i+0x40>)
 8004bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bbc:	08004c15 	.word	0x08004c15
 8004bc0:	08004c29 	.word	0x08004c29
 8004bc4:	08004ba5 	.word	0x08004ba5
 8004bc8:	08004ba5 	.word	0x08004ba5
 8004bcc:	08004ba5 	.word	0x08004ba5
 8004bd0:	08004ba5 	.word	0x08004ba5
 8004bd4:	08004c29 	.word	0x08004c29
 8004bd8:	08004ba5 	.word	0x08004ba5
 8004bdc:	08004ba5 	.word	0x08004ba5
 8004be0:	08004ba5 	.word	0x08004ba5
 8004be4:	08004ba5 	.word	0x08004ba5
 8004be8:	08004d37 	.word	0x08004d37
 8004bec:	08004c59 	.word	0x08004c59
 8004bf0:	08004d19 	.word	0x08004d19
 8004bf4:	08004ba5 	.word	0x08004ba5
 8004bf8:	08004ba5 	.word	0x08004ba5
 8004bfc:	08004d59 	.word	0x08004d59
 8004c00:	08004ba5 	.word	0x08004ba5
 8004c04:	08004c59 	.word	0x08004c59
 8004c08:	08004ba5 	.word	0x08004ba5
 8004c0c:	08004ba5 	.word	0x08004ba5
 8004c10:	08004d21 	.word	0x08004d21
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	1d1a      	adds	r2, r3, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	602a      	str	r2, [r5, #0]
 8004c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0a4      	b.n	8004d72 <_printf_i+0x1f6>
 8004c28:	6820      	ldr	r0, [r4, #0]
 8004c2a:	6829      	ldr	r1, [r5, #0]
 8004c2c:	0606      	lsls	r6, r0, #24
 8004c2e:	f101 0304 	add.w	r3, r1, #4
 8004c32:	d50a      	bpl.n	8004c4a <_printf_i+0xce>
 8004c34:	680e      	ldr	r6, [r1, #0]
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	2e00      	cmp	r6, #0
 8004c3a:	da03      	bge.n	8004c44 <_printf_i+0xc8>
 8004c3c:	232d      	movs	r3, #45	; 0x2d
 8004c3e:	4276      	negs	r6, r6
 8004c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c44:	230a      	movs	r3, #10
 8004c46:	485e      	ldr	r0, [pc, #376]	; (8004dc0 <_printf_i+0x244>)
 8004c48:	e019      	b.n	8004c7e <_printf_i+0x102>
 8004c4a:	680e      	ldr	r6, [r1, #0]
 8004c4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c50:	602b      	str	r3, [r5, #0]
 8004c52:	bf18      	it	ne
 8004c54:	b236      	sxthne	r6, r6
 8004c56:	e7ef      	b.n	8004c38 <_printf_i+0xbc>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	6820      	ldr	r0, [r4, #0]
 8004c5c:	1d19      	adds	r1, r3, #4
 8004c5e:	6029      	str	r1, [r5, #0]
 8004c60:	0601      	lsls	r1, r0, #24
 8004c62:	d501      	bpl.n	8004c68 <_printf_i+0xec>
 8004c64:	681e      	ldr	r6, [r3, #0]
 8004c66:	e002      	b.n	8004c6e <_printf_i+0xf2>
 8004c68:	0646      	lsls	r6, r0, #25
 8004c6a:	d5fb      	bpl.n	8004c64 <_printf_i+0xe8>
 8004c6c:	881e      	ldrh	r6, [r3, #0]
 8004c6e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c70:	bf0c      	ite	eq
 8004c72:	2308      	moveq	r3, #8
 8004c74:	230a      	movne	r3, #10
 8004c76:	4852      	ldr	r0, [pc, #328]	; (8004dc0 <_printf_i+0x244>)
 8004c78:	2100      	movs	r1, #0
 8004c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c7e:	6865      	ldr	r5, [r4, #4]
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	bfa8      	it	ge
 8004c84:	6821      	ldrge	r1, [r4, #0]
 8004c86:	60a5      	str	r5, [r4, #8]
 8004c88:	bfa4      	itt	ge
 8004c8a:	f021 0104 	bicge.w	r1, r1, #4
 8004c8e:	6021      	strge	r1, [r4, #0]
 8004c90:	b90e      	cbnz	r6, 8004c96 <_printf_i+0x11a>
 8004c92:	2d00      	cmp	r5, #0
 8004c94:	d04d      	beq.n	8004d32 <_printf_i+0x1b6>
 8004c96:	4615      	mov	r5, r2
 8004c98:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c9c:	fb03 6711 	mls	r7, r3, r1, r6
 8004ca0:	5dc7      	ldrb	r7, [r0, r7]
 8004ca2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ca6:	4637      	mov	r7, r6
 8004ca8:	42bb      	cmp	r3, r7
 8004caa:	460e      	mov	r6, r1
 8004cac:	d9f4      	bls.n	8004c98 <_printf_i+0x11c>
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d10b      	bne.n	8004cca <_printf_i+0x14e>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	07de      	lsls	r6, r3, #31
 8004cb6:	d508      	bpl.n	8004cca <_printf_i+0x14e>
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	6861      	ldr	r1, [r4, #4]
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	bfde      	ittt	le
 8004cc0:	2330      	movle	r3, #48	; 0x30
 8004cc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cca:	1b52      	subs	r2, r2, r5
 8004ccc:	6122      	str	r2, [r4, #16]
 8004cce:	464b      	mov	r3, r9
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	f8cd a000 	str.w	sl, [sp]
 8004cd8:	aa03      	add	r2, sp, #12
 8004cda:	f7ff fedf 	bl	8004a9c <_printf_common>
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d14c      	bne.n	8004d7c <_printf_i+0x200>
 8004ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce6:	b004      	add	sp, #16
 8004ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cec:	4834      	ldr	r0, [pc, #208]	; (8004dc0 <_printf_i+0x244>)
 8004cee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cf2:	6829      	ldr	r1, [r5, #0]
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cfa:	6029      	str	r1, [r5, #0]
 8004cfc:	061d      	lsls	r5, r3, #24
 8004cfe:	d514      	bpl.n	8004d2a <_printf_i+0x1ae>
 8004d00:	07df      	lsls	r7, r3, #31
 8004d02:	bf44      	itt	mi
 8004d04:	f043 0320 	orrmi.w	r3, r3, #32
 8004d08:	6023      	strmi	r3, [r4, #0]
 8004d0a:	b91e      	cbnz	r6, 8004d14 <_printf_i+0x198>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f023 0320 	bic.w	r3, r3, #32
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	2310      	movs	r3, #16
 8004d16:	e7af      	b.n	8004c78 <_printf_i+0xfc>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	f043 0320 	orr.w	r3, r3, #32
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	2378      	movs	r3, #120	; 0x78
 8004d22:	4828      	ldr	r0, [pc, #160]	; (8004dc4 <_printf_i+0x248>)
 8004d24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d28:	e7e3      	b.n	8004cf2 <_printf_i+0x176>
 8004d2a:	0659      	lsls	r1, r3, #25
 8004d2c:	bf48      	it	mi
 8004d2e:	b2b6      	uxthmi	r6, r6
 8004d30:	e7e6      	b.n	8004d00 <_printf_i+0x184>
 8004d32:	4615      	mov	r5, r2
 8004d34:	e7bb      	b.n	8004cae <_printf_i+0x132>
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	6826      	ldr	r6, [r4, #0]
 8004d3a:	1d18      	adds	r0, r3, #4
 8004d3c:	6961      	ldr	r1, [r4, #20]
 8004d3e:	6028      	str	r0, [r5, #0]
 8004d40:	0635      	lsls	r5, r6, #24
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	d501      	bpl.n	8004d4a <_printf_i+0x1ce>
 8004d46:	6019      	str	r1, [r3, #0]
 8004d48:	e002      	b.n	8004d50 <_printf_i+0x1d4>
 8004d4a:	0670      	lsls	r0, r6, #25
 8004d4c:	d5fb      	bpl.n	8004d46 <_printf_i+0x1ca>
 8004d4e:	8019      	strh	r1, [r3, #0]
 8004d50:	2300      	movs	r3, #0
 8004d52:	4615      	mov	r5, r2
 8004d54:	6123      	str	r3, [r4, #16]
 8004d56:	e7ba      	b.n	8004cce <_printf_i+0x152>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	1d1a      	adds	r2, r3, #4
 8004d5e:	602a      	str	r2, [r5, #0]
 8004d60:	681d      	ldr	r5, [r3, #0]
 8004d62:	6862      	ldr	r2, [r4, #4]
 8004d64:	4628      	mov	r0, r5
 8004d66:	f000 f82f 	bl	8004dc8 <memchr>
 8004d6a:	b108      	cbz	r0, 8004d70 <_printf_i+0x1f4>
 8004d6c:	1b40      	subs	r0, r0, r5
 8004d6e:	6060      	str	r0, [r4, #4]
 8004d70:	6863      	ldr	r3, [r4, #4]
 8004d72:	6123      	str	r3, [r4, #16]
 8004d74:	2300      	movs	r3, #0
 8004d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d7a:	e7a8      	b.n	8004cce <_printf_i+0x152>
 8004d7c:	462a      	mov	r2, r5
 8004d7e:	4649      	mov	r1, r9
 8004d80:	4640      	mov	r0, r8
 8004d82:	6923      	ldr	r3, [r4, #16]
 8004d84:	47d0      	blx	sl
 8004d86:	3001      	adds	r0, #1
 8004d88:	d0ab      	beq.n	8004ce2 <_printf_i+0x166>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	079b      	lsls	r3, r3, #30
 8004d8e:	d413      	bmi.n	8004db8 <_printf_i+0x23c>
 8004d90:	68e0      	ldr	r0, [r4, #12]
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	4298      	cmp	r0, r3
 8004d96:	bfb8      	it	lt
 8004d98:	4618      	movlt	r0, r3
 8004d9a:	e7a4      	b.n	8004ce6 <_printf_i+0x16a>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4632      	mov	r2, r6
 8004da0:	4649      	mov	r1, r9
 8004da2:	4640      	mov	r0, r8
 8004da4:	47d0      	blx	sl
 8004da6:	3001      	adds	r0, #1
 8004da8:	d09b      	beq.n	8004ce2 <_printf_i+0x166>
 8004daa:	3501      	adds	r5, #1
 8004dac:	68e3      	ldr	r3, [r4, #12]
 8004dae:	9903      	ldr	r1, [sp, #12]
 8004db0:	1a5b      	subs	r3, r3, r1
 8004db2:	42ab      	cmp	r3, r5
 8004db4:	dcf2      	bgt.n	8004d9c <_printf_i+0x220>
 8004db6:	e7eb      	b.n	8004d90 <_printf_i+0x214>
 8004db8:	2500      	movs	r5, #0
 8004dba:	f104 0619 	add.w	r6, r4, #25
 8004dbe:	e7f5      	b.n	8004dac <_printf_i+0x230>
 8004dc0:	080050f9 	.word	0x080050f9
 8004dc4:	0800510a 	.word	0x0800510a

08004dc8 <memchr>:
 8004dc8:	4603      	mov	r3, r0
 8004dca:	b510      	push	{r4, lr}
 8004dcc:	b2c9      	uxtb	r1, r1
 8004dce:	4402      	add	r2, r0
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	d101      	bne.n	8004dda <memchr+0x12>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e003      	b.n	8004de2 <memchr+0x1a>
 8004dda:	7804      	ldrb	r4, [r0, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	428c      	cmp	r4, r1
 8004de0:	d1f6      	bne.n	8004dd0 <memchr+0x8>
 8004de2:	bd10      	pop	{r4, pc}

08004de4 <memcpy>:
 8004de4:	440a      	add	r2, r1
 8004de6:	4291      	cmp	r1, r2
 8004de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dec:	d100      	bne.n	8004df0 <memcpy+0xc>
 8004dee:	4770      	bx	lr
 8004df0:	b510      	push	{r4, lr}
 8004df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004df6:	4291      	cmp	r1, r2
 8004df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dfc:	d1f9      	bne.n	8004df2 <memcpy+0xe>
 8004dfe:	bd10      	pop	{r4, pc}

08004e00 <memmove>:
 8004e00:	4288      	cmp	r0, r1
 8004e02:	b510      	push	{r4, lr}
 8004e04:	eb01 0402 	add.w	r4, r1, r2
 8004e08:	d902      	bls.n	8004e10 <memmove+0x10>
 8004e0a:	4284      	cmp	r4, r0
 8004e0c:	4623      	mov	r3, r4
 8004e0e:	d807      	bhi.n	8004e20 <memmove+0x20>
 8004e10:	1e43      	subs	r3, r0, #1
 8004e12:	42a1      	cmp	r1, r4
 8004e14:	d008      	beq.n	8004e28 <memmove+0x28>
 8004e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e1e:	e7f8      	b.n	8004e12 <memmove+0x12>
 8004e20:	4601      	mov	r1, r0
 8004e22:	4402      	add	r2, r0
 8004e24:	428a      	cmp	r2, r1
 8004e26:	d100      	bne.n	8004e2a <memmove+0x2a>
 8004e28:	bd10      	pop	{r4, pc}
 8004e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e32:	e7f7      	b.n	8004e24 <memmove+0x24>

08004e34 <_free_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4605      	mov	r5, r0
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	d040      	beq.n	8004ebe <_free_r+0x8a>
 8004e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e40:	1f0c      	subs	r4, r1, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bfb8      	it	lt
 8004e46:	18e4      	addlt	r4, r4, r3
 8004e48:	f000 f910 	bl	800506c <__malloc_lock>
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <_free_r+0x8c>)
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	b933      	cbnz	r3, 8004e60 <_free_r+0x2c>
 8004e52:	6063      	str	r3, [r4, #4]
 8004e54:	6014      	str	r4, [r2, #0]
 8004e56:	4628      	mov	r0, r5
 8004e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e5c:	f000 b90c 	b.w	8005078 <__malloc_unlock>
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	d908      	bls.n	8004e76 <_free_r+0x42>
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	1821      	adds	r1, r4, r0
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	bf01      	itttt	eq
 8004e6c:	6819      	ldreq	r1, [r3, #0]
 8004e6e:	685b      	ldreq	r3, [r3, #4]
 8004e70:	1809      	addeq	r1, r1, r0
 8004e72:	6021      	streq	r1, [r4, #0]
 8004e74:	e7ed      	b.n	8004e52 <_free_r+0x1e>
 8004e76:	461a      	mov	r2, r3
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	b10b      	cbz	r3, 8004e80 <_free_r+0x4c>
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	d9fa      	bls.n	8004e76 <_free_r+0x42>
 8004e80:	6811      	ldr	r1, [r2, #0]
 8004e82:	1850      	adds	r0, r2, r1
 8004e84:	42a0      	cmp	r0, r4
 8004e86:	d10b      	bne.n	8004ea0 <_free_r+0x6c>
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	4401      	add	r1, r0
 8004e8c:	1850      	adds	r0, r2, r1
 8004e8e:	4283      	cmp	r3, r0
 8004e90:	6011      	str	r1, [r2, #0]
 8004e92:	d1e0      	bne.n	8004e56 <_free_r+0x22>
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4401      	add	r1, r0
 8004e9a:	6011      	str	r1, [r2, #0]
 8004e9c:	6053      	str	r3, [r2, #4]
 8004e9e:	e7da      	b.n	8004e56 <_free_r+0x22>
 8004ea0:	d902      	bls.n	8004ea8 <_free_r+0x74>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	602b      	str	r3, [r5, #0]
 8004ea6:	e7d6      	b.n	8004e56 <_free_r+0x22>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	1821      	adds	r1, r4, r0
 8004eac:	428b      	cmp	r3, r1
 8004eae:	bf01      	itttt	eq
 8004eb0:	6819      	ldreq	r1, [r3, #0]
 8004eb2:	685b      	ldreq	r3, [r3, #4]
 8004eb4:	1809      	addeq	r1, r1, r0
 8004eb6:	6021      	streq	r1, [r4, #0]
 8004eb8:	6063      	str	r3, [r4, #4]
 8004eba:	6054      	str	r4, [r2, #4]
 8004ebc:	e7cb      	b.n	8004e56 <_free_r+0x22>
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	20000578 	.word	0x20000578

08004ec4 <sbrk_aligned>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	4e0e      	ldr	r6, [pc, #56]	; (8004f00 <sbrk_aligned+0x3c>)
 8004ec8:	460c      	mov	r4, r1
 8004eca:	6831      	ldr	r1, [r6, #0]
 8004ecc:	4605      	mov	r5, r0
 8004ece:	b911      	cbnz	r1, 8004ed6 <sbrk_aligned+0x12>
 8004ed0:	f000 f8bc 	bl	800504c <_sbrk_r>
 8004ed4:	6030      	str	r0, [r6, #0]
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f000 f8b7 	bl	800504c <_sbrk_r>
 8004ede:	1c43      	adds	r3, r0, #1
 8004ee0:	d00a      	beq.n	8004ef8 <sbrk_aligned+0x34>
 8004ee2:	1cc4      	adds	r4, r0, #3
 8004ee4:	f024 0403 	bic.w	r4, r4, #3
 8004ee8:	42a0      	cmp	r0, r4
 8004eea:	d007      	beq.n	8004efc <sbrk_aligned+0x38>
 8004eec:	1a21      	subs	r1, r4, r0
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f000 f8ac 	bl	800504c <_sbrk_r>
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d101      	bne.n	8004efc <sbrk_aligned+0x38>
 8004ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8004efc:	4620      	mov	r0, r4
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	2000057c 	.word	0x2000057c

08004f04 <_malloc_r>:
 8004f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f08:	1ccd      	adds	r5, r1, #3
 8004f0a:	f025 0503 	bic.w	r5, r5, #3
 8004f0e:	3508      	adds	r5, #8
 8004f10:	2d0c      	cmp	r5, #12
 8004f12:	bf38      	it	cc
 8004f14:	250c      	movcc	r5, #12
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	4607      	mov	r7, r0
 8004f1a:	db01      	blt.n	8004f20 <_malloc_r+0x1c>
 8004f1c:	42a9      	cmp	r1, r5
 8004f1e:	d905      	bls.n	8004f2c <_malloc_r+0x28>
 8004f20:	230c      	movs	r3, #12
 8004f22:	2600      	movs	r6, #0
 8004f24:	603b      	str	r3, [r7, #0]
 8004f26:	4630      	mov	r0, r6
 8004f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f2c:	4e2e      	ldr	r6, [pc, #184]	; (8004fe8 <_malloc_r+0xe4>)
 8004f2e:	f000 f89d 	bl	800506c <__malloc_lock>
 8004f32:	6833      	ldr	r3, [r6, #0]
 8004f34:	461c      	mov	r4, r3
 8004f36:	bb34      	cbnz	r4, 8004f86 <_malloc_r+0x82>
 8004f38:	4629      	mov	r1, r5
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	f7ff ffc2 	bl	8004ec4 <sbrk_aligned>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	4604      	mov	r4, r0
 8004f44:	d14d      	bne.n	8004fe2 <_malloc_r+0xde>
 8004f46:	6834      	ldr	r4, [r6, #0]
 8004f48:	4626      	mov	r6, r4
 8004f4a:	2e00      	cmp	r6, #0
 8004f4c:	d140      	bne.n	8004fd0 <_malloc_r+0xcc>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	4631      	mov	r1, r6
 8004f52:	4638      	mov	r0, r7
 8004f54:	eb04 0803 	add.w	r8, r4, r3
 8004f58:	f000 f878 	bl	800504c <_sbrk_r>
 8004f5c:	4580      	cmp	r8, r0
 8004f5e:	d13a      	bne.n	8004fd6 <_malloc_r+0xd2>
 8004f60:	6821      	ldr	r1, [r4, #0]
 8004f62:	3503      	adds	r5, #3
 8004f64:	1a6d      	subs	r5, r5, r1
 8004f66:	f025 0503 	bic.w	r5, r5, #3
 8004f6a:	3508      	adds	r5, #8
 8004f6c:	2d0c      	cmp	r5, #12
 8004f6e:	bf38      	it	cc
 8004f70:	250c      	movcc	r5, #12
 8004f72:	4638      	mov	r0, r7
 8004f74:	4629      	mov	r1, r5
 8004f76:	f7ff ffa5 	bl	8004ec4 <sbrk_aligned>
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d02b      	beq.n	8004fd6 <_malloc_r+0xd2>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	442b      	add	r3, r5
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	e00e      	b.n	8004fa4 <_malloc_r+0xa0>
 8004f86:	6822      	ldr	r2, [r4, #0]
 8004f88:	1b52      	subs	r2, r2, r5
 8004f8a:	d41e      	bmi.n	8004fca <_malloc_r+0xc6>
 8004f8c:	2a0b      	cmp	r2, #11
 8004f8e:	d916      	bls.n	8004fbe <_malloc_r+0xba>
 8004f90:	1961      	adds	r1, r4, r5
 8004f92:	42a3      	cmp	r3, r4
 8004f94:	6025      	str	r5, [r4, #0]
 8004f96:	bf18      	it	ne
 8004f98:	6059      	strne	r1, [r3, #4]
 8004f9a:	6863      	ldr	r3, [r4, #4]
 8004f9c:	bf08      	it	eq
 8004f9e:	6031      	streq	r1, [r6, #0]
 8004fa0:	5162      	str	r2, [r4, r5]
 8004fa2:	604b      	str	r3, [r1, #4]
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	f104 060b 	add.w	r6, r4, #11
 8004faa:	f000 f865 	bl	8005078 <__malloc_unlock>
 8004fae:	f026 0607 	bic.w	r6, r6, #7
 8004fb2:	1d23      	adds	r3, r4, #4
 8004fb4:	1af2      	subs	r2, r6, r3
 8004fb6:	d0b6      	beq.n	8004f26 <_malloc_r+0x22>
 8004fb8:	1b9b      	subs	r3, r3, r6
 8004fba:	50a3      	str	r3, [r4, r2]
 8004fbc:	e7b3      	b.n	8004f26 <_malloc_r+0x22>
 8004fbe:	6862      	ldr	r2, [r4, #4]
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	bf0c      	ite	eq
 8004fc4:	6032      	streq	r2, [r6, #0]
 8004fc6:	605a      	strne	r2, [r3, #4]
 8004fc8:	e7ec      	b.n	8004fa4 <_malloc_r+0xa0>
 8004fca:	4623      	mov	r3, r4
 8004fcc:	6864      	ldr	r4, [r4, #4]
 8004fce:	e7b2      	b.n	8004f36 <_malloc_r+0x32>
 8004fd0:	4634      	mov	r4, r6
 8004fd2:	6876      	ldr	r6, [r6, #4]
 8004fd4:	e7b9      	b.n	8004f4a <_malloc_r+0x46>
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	4638      	mov	r0, r7
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	f000 f84c 	bl	8005078 <__malloc_unlock>
 8004fe0:	e7a1      	b.n	8004f26 <_malloc_r+0x22>
 8004fe2:	6025      	str	r5, [r4, #0]
 8004fe4:	e7de      	b.n	8004fa4 <_malloc_r+0xa0>
 8004fe6:	bf00      	nop
 8004fe8:	20000578 	.word	0x20000578

08004fec <_realloc_r>:
 8004fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff0:	4680      	mov	r8, r0
 8004ff2:	4614      	mov	r4, r2
 8004ff4:	460e      	mov	r6, r1
 8004ff6:	b921      	cbnz	r1, 8005002 <_realloc_r+0x16>
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffe:	f7ff bf81 	b.w	8004f04 <_malloc_r>
 8005002:	b92a      	cbnz	r2, 8005010 <_realloc_r+0x24>
 8005004:	f7ff ff16 	bl	8004e34 <_free_r>
 8005008:	4625      	mov	r5, r4
 800500a:	4628      	mov	r0, r5
 800500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005010:	f000 f838 	bl	8005084 <_malloc_usable_size_r>
 8005014:	4284      	cmp	r4, r0
 8005016:	4607      	mov	r7, r0
 8005018:	d802      	bhi.n	8005020 <_realloc_r+0x34>
 800501a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800501e:	d812      	bhi.n	8005046 <_realloc_r+0x5a>
 8005020:	4621      	mov	r1, r4
 8005022:	4640      	mov	r0, r8
 8005024:	f7ff ff6e 	bl	8004f04 <_malloc_r>
 8005028:	4605      	mov	r5, r0
 800502a:	2800      	cmp	r0, #0
 800502c:	d0ed      	beq.n	800500a <_realloc_r+0x1e>
 800502e:	42bc      	cmp	r4, r7
 8005030:	4622      	mov	r2, r4
 8005032:	4631      	mov	r1, r6
 8005034:	bf28      	it	cs
 8005036:	463a      	movcs	r2, r7
 8005038:	f7ff fed4 	bl	8004de4 <memcpy>
 800503c:	4631      	mov	r1, r6
 800503e:	4640      	mov	r0, r8
 8005040:	f7ff fef8 	bl	8004e34 <_free_r>
 8005044:	e7e1      	b.n	800500a <_realloc_r+0x1e>
 8005046:	4635      	mov	r5, r6
 8005048:	e7df      	b.n	800500a <_realloc_r+0x1e>
	...

0800504c <_sbrk_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	2300      	movs	r3, #0
 8005050:	4d05      	ldr	r5, [pc, #20]	; (8005068 <_sbrk_r+0x1c>)
 8005052:	4604      	mov	r4, r0
 8005054:	4608      	mov	r0, r1
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	f7fc fec4 	bl	8001de4 <_sbrk>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_sbrk_r+0x1a>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_sbrk_r+0x1a>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20000580 	.word	0x20000580

0800506c <__malloc_lock>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__malloc_lock+0x8>)
 800506e:	f000 b811 	b.w	8005094 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	20000584 	.word	0x20000584

08005078 <__malloc_unlock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_unlock+0x8>)
 800507a:	f000 b80c 	b.w	8005096 <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	20000584 	.word	0x20000584

08005084 <_malloc_usable_size_r>:
 8005084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005088:	1f18      	subs	r0, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfbc      	itt	lt
 800508e:	580b      	ldrlt	r3, [r1, r0]
 8005090:	18c0      	addlt	r0, r0, r3
 8005092:	4770      	bx	lr

08005094 <__retarget_lock_acquire_recursive>:
 8005094:	4770      	bx	lr

08005096 <__retarget_lock_release_recursive>:
 8005096:	4770      	bx	lr

08005098 <_init>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr

080050a4 <_fini>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr
