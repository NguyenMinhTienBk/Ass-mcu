
ass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004324  08004324  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004324  08004324  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004324  08004324  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800432c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000094  080043c0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  080043c0  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d74f  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e8  00000000  00000000  0002d80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0002fbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000309f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000328d  00000000  00000000  000316c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9b3  00000000  00000000  0003494d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b298  00000000  00000000  00044300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  000cf5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	080042a4 	.word	0x080042a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	080042a4 	.word	0x080042a4

0800014c <fsm_automatic_1_run>:
 */


#include <fsm_automatic_1.h>

void fsm_automatic_1_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status_ver){
 8000150:	4b56      	ldr	r3, [pc, #344]	; (80002ac <fsm_automatic_1_run+0x160>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b0e      	cmp	r3, #14
 8000156:	f200 809a 	bhi.w	800028e <fsm_automatic_1_run+0x142>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic_1_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800019d 	.word	0x0800019d
 8000164:	0800028f 	.word	0x0800028f
 8000168:	0800028f 	.word	0x0800028f
 800016c:	0800028f 	.word	0x0800028f
 8000170:	0800028f 	.word	0x0800028f
 8000174:	0800028f 	.word	0x0800028f
 8000178:	0800028f 	.word	0x0800028f
 800017c:	0800028f 	.word	0x0800028f
 8000180:	080001c3 	.word	0x080001c3
 8000184:	080001f1 	.word	0x080001f1
 8000188:	0800021f 	.word	0x0800021f
 800018c:	0800028f 	.word	0x0800028f
 8000190:	0800024d 	.word	0x0800024d
 8000194:	08000263 	.word	0x08000263
 8000198:	08000279 	.word	0x08000279
	case INIT:

		SetOffVer();
 800019c:	f000 fc50 	bl	8000a40 <SetOffVer>
		led12 = timered;
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a43      	ldr	r2, [pc, #268]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001a6:	6013      	str	r3, [r2, #0]
		status_ver = AUTO_RED;
 80001a8:	4b40      	ldr	r3, [pc, #256]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	601a      	str	r2, [r3, #0]

		setTimer1(timeTimer(timered));
 80001ae:	4b40      	ldr	r3, [pc, #256]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fa64 	bl	8000680 <timeTimer>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 f8ac 	bl	8001318 <setTimer1>
		break;
 80001c0:	e072      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
	case AUTO_RED:
		SetRedVer();
 80001c2:	f000 fc8d 	bl	8000ae0 <SetRedVer>
		if (timer1_flag == 1){
 80001c6:	4b3c      	ldr	r3, [pc, #240]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d161      	bne.n	8000292 <fsm_automatic_1_run+0x146>
			status_ver = AUTO_GREEN;
 80001ce:	4b37      	ldr	r3, [pc, #220]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001d0:	2209      	movs	r2, #9
 80001d2:	601a      	str	r2, [r3, #0]
			led12 = timegreen;
 80001d4:	4b39      	ldr	r3, [pc, #228]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a36      	ldr	r2, [pc, #216]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001da:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timegreen));
 80001dc:	4b37      	ldr	r3, [pc, #220]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fa4d 	bl	8000680 <timeTimer>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 f895 	bl	8001318 <setTimer1>
		}

		break;
 80001ee:	e050      	b.n	8000292 <fsm_automatic_1_run+0x146>
	case AUTO_GREEN:

		SetGreenVer();
 80001f0:	f000 fc8a 	bl	8000b08 <SetGreenVer>
		if (timer1_flag == 1){
 80001f4:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d14c      	bne.n	8000296 <fsm_automatic_1_run+0x14a>
			status_ver = AUTO_YELLOW;
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001fe:	220a      	movs	r2, #10
 8000200:	601a      	str	r2, [r3, #0]
			led12 = timeyellow;
 8000202:	4b2f      	ldr	r3, [pc, #188]	; (80002c0 <fsm_automatic_1_run+0x174>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a2b      	ldr	r2, [pc, #172]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000208:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timeyellow));
 800020a:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <fsm_automatic_1_run+0x174>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fa36 	bl	8000680 <timeTimer>
 8000214:	4603      	mov	r3, r0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 f87e 	bl	8001318 <setTimer1>
		}

		break;
 800021c:	e03b      	b.n	8000296 <fsm_automatic_1_run+0x14a>
	case AUTO_YELLOW:

		SetYellowVer();
 800021e:	f000 fc87 	bl	8000b30 <SetYellowVer>
		if (timer1_flag == 1){
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d137      	bne.n	800029a <fsm_automatic_1_run+0x14e>
			status_ver = AUTO_RED;
 800022a:	4b20      	ldr	r3, [pc, #128]	; (80002ac <fsm_automatic_1_run+0x160>)
 800022c:	2208      	movs	r2, #8
 800022e:	601a      	str	r2, [r3, #0]
			led12 = timered;
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <fsm_automatic_1_run+0x164>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000236:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timered));
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <fsm_automatic_1_run+0x164>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fa1f 	bl	8000680 <timeTimer>
 8000242:	4603      	mov	r3, r0
 8000244:	4618      	mov	r0, r3
 8000246:	f001 f867 	bl	8001318 <setTimer1>
		}

		break;
 800024a:	e026      	b.n	800029a <fsm_automatic_1_run+0x14e>
	case MODIFY_RED:
		if (timer1_flag == 1){
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d124      	bne.n	800029e <fsm_automatic_1_run+0x152>
			BlinkyRedVer();
 8000254:	f000 fb90 	bl	8000978 <BlinkyRedVer>
			setTimer1(500);
 8000258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025c:	f001 f85c 	bl	8001318 <setTimer1>
		}
		break;
 8000260:	e01d      	b.n	800029e <fsm_automatic_1_run+0x152>
	case MODIFY_GREEN:
		if (timer1_flag == 1){
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d11b      	bne.n	80002a2 <fsm_automatic_1_run+0x156>
			BlinkyGreenVer();
 800026a:	f000 fb97 	bl	800099c <BlinkyGreenVer>
			setTimer1(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f001 f851 	bl	8001318 <setTimer1>
		}
		break;
 8000276:	e014      	b.n	80002a2 <fsm_automatic_1_run+0x156>
	case MODIFY_YELLOW:
		if (timer1_flag == 1){
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d112      	bne.n	80002a6 <fsm_automatic_1_run+0x15a>
			BlinkyYellowVer();
 8000280:	f000 fb9e 	bl	80009c0 <BlinkyYellowVer>
			setTimer1(500);
 8000284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000288:	f001 f846 	bl	8001318 <setTimer1>
		}
		break;
 800028c:	e00b      	b.n	80002a6 <fsm_automatic_1_run+0x15a>
	default:
		break;
 800028e:	bf00      	nop
 8000290:	e00a      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000292:	bf00      	nop
 8000294:	e008      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000296:	bf00      	nop
 8000298:	e006      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029a:	bf00      	nop
 800029c:	e004      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029e:	bf00      	nop
 80002a0:	e002      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a2:	bf00      	nop
 80002a4:	e000      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a6:	bf00      	nop
	}

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	200000b4 	.word	0x200000b4
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	20000018 	.word	0x20000018
 80002b8:	20000100 	.word	0x20000100
 80002bc:	20000010 	.word	0x20000010
 80002c0:	20000014 	.word	0x20000014

080002c4 <fsm_automatic_2_run>:
 *      Author: pc
 */

#include "fsm_automatic_2.h"

void fsm_automatic_2_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch (status_hor){
 80002c8:	4b56      	ldr	r3, [pc, #344]	; (8000424 <fsm_automatic_2_run+0x160>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b0e      	cmp	r3, #14
 80002ce:	f200 809a 	bhi.w	8000406 <fsm_automatic_2_run+0x142>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_2_run+0x14>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	08000315 	.word	0x08000315
 80002dc:	08000407 	.word	0x08000407
 80002e0:	08000407 	.word	0x08000407
 80002e4:	08000407 	.word	0x08000407
 80002e8:	08000407 	.word	0x08000407
 80002ec:	08000407 	.word	0x08000407
 80002f0:	08000407 	.word	0x08000407
 80002f4:	08000407 	.word	0x08000407
 80002f8:	0800033b 	.word	0x0800033b
 80002fc:	08000369 	.word	0x08000369
 8000300:	08000397 	.word	0x08000397
 8000304:	08000407 	.word	0x08000407
 8000308:	080003c5 	.word	0x080003c5
 800030c:	080003db 	.word	0x080003db
 8000310:	080003f1 	.word	0x080003f1
	case INIT:
		SetOffHor();
 8000314:	f000 fc20 	bl	8000b58 <SetOffHor>
		led34 = timegreen;
 8000318:	4b43      	ldr	r3, [pc, #268]	; (8000428 <fsm_automatic_2_run+0x164>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a43      	ldr	r2, [pc, #268]	; (800042c <fsm_automatic_2_run+0x168>)
 800031e:	6013      	str	r3, [r2, #0]
		status_hor = AUTO_GREEN;
 8000320:	4b40      	ldr	r3, [pc, #256]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000322:	2209      	movs	r2, #9
 8000324:	601a      	str	r2, [r3, #0]
		setTimer2(timeTimer(timegreen));
 8000326:	4b40      	ldr	r3, [pc, #256]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 f9a8 	bl	8000680 <timeTimer>
 8000330:	4603      	mov	r3, r0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f80a 	bl	800134c <setTimer2>
		break;
 8000338:	e072      	b.n	8000420 <fsm_automatic_2_run+0x15c>
	case AUTO_RED :
		SetRedHor();
 800033a:	f000 fc1d 	bl	8000b78 <SetRedHor>
		if (timer2_flag == 1){
 800033e:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <fsm_automatic_2_run+0x16c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d161      	bne.n	800040a <fsm_automatic_2_run+0x146>
			status_hor = AUTO_GREEN;
 8000346:	4b37      	ldr	r3, [pc, #220]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000348:	2209      	movs	r2, #9
 800034a:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <fsm_automatic_2_run+0x164>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <fsm_automatic_2_run+0x168>)
 8000352:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timegreen));
 8000354:	4b34      	ldr	r3, [pc, #208]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f991 	bl	8000680 <timeTimer>
 800035e:	4603      	mov	r3, r0
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fff3 	bl	800134c <setTimer2>
		}

		break;
 8000366:	e050      	b.n	800040a <fsm_automatic_2_run+0x146>
	case AUTO_GREEN:

		SetGreenHor();
 8000368:	f000 fc16 	bl	8000b98 <SetGreenHor>
		if (timer2_flag == 1){
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d14c      	bne.n	800040e <fsm_automatic_2_run+0x14a>
			status_hor = AUTO_YELLOW;
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000376:	220a      	movs	r2, #10
 8000378:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <fsm_automatic_2_run+0x170>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a2b      	ldr	r2, [pc, #172]	; (800042c <fsm_automatic_2_run+0x168>)
 8000380:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timeyellow));
 8000382:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <fsm_automatic_2_run+0x170>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f97a 	bl	8000680 <timeTimer>
 800038c:	4603      	mov	r3, r0
 800038e:	4618      	mov	r0, r3
 8000390:	f000 ffdc 	bl	800134c <setTimer2>
		}

		break;
 8000394:	e03b      	b.n	800040e <fsm_automatic_2_run+0x14a>
	case AUTO_YELLOW:
		SetYellowHor();
 8000396:	f000 fc0f 	bl	8000bb8 <SetYellowHor>
		if (timer2_flag == 1){
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d137      	bne.n	8000412 <fsm_automatic_2_run+0x14e>
			status_hor = AUTO_RED;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <fsm_automatic_2_run+0x160>)
 80003a4:	2208      	movs	r2, #8
 80003a6:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1f      	ldr	r2, [pc, #124]	; (800042c <fsm_automatic_2_run+0x168>)
 80003ae:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timered));
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f963 	bl	8000680 <timeTimer>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 ffc5 	bl	800134c <setTimer2>
		}
		break;
 80003c2:	e026      	b.n	8000412 <fsm_automatic_2_run+0x14e>
	case MODIFY_RED:
		if (timer2_flag == 1){
 80003c4:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d124      	bne.n	8000416 <fsm_automatic_2_run+0x152>
			BlinkyRedHor();
 80003cc:	f000 fb0a 	bl	80009e4 <BlinkyRedHor>
			setTimer2(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f000 ffba 	bl	800134c <setTimer2>
		}
		break;
 80003d8:	e01d      	b.n	8000416 <fsm_automatic_2_run+0x152>
	case MODIFY_GREEN:
		if (timer2_flag == 1){
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d11b      	bne.n	800041a <fsm_automatic_2_run+0x156>
			BlinkyGreenHor();
 80003e2:	f000 fb0f 	bl	8000a04 <BlinkyGreenHor>
			setTimer2(500);
 80003e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ea:	f000 ffaf 	bl	800134c <setTimer2>
		}
		break;
 80003ee:	e014      	b.n	800041a <fsm_automatic_2_run+0x156>
	case MODIFY_YELLOW:
		if (timer2_flag == 1){
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d112      	bne.n	800041e <fsm_automatic_2_run+0x15a>
			BlinkyYellowHor();
 80003f8:	f000 fb14 	bl	8000a24 <BlinkyYellowHor>
			setTimer2(500);
 80003fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000400:	f000 ffa4 	bl	800134c <setTimer2>
		}
		break;
 8000404:	e00b      	b.n	800041e <fsm_automatic_2_run+0x15a>
	default:
		break;
 8000406:	bf00      	nop
 8000408:	e00a      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040a:	bf00      	nop
 800040c:	e008      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040e:	bf00      	nop
 8000410:	e006      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000412:	bf00      	nop
 8000414:	e004      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000416:	bf00      	nop
 8000418:	e002      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041a:	bf00      	nop
 800041c:	e000      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041e:	bf00      	nop
	}

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000b8 	.word	0x200000b8
 8000428:	20000010 	.word	0x20000010
 800042c:	2000001c 	.word	0x2000001c
 8000430:	20000104 	.word	0x20000104
 8000434:	20000014 	.word	0x20000014
 8000438:	2000000c 	.word	0x2000000c

0800043c <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	switch (status_mode){
 8000440:	4b82      	ldr	r3, [pc, #520]	; (800064c <fsm_mode_run+0x210>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b04      	cmp	r3, #4
 8000446:	f200 80f6 	bhi.w	8000636 <fsm_mode_run+0x1fa>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_mode_run+0x14>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000465 	.word	0x08000465
 8000454:	08000485 	.word	0x08000485
 8000458:	080004cb 	.word	0x080004cb
 800045c:	0800054f 	.word	0x0800054f
 8000460:	080005d3 	.word	0x080005d3
	case INIT:
		status_mode = MODE1;
 8000464:	4b79      	ldr	r3, [pc, #484]	; (800064c <fsm_mode_run+0x210>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
		status_ver = INIT;
 800046a:	4b79      	ldr	r3, [pc, #484]	; (8000650 <fsm_mode_run+0x214>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
		status_hor = INIT;
 8000470:	4b78      	ldr	r3, [pc, #480]	; (8000654 <fsm_mode_run+0x218>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
		status_led7seg = INIT;
 8000476:	4b78      	ldr	r3, [pc, #480]	; (8000658 <fsm_mode_run+0x21c>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
		index_led = 0;
 800047c:	4b77      	ldr	r3, [pc, #476]	; (800065c <fsm_mode_run+0x220>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
		//setTimer1(500);
		break;
 8000482:	e0e1      	b.n	8000648 <fsm_mode_run+0x20c>
	case MODE1 :

		if (isButtonflag(but1) == 1){
 8000484:	4b76      	ldr	r3, [pc, #472]	; (8000660 <fsm_mode_run+0x224>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f907 	bl	800069c <isButtonflag>
 800048e:	4603      	mov	r3, r0
 8000490:	2b01      	cmp	r3, #1
 8000492:	f040 80d2 	bne.w	800063a <fsm_mode_run+0x1fe>
			clearTimer1();
 8000496:	f000 ff0f 	bl	80012b8 <clearTimer1>
			clearTimer2();
 800049a:	f000 ff1d 	bl	80012d8 <clearTimer2>
			clearTimer3();
 800049e:	f000 ff2b 	bl	80012f8 <clearTimer3>
			status_mode = MODE2;
 80004a2:	4b6a      	ldr	r3, [pc, #424]	; (800064c <fsm_mode_run+0x210>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]
//			SetRedVerHor(); // to when blinky, led red ver and hor are the same
			status_ver = MODIFY_RED;
 80004a8:	4b69      	ldr	r3, [pc, #420]	; (8000650 <fsm_mode_run+0x214>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_RED;
 80004ae:	4b69      	ldr	r3, [pc, #420]	; (8000654 <fsm_mode_run+0x218>)
 80004b0:	220c      	movs	r2, #12
 80004b2:	601a      	str	r2, [r3, #0]
			led12 = MODE2;
 80004b4:	4b6b      	ldr	r3, [pc, #428]	; (8000664 <fsm_mode_run+0x228>)
 80004b6:	2202      	movs	r2, #2
 80004b8:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80004ba:	4b6b      	ldr	r3, [pc, #428]	; (8000668 <fsm_mode_run+0x22c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a6b      	ldr	r2, [pc, #428]	; (800066c <fsm_mode_run+0x230>)
 80004c0:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80004c2:	4b65      	ldr	r3, [pc, #404]	; (8000658 <fsm_mode_run+0x21c>)
 80004c4:	221e      	movs	r2, #30
 80004c6:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}

		break;
 80004c8:	e0b7      	b.n	800063a <fsm_mode_run+0x1fe>
	case MODE2:

		if (isButtonflag(but1) == 1){
 80004ca:	4b65      	ldr	r3, [pc, #404]	; (8000660 <fsm_mode_run+0x224>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f8e4 	bl	800069c <isButtonflag>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d118      	bne.n	800050c <fsm_mode_run+0xd0>
			clearTimer1();
 80004da:	f000 feed 	bl	80012b8 <clearTimer1>
			clearTimer2();
 80004de:	f000 fefb 	bl	80012d8 <clearTimer2>
			clearTimer3();
 80004e2:	f000 ff09 	bl	80012f8 <clearTimer3>
			status_mode = MODE3;
 80004e6:	4b59      	ldr	r3, [pc, #356]	; (800064c <fsm_mode_run+0x210>)
 80004e8:	2203      	movs	r2, #3
 80004ea:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_YELLOW;
 80004ec:	4b58      	ldr	r3, [pc, #352]	; (8000650 <fsm_mode_run+0x214>)
 80004ee:	220e      	movs	r2, #14
 80004f0:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_YELLOW;
 80004f2:	4b58      	ldr	r3, [pc, #352]	; (8000654 <fsm_mode_run+0x218>)
 80004f4:	220e      	movs	r2, #14
 80004f6:	601a      	str	r2, [r3, #0]
			led12 = MODE3;
 80004f8:	4b5a      	ldr	r3, [pc, #360]	; (8000664 <fsm_mode_run+0x228>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 80004fe:	4b5c      	ldr	r3, [pc, #368]	; (8000670 <fsm_mode_run+0x234>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a5a      	ldr	r2, [pc, #360]	; (800066c <fsm_mode_run+0x230>)
 8000504:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 8000506:	4b54      	ldr	r3, [pc, #336]	; (8000658 <fsm_mode_run+0x21c>)
 8000508:	221e      	movs	r2, #30
 800050a:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 800050c:	4b59      	ldr	r3, [pc, #356]	; (8000674 <fsm_mode_run+0x238>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f8c3 	bl	800069c <isButtonflag>
 8000516:	4603      	mov	r3, r0
 8000518:	2b01      	cmp	r3, #1
 800051a:	d10b      	bne.n	8000534 <fsm_mode_run+0xf8>
			led34++;
 800051c:	4b53      	ldr	r3, [pc, #332]	; (800066c <fsm_mode_run+0x230>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	4a52      	ldr	r2, [pc, #328]	; (800066c <fsm_mode_run+0x230>)
 8000524:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 8000526:	4b51      	ldr	r3, [pc, #324]	; (800066c <fsm_mode_run+0x230>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b63      	cmp	r3, #99	; 0x63
 800052c:	dd02      	ble.n	8000534 <fsm_mode_run+0xf8>
				led34 = 0;
 800052e:	4b4f      	ldr	r3, [pc, #316]	; (800066c <fsm_mode_run+0x230>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 8000534:	4b50      	ldr	r3, [pc, #320]	; (8000678 <fsm_mode_run+0x23c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f8af 	bl	800069c <isButtonflag>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d17c      	bne.n	800063e <fsm_mode_run+0x202>
			timered  = led34;
 8000544:	4b49      	ldr	r3, [pc, #292]	; (800066c <fsm_mode_run+0x230>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a47      	ldr	r2, [pc, #284]	; (8000668 <fsm_mode_run+0x22c>)
 800054a:	6013      	str	r3, [r2, #0]
		}
		break;
 800054c:	e077      	b.n	800063e <fsm_mode_run+0x202>
	case MODE3:

		if (isButtonflag(but1) == 1){
 800054e:	4b44      	ldr	r3, [pc, #272]	; (8000660 <fsm_mode_run+0x224>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f8a2 	bl	800069c <isButtonflag>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d118      	bne.n	8000590 <fsm_mode_run+0x154>
			clearTimer1();
 800055e:	f000 feab 	bl	80012b8 <clearTimer1>
			clearTimer2();
 8000562:	f000 feb9 	bl	80012d8 <clearTimer2>
			clearTimer3();
 8000566:	f000 fec7 	bl	80012f8 <clearTimer3>
			status_mode = MODE4;
 800056a:	4b38      	ldr	r3, [pc, #224]	; (800064c <fsm_mode_run+0x210>)
 800056c:	2204      	movs	r2, #4
 800056e:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_GREEN;
 8000570:	4b37      	ldr	r3, [pc, #220]	; (8000650 <fsm_mode_run+0x214>)
 8000572:	220d      	movs	r2, #13
 8000574:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_GREEN;
 8000576:	4b37      	ldr	r3, [pc, #220]	; (8000654 <fsm_mode_run+0x218>)
 8000578:	220d      	movs	r2, #13
 800057a:	601a      	str	r2, [r3, #0]
			led12 = MODE4;
 800057c:	4b39      	ldr	r3, [pc, #228]	; (8000664 <fsm_mode_run+0x228>)
 800057e:	2204      	movs	r2, #4
 8000580:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 8000582:	4b3e      	ldr	r3, [pc, #248]	; (800067c <fsm_mode_run+0x240>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a39      	ldr	r2, [pc, #228]	; (800066c <fsm_mode_run+0x230>)
 8000588:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 800058a:	4b33      	ldr	r3, [pc, #204]	; (8000658 <fsm_mode_run+0x21c>)
 800058c:	221e      	movs	r2, #30
 800058e:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000590:	4b38      	ldr	r3, [pc, #224]	; (8000674 <fsm_mode_run+0x238>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f881 	bl	800069c <isButtonflag>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d10b      	bne.n	80005b8 <fsm_mode_run+0x17c>
			led34++;
 80005a0:	4b32      	ldr	r3, [pc, #200]	; (800066c <fsm_mode_run+0x230>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a31      	ldr	r2, [pc, #196]	; (800066c <fsm_mode_run+0x230>)
 80005a8:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 80005aa:	4b30      	ldr	r3, [pc, #192]	; (800066c <fsm_mode_run+0x230>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b63      	cmp	r3, #99	; 0x63
 80005b0:	dd02      	ble.n	80005b8 <fsm_mode_run+0x17c>
				led34 = 0;
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <fsm_mode_run+0x230>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 80005b8:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <fsm_mode_run+0x23c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f86d 	bl	800069c <isButtonflag>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d13c      	bne.n	8000642 <fsm_mode_run+0x206>
			timeyellow  = led34;
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <fsm_mode_run+0x230>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a28      	ldr	r2, [pc, #160]	; (8000670 <fsm_mode_run+0x234>)
 80005ce:	6013      	str	r3, [r2, #0]
		}

		break;
 80005d0:	e037      	b.n	8000642 <fsm_mode_run+0x206>
	case MODE4:
		if (isButtonflag(but1) == 1){
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <fsm_mode_run+0x224>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f860 	bl	800069c <isButtonflag>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d108      	bne.n	80005f4 <fsm_mode_run+0x1b8>
			clearTimer1();
 80005e2:	f000 fe69 	bl	80012b8 <clearTimer1>
			clearTimer2();
 80005e6:	f000 fe77 	bl	80012d8 <clearTimer2>
			clearTimer3();
 80005ea:	f000 fe85 	bl	80012f8 <clearTimer3>
			status_mode = INIT;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <fsm_mode_run+0x210>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
//			status_ver = INIT;
//			status_hor = INIT;
//			status_led7seg = MODE1_led7seg_1;
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <fsm_mode_run+0x238>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f84f 	bl	800069c <isButtonflag>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d10b      	bne.n	800061c <fsm_mode_run+0x1e0>
			led34++;
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <fsm_mode_run+0x230>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <fsm_mode_run+0x230>)
 800060c:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <fsm_mode_run+0x230>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b63      	cmp	r3, #99	; 0x63
 8000614:	dd02      	ble.n	800061c <fsm_mode_run+0x1e0>
				led34 = 0;
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <fsm_mode_run+0x230>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <fsm_mode_run+0x23c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f83b 	bl	800069c <isButtonflag>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d10c      	bne.n	8000646 <fsm_mode_run+0x20a>
			timegreen = led34;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <fsm_mode_run+0x230>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <fsm_mode_run+0x240>)
 8000632:	6013      	str	r3, [r2, #0]
		}
		break;
 8000634:	e007      	b.n	8000646 <fsm_mode_run+0x20a>
	default:
		break;
 8000636:	bf00      	nop
 8000638:	e006      	b.n	8000648 <fsm_mode_run+0x20c>
		break;
 800063a:	bf00      	nop
 800063c:	e004      	b.n	8000648 <fsm_mode_run+0x20c>
		break;
 800063e:	bf00      	nop
 8000640:	e002      	b.n	8000648 <fsm_mode_run+0x20c>
		break;
 8000642:	bf00      	nop
 8000644:	e000      	b.n	8000648 <fsm_mode_run+0x20c>
		break;
 8000646:	bf00      	nop
	}


}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000b0 	.word	0x200000b0
 8000650:	200000b4 	.word	0x200000b4
 8000654:	200000b8 	.word	0x200000b8
 8000658:	200000bc 	.word	0x200000bc
 800065c:	200000c0 	.word	0x200000c0
 8000660:	200000c4 	.word	0x200000c4
 8000664:	20000018 	.word	0x20000018
 8000668:	2000000c 	.word	0x2000000c
 800066c:	2000001c 	.word	0x2000001c
 8000670:	20000014 	.word	0x20000014
 8000674:	20000000 	.word	0x20000000
 8000678:	20000004 	.word	0x20000004
 800067c:	20000010 	.word	0x20000010

08000680 <timeTimer>:
int timeyellow = 2;

int led12 = 5;
int led34 = 3;

int timeTimer(int time){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	return time * 1000;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800068e:	fb02 f303 	mul.w	r3, r2, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 80006a4:	4a09      	ldr	r2, [pc, #36]	; (80006cc <isButtonflag+0x30>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d106      	bne.n	80006be <isButtonflag+0x22>
		flagForButton[index] = 0;
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <isButtonflag+0x30>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
		return 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <isButtonflag+0x24>
	}
	return 0;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	200000dc 	.word	0x200000dc

080006d0 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d901      	bls.n	80006e4 <is_button_pressed+0x14>
 80006e0:	2300      	movs	r3, #0
 80006e2:	e007      	b.n	80006f4 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4a06      	ldr	r2, [pc, #24]	; (8000700 <is_button_pressed+0x30>)
 80006e8:	5cd3      	ldrb	r3, [r2, r3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf0c      	ite	eq
 80006ee:	2301      	moveq	r3, #1
 80006f0:	2300      	movne	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200000c8 	.word	0x200000c8

08000704 <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b02      	cmp	r3, #2
 8000712:	d901      	bls.n	8000718 <is_button_pressed_3s+0x14>
 8000714:	23ff      	movs	r3, #255	; 0xff
 8000716:	e007      	b.n	8000728 <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4a06      	ldr	r2, [pc, #24]	; (8000734 <is_button_pressed_3s+0x30>)
 800071c:	5cd3      	ldrb	r3, [r2, r3]
 800071e:	2b01      	cmp	r3, #1
 8000720:	bf0c      	ite	eq
 8000722:	2301      	moveq	r3, #1
 8000724:	2300      	movne	r3, #0
 8000726:	b2db      	uxtb	r3, r3
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000d8 	.word	0x200000d8

08000738 <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
void fsm_for_input_processing(uint8_t index ){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4a51      	ldr	r2, [pc, #324]	; (800088c <fsm_for_input_processing+0x154>)
 8000746:	5cd3      	ldrb	r3, [r2, r3]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d068      	beq.n	800081e <fsm_for_input_processing+0xe6>
 800074c:	2b02      	cmp	r3, #2
 800074e:	f300 8098 	bgt.w	8000882 <fsm_for_input_processing+0x14a>
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <fsm_for_input_processing+0x24>
 8000756:	2b01      	cmp	r3, #1
 8000758:	d01a      	beq.n	8000790 <fsm_for_input_processing+0x58>
					}
				}

			break ;
	}
}
 800075a:	e092      	b.n	8000882 <fsm_for_input_processing+0x14a>
			if( is_button_pressed(index)){
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffb6 	bl	80006d0 <is_button_pressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 8088 	beq.w	800087c <fsm_for_input_processing+0x144>
				buttonState[index] = BUTTON_PRESSED ;
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	4a47      	ldr	r2, [pc, #284]	; (800088c <fsm_for_input_processing+0x154>)
 8000770:	2101      	movs	r1, #1
 8000772:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4a46      	ldr	r2, [pc, #280]	; (8000890 <fsm_for_input_processing+0x158>)
 8000778:	2100      	movs	r1, #0
 800077a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4a44      	ldr	r2, [pc, #272]	; (8000894 <fsm_for_input_processing+0x15c>)
 8000782:	2100      	movs	r1, #0
 8000784:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4a43      	ldr	r2, [pc, #268]	; (8000898 <fsm_for_input_processing+0x160>)
 800078a:	2101      	movs	r1, #1
 800078c:	54d1      	strb	r1, [r2, r3]
			break ;
 800078e:	e075      	b.n	800087c <fsm_for_input_processing+0x144>
			if (!is_button_pressed(index)){
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff9c 	bl	80006d0 <is_button_pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10d      	bne.n	80007ba <fsm_for_input_processing+0x82>
				buttonState[index] =	 BUTTON_RELEASED ;
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4a3a      	ldr	r2, [pc, #232]	; (800088c <fsm_for_input_processing+0x154>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4a3b      	ldr	r2, [pc, #236]	; (8000898 <fsm_for_input_processing+0x160>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4a37      	ldr	r2, [pc, #220]	; (8000890 <fsm_for_input_processing+0x158>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 80007b8:	e062      	b.n	8000880 <fsm_for_input_processing+0x148>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a34      	ldr	r2, [pc, #208]	; (8000890 <fsm_for_input_processing+0x158>)
 80007be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c2:	2b63      	cmp	r3, #99	; 0x63
 80007c4:	d809      	bhi.n	80007da <fsm_for_input_processing+0xa2>
						counterForButtonPress1s[index]++;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4a31      	ldr	r2, [pc, #196]	; (8000890 <fsm_for_input_processing+0x158>)
 80007ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007ce:	3201      	adds	r2, #1
 80007d0:	b291      	uxth	r1, r2
 80007d2:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <fsm_for_input_processing+0x158>)
 80007d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007d8:	e011      	b.n	80007fe <fsm_for_input_processing+0xc6>
					flagForButtonPress1s[index] = 1;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <fsm_for_input_processing+0x15c>)
 80007de:	2101      	movs	r1, #1
 80007e0:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <fsm_for_input_processing+0x160>)
 80007e6:	2101      	movs	r1, #1
 80007e8:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4a2b      	ldr	r2, [pc, #172]	; (800089c <fsm_for_input_processing+0x164>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4a26      	ldr	r2, [pc, #152]	; (8000890 <fsm_for_input_processing+0x158>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff7f 	bl	8000704 <is_button_pressed_3s>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d039      	beq.n	8000880 <fsm_for_input_processing+0x148>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a1f      	ldr	r2, [pc, #124]	; (800088c <fsm_for_input_processing+0x154>)
 8000810:	2102      	movs	r1, #2
 8000812:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <fsm_for_input_processing+0x15c>)
 8000818:	2100      	movs	r1, #0
 800081a:	54d1      	strb	r1, [r2, r3]
			break ;
 800081c:	e030      	b.n	8000880 <fsm_for_input_processing+0x148>
			if (! is_button_pressed(index)){
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff55 	bl	80006d0 <is_button_pressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10d      	bne.n	8000848 <fsm_for_input_processing+0x110>
				buttonState[index] = BUTTON_RELEASED;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <fsm_for_input_processing+0x154>)
 8000830:	2100      	movs	r1, #0
 8000832:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <fsm_for_input_processing+0x160>)
 8000838:	2100      	movs	r1, #0
 800083a:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <fsm_for_input_processing+0x164>)
 8000840:	2100      	movs	r1, #0
 8000842:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000846:	e01c      	b.n	8000882 <fsm_for_input_processing+0x14a>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4a14      	ldr	r2, [pc, #80]	; (800089c <fsm_for_input_processing+0x164>)
 800084c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000850:	2b13      	cmp	r3, #19
 8000852:	d809      	bhi.n	8000868 <fsm_for_input_processing+0x130>
							counterForButtonAfterPress1s[index]++;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <fsm_for_input_processing+0x164>)
 8000858:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800085c:	3201      	adds	r2, #1
 800085e:	b291      	uxth	r1, r2
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <fsm_for_input_processing+0x164>)
 8000862:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000866:	e00c      	b.n	8000882 <fsm_for_input_processing+0x14a>
						flagForButton[index] = 1;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <fsm_for_input_processing+0x160>)
 800086c:	2101      	movs	r1, #1
 800086e:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <fsm_for_input_processing+0x164>)
 8000874:	2100      	movs	r1, #0
 8000876:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 800087a:	e002      	b.n	8000882 <fsm_for_input_processing+0x14a>
			break ;
 800087c:	bf00      	nop
 800087e:	e000      	b.n	8000882 <fsm_for_input_processing+0x14a>
			break ;
 8000880:	bf00      	nop
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000f0 	.word	0x200000f0
 8000890:	200000e0 	.word	0x200000e0
 8000894:	200000d8 	.word	0x200000d8
 8000898:	200000dc 	.word	0x200000dc
 800089c:	200000e8 	.word	0x200000e8

080008a0 <button_reading>:




void button_reading(void){
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	e051      	b.n	8000950 <button_reading+0xb0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80008ac:	79fa      	ldrb	r2, [r7, #7]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	492b      	ldr	r1, [pc, #172]	; (8000960 <button_reading+0xc0>)
 80008b2:	5c89      	ldrb	r1, [r1, r2]
 80008b4:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <button_reading+0xc4>)
 80008b6:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	492a      	ldr	r1, [pc, #168]	; (8000968 <button_reading+0xc8>)
 80008be:	5c89      	ldrb	r1, [r1, r2]
 80008c0:	4a27      	ldr	r2, [pc, #156]	; (8000960 <button_reading+0xc0>)
 80008c2:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d01a      	beq.n	8000900 <button_reading+0x60>
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	dc22      	bgt.n	8000914 <button_reading+0x74>
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <button_reading+0x38>
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00a      	beq.n	80008ec <button_reading+0x4c>
			  break;
		  case 2: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
			  break;
		  default:
			  break;
 80008d6:	e01d      	b.n	8000914 <button_reading+0x74>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80008d8:	79fc      	ldrb	r4, [r7, #7]
 80008da:	2102      	movs	r1, #2
 80008dc:	4823      	ldr	r0, [pc, #140]	; (800096c <button_reading+0xcc>)
 80008de:	f001 fafd 	bl	8001edc <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <button_reading+0xc8>)
 80008e8:	551a      	strb	r2, [r3, r4]
			  break;
 80008ea:	e014      	b.n	8000916 <button_reading+0x76>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80008ec:	79fc      	ldrb	r4, [r7, #7]
 80008ee:	2110      	movs	r1, #16
 80008f0:	481e      	ldr	r0, [pc, #120]	; (800096c <button_reading+0xcc>)
 80008f2:	f001 faf3 	bl	8001edc <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <button_reading+0xc8>)
 80008fc:	551a      	strb	r2, [r3, r4]
			  break;
 80008fe:	e00a      	b.n	8000916 <button_reading+0x76>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000900:	79fc      	ldrb	r4, [r7, #7]
 8000902:	2101      	movs	r1, #1
 8000904:	481a      	ldr	r0, [pc, #104]	; (8000970 <button_reading+0xd0>)
 8000906:	f001 fae9 	bl	8001edc <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <button_reading+0xc8>)
 8000910:	551a      	strb	r2, [r3, r4]
			  break;
 8000912:	e000      	b.n	8000916 <button_reading+0x76>
			  break;
 8000914:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <button_reading+0xc8>)
 800091a:	5cd2      	ldrb	r2, [r2, r3]
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4910      	ldr	r1, [pc, #64]	; (8000960 <button_reading+0xc0>)
 8000920:	5ccb      	ldrb	r3, [r1, r3]
 8000922:	429a      	cmp	r2, r3
 8000924:	d111      	bne.n	800094a <button_reading+0xaa>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <button_reading+0xc0>)
 800092a:	5cd2      	ldrb	r2, [r2, r3]
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <button_reading+0xc4>)
 8000930:	5ccb      	ldrb	r3, [r1, r3]
 8000932:	429a      	cmp	r2, r3
 8000934:	d109      	bne.n	800094a <button_reading+0xaa>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	490a      	ldr	r1, [pc, #40]	; (8000964 <button_reading+0xc4>)
 800093c:	5c89      	ldrb	r1, [r1, r2]
 800093e:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <button_reading+0xd4>)
 8000940:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fef7 	bl	8000738 <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	3301      	adds	r3, #1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d9aa      	bls.n	80008ac <button_reading+0xc>
		  }

	}
}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	200000d0 	.word	0x200000d0
 8000964:	200000d4 	.word	0x200000d4
 8000968:	200000cc 	.word	0x200000cc
 800096c:	40010800 	.word	0x40010800
 8000970:	40010c00 	.word	0x40010c00
 8000974:	200000c8 	.word	0x200000c8

08000978 <BlinkyRedVer>:
	led_buffer[1] = led1_2 % 10;
	led_buffer[2] = led3_4 / 10;
	led_buffer[3] = led3_4 % 10;
}

void BlinkyRedVer(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);

//	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
	//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <BlinkyRedVer+0x1c>)
 8000984:	f001 fac1 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8000988:	2108      	movs	r1, #8
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <BlinkyRedVer+0x20>)
 800098c:	f001 fad5 	bl	8001f3a <HAL_GPIO_TogglePin>

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010800 	.word	0x40010800
 8000998:	40010c00 	.word	0x40010c00

0800099c <BlinkyGreenVer>:
void BlinkyGreenVer(){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 80009a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <BlinkyGreenVer+0x1c>)
 80009a6:	f001 fac8 	bl	8001f3a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2108      	movs	r1, #8
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <BlinkyGreenVer+0x20>)
 80009b0:	f001 faab 	bl	8001f0a <HAL_GPIO_WritePin>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010800 	.word	0x40010800
 80009bc:	40010c00 	.word	0x40010c00

080009c0 <BlinkyYellowVer>:
void BlinkyYellowVer(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin);
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 80009c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <BlinkyYellowVer+0x1c>)
 80009ca:	f001 fab6 	bl	8001f3a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 80009ce:	2108      	movs	r1, #8
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <BlinkyYellowVer+0x20>)
 80009d2:	f001 fab2 	bl	8001f3a <HAL_GPIO_TogglePin>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40010800 	.word	0x40010800
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <BlinkyRedHor>:

void BlinkyRedHor(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_TogglePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2120      	movs	r1, #32
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <BlinkyRedHor+0x1c>)
 80009ee:	f001 fa8c 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 80009f2:	2110      	movs	r1, #16
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <BlinkyRedHor+0x1c>)
 80009f6:	f001 faa0 	bl	8001f3a <HAL_GPIO_TogglePin>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40010c00 	.word	0x40010c00

08000a04 <BlinkyGreenHor>:
void BlinkyGreenHor(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000a08:	2120      	movs	r1, #32
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <BlinkyGreenHor+0x1c>)
 8000a0c:	f001 fa95 	bl	8001f3a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2110      	movs	r1, #16
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <BlinkyGreenHor+0x1c>)
 8000a16:	f001 fa78 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40010c00 	.word	0x40010c00

08000a24 <BlinkyYellowHor>:
void BlinkyYellowHor(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4804      	ldr	r0, [pc, #16]	; (8000a3c <BlinkyYellowHor+0x18>)
 8000a2c:	f001 fa85 	bl	8001f3a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8000a30:	2110      	movs	r1, #16
 8000a32:	4802      	ldr	r0, [pc, #8]	; (8000a3c <BlinkyYellowHor+0x18>)
 8000a34:	f001 fa81 	bl	8001f3a <HAL_GPIO_TogglePin>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <SetOffVer>:
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
//}


void SetOffVer(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <SetOffVer+0x20>)
 8000a4c:	f001 fa5d 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2108      	movs	r1, #8
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <SetOffVer+0x24>)
 8000a56:	f001 fa58 	bl	8001f0a <HAL_GPIO_WritePin>

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010800 	.word	0x40010800
 8000a64:	40010c00 	.word	0x40010c00

08000a68 <SetPedesRed>:

void SetPedesRed(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <SetPedesRed+0x20>)
 8000a74:	f001 fa49 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <SetPedesRed+0x24>)
 8000a80:	f001 fa43 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40010c00 	.word	0x40010c00
 8000a8c:	40010800 	.word	0x40010800

08000a90 <SetPedesGreen>:
void SetPedesGreen(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <SetPedesGreen+0x20>)
 8000a9c:	f001 fa35 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <SetPedesGreen+0x24>)
 8000aa8:	f001 fa2f 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	40010800 	.word	0x40010800

08000ab8 <SetPedesOff>:

void SetPedesOff(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <SetPedesOff+0x20>)
 8000ac4:	f001 fa21 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <SetPedesOff+0x24>)
 8000ad0:	f001 fa1b 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40010c00 	.word	0x40010c00
 8000adc:	40010800 	.word	0x40010800

08000ae0 <SetRedVer>:

void SetRedVer(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <SetRedVer+0x20>)
 8000aec:	f001 fa0d 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2108      	movs	r1, #8
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <SetRedVer+0x24>)
 8000af6:	f001 fa08 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40010800 	.word	0x40010800
 8000b04:	40010c00 	.word	0x40010c00

08000b08 <SetGreenVer>:

void SetGreenVer(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <SetGreenVer+0x20>)
 8000b14:	f001 f9f9 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <SetGreenVer+0x24>)
 8000b1e:	f001 f9f4 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40010c00 	.word	0x40010c00

08000b30 <SetYellowVer>:

void SetYellowVer(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <SetYellowVer+0x20>)
 8000b3c:	f001 f9e5 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2108      	movs	r1, #8
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <SetYellowVer+0x24>)
 8000b46:	f001 f9e0 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <SetOffHor>:


void SetOffHor(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2120      	movs	r1, #32
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <SetOffHor+0x1c>)
 8000b62:	f001 f9d2 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4802      	ldr	r0, [pc, #8]	; (8000b74 <SetOffHor+0x1c>)
 8000b6c:	f001 f9cd 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <SetRedHor>:

void SetRedHor(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2120      	movs	r1, #32
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <SetRedHor+0x1c>)
 8000b82:	f001 f9c2 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4802      	ldr	r0, [pc, #8]	; (8000b94 <SetRedHor+0x1c>)
 8000b8c:	f001 f9bd 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <SetGreenHor>:

void SetGreenHor(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <SetGreenHor+0x1c>)
 8000ba2:	f001 f9b2 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <SetGreenHor+0x1c>)
 8000bac:	f001 f9ad 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40010c00 	.word	0x40010c00

08000bb8 <SetYellowHor>:

void SetYellowHor(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <SetYellowHor+0x1c>)
 8000bc2:	f001 f9a2 	bl	8001f0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2110      	movs	r1, #16
 8000bca:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <SetYellowHor+0x1c>)
 8000bcc:	f001 f99d 	bl	8001f0a <HAL_GPIO_WritePin>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40010c00 	.word	0x40010c00

08000bd8 <Buzzer_On>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Buzzer_On(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 255; i++ ){
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	e01e      	b.n	8000c22 <Buzzer_On+0x4a>
		if (timer6_flag == 1){
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <Buzzer_On+0x5c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d117      	bne.n	8000c1c <Buzzer_On+0x44>
			i += 255 / (timegreen + timeyellow);
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <Buzzer_On+0x60>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <Buzzer_On+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	607b      	str	r3, [r7, #4]
			if (i > 255) i = 255;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2bff      	cmp	r3, #255	; 0xff
 8000c06:	dd01      	ble.n	8000c0c <Buzzer_On+0x34>
 8000c08:	23ff      	movs	r3, #255	; 0xff
 8000c0a:	607b      	str	r3, [r7, #4]
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,i);
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <Buzzer_On+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer6(1000);
 8000c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c18:	f000 fc00 	bl	800141c <setTimer6>
	for (int i = 0; i < 255; i++ ){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2bfe      	cmp	r3, #254	; 0xfe
 8000c26:	dddd      	ble.n	8000be4 <Buzzer_On+0xc>
		}
	}
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000114 	.word	0x20000114
 8000c38:	20000010 	.word	0x20000010
 8000c3c:	20000014 	.word	0x20000014
 8000c40:	20000140 	.word	0x20000140

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4a:	f000 fe2f 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4e:	f000 f887 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c52:	f000 f9b3 	bl	8000fbc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c56:	f000 f8c5 	bl	8000de4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c5a:	f000 f90f 	bl	8000e7c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c5e:	f000 f983 	bl	8000f68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c62:	4832      	ldr	r0, [pc, #200]	; (8000d2c <main+0xe8>)
 8000c64:	f001 fdec 	bl	8002840 <HAL_TIM_Base_Start_IT>
//HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4831      	ldr	r0, [pc, #196]	; (8000d30 <main+0xec>)
 8000c6c:	f001 fe92 	bl	8002994 <HAL_TIM_PWM_Start>
  status_mode = INIT;
 8000c70:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <main+0xf0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
  setTimer1(1000);
 8000c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7a:	f000 fb4d 	bl	8001318 <setTimer1>
  setTimer2(1000);
 8000c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c82:	f000 fb63 	bl	800134c <setTimer2>
  setTimer3(1000);
 8000c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8a:	f000 fb79 	bl	8001380 <setTimer3>
  setTimer4(1000);
 8000c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c92:	f000 fb8f 	bl	80013b4 <setTimer4>
  setTimer5(1000);
 8000c96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9a:	f000 fba5 	bl	80013e8 <setTimer5>
  SCH_Init();
 8000c9e:	f000 fa3f 	bl	8001120 <SCH_Init>
  SCH_Add_Task(timerRun, 0, 10);
 8000ca2:	220a      	movs	r2, #10
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4824      	ldr	r0, [pc, #144]	; (8000d38 <main+0xf4>)
 8000ca8:	f000 fa46 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 10);
 8000cac:	220a      	movs	r2, #10
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4822      	ldr	r0, [pc, #136]	; (8000d3c <main+0xf8>)
 8000cb2:	f000 fa41 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(fsm_mode_run, 0 , 10);
 8000cb6:	220a      	movs	r2, #10
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4821      	ldr	r0, [pc, #132]	; (8000d40 <main+0xfc>)
 8000cbc:	f000 fa3c 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_1_run, 0 , 10);
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	481f      	ldr	r0, [pc, #124]	; (8000d44 <main+0x100>)
 8000cc6:	f000 fa37 	bl	8001138 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_2_run, 0 , 10);
 8000cca:	220a      	movs	r2, #10
 8000ccc:	2100      	movs	r1, #0
 8000cce:	481e      	ldr	r0, [pc, #120]	; (8000d48 <main+0x104>)
 8000cd0:	f000 fa32 	bl	8001138 <SCH_Add_Task>
 // SCH_Add_Task(fsm_mode_led7seg, 0, 10);
  SCH_Add_Task(pedestrian_cramble, 0, 10);
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	481c      	ldr	r0, [pc, #112]	; (8000d4c <main+0x108>)
 8000cda:	f000 fa2d 	bl	8001138 <SCH_Add_Task>
  while (1)
  {
//	  fsm_mode_run();
//	  fsm_automatic_1_run();
//	  fsm_automatic_2_run();
	  if (timer5_flag == 1){
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <main+0x10c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d111      	bne.n	8000d0a <main+0xc6>
		 HAL_UART_Transmit(&huart2, str, sprintf(str, "%s","Hello\r\n"), 1000);
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4a1a      	ldr	r2, [pc, #104]	; (8000d54 <main+0x110>)
 8000cea:	491b      	ldr	r1, [pc, #108]	; (8000d58 <main+0x114>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fe9f 	bl	8003a30 <siprintf>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	1d39      	adds	r1, r7, #4
 8000cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfc:	4817      	ldr	r0, [pc, #92]	; (8000d5c <main+0x118>)
 8000cfe:	f002 fcfa 	bl	80036f6 <HAL_UART_Transmit>
		 setTimer5(2000);
 8000d02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d06:	f000 fb6f 	bl	80013e8 <setTimer5>
	  }
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,10);
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <main+0xec>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	220a      	movs	r2, #10
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d16:	f000 fe2b 	bl	8001970 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,100);
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <main+0xec>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2264      	movs	r2, #100	; 0x64
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d26:	f000 fe23 	bl	8001970 <HAL_Delay>
	  if (timer5_flag == 1){
 8000d2a:	e7d8      	b.n	8000cde <main+0x9a>
 8000d2c:	20000188 	.word	0x20000188
 8000d30:	20000140 	.word	0x20000140
 8000d34:	200000b0 	.word	0x200000b0
 8000d38:	08001451 	.word	0x08001451
 8000d3c:	080008a1 	.word	0x080008a1
 8000d40:	0800043d 	.word	0x0800043d
 8000d44:	0800014d 	.word	0x0800014d
 8000d48:	080002c5 	.word	0x080002c5
 8000d4c:	080010a5 	.word	0x080010a5
 8000d50:	20000110 	.word	0x20000110
 8000d54:	080042bc 	.word	0x080042bc
 8000d58:	080042c4 	.word	0x080042c4
 8000d5c:	200001d0 	.word	0x200001d0

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b090      	sub	sp, #64	; 0x40
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	2228      	movs	r2, #40	; 0x28
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fe56 	bl	8003a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d92:	2300      	movs	r3, #0
 8000d94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d96:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 f8e3 	bl	8001f6c <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000dac:	f000 f974 	bl	8001098 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db0:	230f      	movs	r3, #15
 8000db2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2302      	movs	r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2102      	movs	r1, #2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 fb4e 	bl	800246c <HAL_RCC_ClockConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000dd6:	f000 f95f 	bl	8001098 <Error_Handler>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3740      	adds	r7, #64	; 0x40
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_TIM2_Init+0x94>)
 8000e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_TIM2_Init+0x94>)
 8000e0a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000e0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_TIM2_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_TIM2_Init+0x94>)
 8000e18:	2209      	movs	r2, #9
 8000e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_TIM2_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_TIM2_Init+0x94>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e28:	4813      	ldr	r0, [pc, #76]	; (8000e78 <MX_TIM2_Init+0x94>)
 8000e2a:	f001 fcb9 	bl	80027a0 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e34:	f000 f930 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	4619      	mov	r1, r3
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <MX_TIM2_Init+0x94>)
 8000e46:	f002 f80d 	bl	8002e64 <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e50:	f000 f922 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_TIM2_Init+0x94>)
 8000e62:	f002 fb8b 	bl	800357c <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e6c:	f000 f914 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000188 	.word	0x20000188

08000e7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	; 0x38
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	615a      	str	r2, [r3, #20]
 8000eaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000eae:	4a2d      	ldr	r2, [pc, #180]	; (8000f64 <MX_TIM3_Init+0xe8>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000eb4:	223f      	movs	r2, #63	; 0x3f
 8000eb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000ec0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ed2:	4823      	ldr	r0, [pc, #140]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000ed4:	f001 fc64 	bl	80027a0 <HAL_TIM_Base_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ede:	f000 f8db 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ee8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eec:	4619      	mov	r1, r3
 8000eee:	481c      	ldr	r0, [pc, #112]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000ef0:	f001 ffb8 	bl	8002e64 <HAL_TIM_ConfigClockSource>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000efa:	f000 f8cd 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000efe:	4818      	ldr	r0, [pc, #96]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000f00:	f001 fcf0 	bl	80028e4 <HAL_TIM_PWM_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f0a:	f000 f8c5 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4810      	ldr	r0, [pc, #64]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000f1e:	f002 fb2d 	bl	800357c <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f28:	f000 f8b6 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2c:	2360      	movs	r3, #96	; 0x60
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4619      	mov	r1, r3
 8000f42:	4807      	ldr	r0, [pc, #28]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000f44:	f001 fed0 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f4e:	f000 f8a3 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000f54:	f000 fb80 	bl	8001658 <HAL_TIM_MspPostInit>

}
 8000f58:	bf00      	nop
 8000f5a:	3738      	adds	r7, #56	; 0x38
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000140 	.word	0x20000140
 8000f64:	40000400 	.word	0x40000400

08000f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <MX_USART2_UART_Init+0x50>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_USART2_UART_Init+0x4c>)
 8000f74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_USART2_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_USART2_UART_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_USART2_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	f002 fb5c 	bl	800365c <HAL_UART_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000faa:	f000 f875 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001d0 	.word	0x200001d0
 8000fb8:	40004400 	.word	0x40004400

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a2d      	ldr	r2, [pc, #180]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <MX_GPIO_Init+0xd0>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_LIGHT_A_Pin|LIGHT1_B_Pin|LIGHT2_B_Pin|LIGHT2_A_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001006:	4822      	ldr	r0, [pc, #136]	; (8001090 <MX_GPIO_Init+0xd4>)
 8001008:	f000 ff7f 	bl	8001f0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P_LIGHT_B_Pin|LIGHT1_A_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001012:	4820      	ldr	r0, [pc, #128]	; (8001094 <MX_GPIO_Init+0xd8>)
 8001014:	f000 ff79 	bl	8001f0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_P_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_P_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8001018:	2313      	movs	r3, #19
 800101a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4619      	mov	r1, r3
 800102a:	481a      	ldr	r0, [pc, #104]	; (8001094 <MX_GPIO_Init+0xd8>)
 800102c:	f000 fdd2 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 8001030:	2301      	movs	r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	4619      	mov	r1, r3
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_GPIO_Init+0xd4>)
 8001044:	f000 fdc6 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LIGHT_A_Pin LIGHT1_B_Pin LIGHT2_B_Pin LIGHT2_A_Pin */
  GPIO_InitStruct.Pin = P_LIGHT_A_Pin|LIGHT1_B_Pin|LIGHT2_B_Pin|LIGHT2_A_Pin;
 8001048:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800104c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2302      	movs	r3, #2
 8001058:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4619      	mov	r1, r3
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <MX_GPIO_Init+0xd4>)
 8001062:	f000 fdb7 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_LIGHT_B_Pin LIGHT1_A_Pin */
  GPIO_InitStruct.Pin = P_LIGHT_B_Pin|LIGHT1_A_Pin;
 8001066:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800106a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2302      	movs	r3, #2
 8001076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_GPIO_Init+0xd8>)
 8001080:	f000 fda8 	bl	8001bd4 <HAL_GPIO_Init>

}
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40010800 	.word	0x40010800

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <pedestrian_cramble>:
#include "main.h"

// 0-1 Green
int counter_Pedes_On = 0;

void pedestrian_cramble(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	if (isButtonflag(butp)){
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <pedestrian_cramble+0x6c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff faf5 	bl	800069c <isButtonflag>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d028      	beq.n	800110a <pedestrian_cramble+0x66>
		 counter_Pedes_On = 3 * Ncycle_Pe_off;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <pedestrian_cramble+0x70>)
 80010ba:	2206      	movs	r2, #6
 80010bc:	601a      	str	r2, [r3, #0]
//			default:
//				break;
//			}
//		}
		while(1){
			if (timer1_flag == 1){
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <pedestrian_cramble+0x74>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d11a      	bne.n	80010fc <pedestrian_cramble+0x58>
				switch (status_ver){
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <pedestrian_cramble+0x78>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d00e      	beq.n	80010ec <pedestrian_cramble+0x48>
 80010ce:	2b0a      	cmp	r3, #10
 80010d0:	dc0e      	bgt.n	80010f0 <pedestrian_cramble+0x4c>
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d002      	beq.n	80010dc <pedestrian_cramble+0x38>
 80010d6:	2b09      	cmp	r3, #9
 80010d8:	d003      	beq.n	80010e2 <pedestrian_cramble+0x3e>
					Buzzer_On();
					break;
				case AUTO_YELLOW:
					SetPedesRed();
				default:
					break;
 80010da:	e009      	b.n	80010f0 <pedestrian_cramble+0x4c>
					SetPedesGreen();
 80010dc:	f7ff fcd8 	bl	8000a90 <SetPedesGreen>
					break;
 80010e0:	e007      	b.n	80010f2 <pedestrian_cramble+0x4e>
					SetPedesRed();
 80010e2:	f7ff fcc1 	bl	8000a68 <SetPedesRed>
					Buzzer_On();
 80010e6:	f7ff fd77 	bl	8000bd8 <Buzzer_On>
					break;
 80010ea:	e002      	b.n	80010f2 <pedestrian_cramble+0x4e>
					SetPedesRed();
 80010ec:	f7ff fcbc 	bl	8000a68 <SetPedesRed>
					break;
 80010f0:	bf00      	nop
				}
				counter_Pedes_On--;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <pedestrian_cramble+0x70>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <pedestrian_cramble+0x70>)
 80010fa:	6013      	str	r3, [r2, #0]
			}
			if (counter_Pedes_On < 0){
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <pedestrian_cramble+0x70>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dadc      	bge.n	80010be <pedestrian_cramble+0x1a>
				SetPedesOff();
 8001104:	f7ff fcd8 	bl	8000ab8 <SetPedesOff>
			if (timer1_flag == 1){
 8001108:	e7d9      	b.n	80010be <pedestrian_cramble+0x1a>
//		} else if (status_ver == AUTO_RED) {
//			SetPedesGreen();
//		}

	}
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	200000f4 	.word	0x200000f4
 8001118:	20000100 	.word	0x20000100
 800111c:	200000b4 	.word	0x200000b4

08001120 <SCH_Init>:
 */
#include "scheduler.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <SCH_Init+0x14>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200000f8 	.word	0x200000f8

08001138 <SCH_Add_Task>:

//int Tick = 10; // 10ms

void SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <SCH_Add_Task+0xb4>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b27      	cmp	r3, #39	; 0x27
 800114a:	d84a      	bhi.n	80011e2 <SCH_Add_Task+0xaa>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <SCH_Add_Task+0xb4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <SCH_Add_Task+0xb8>)
 8001154:	460b      	mov	r3, r1
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TICK;
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <SCH_Add_Task+0xb4>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <SCH_Add_Task+0xbc>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	491f      	ldr	r1, [pc, #124]	; (80011f0 <SCH_Add_Task+0xb8>)
 8001174:	4603      	mov	r3, r0
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4403      	add	r3, r0
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3304      	adds	r3, #4
 8001180:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD/TICK;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <SCH_Add_Task+0xb4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <SCH_Add_Task+0xbc>)
 800118c:	fba2 2303 	umull	r2, r3, r2, r3
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	4917      	ldr	r1, [pc, #92]	; (80011f0 <SCH_Add_Task+0xb8>)
 8001194:	4603      	mov	r3, r0
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4403      	add	r3, r0
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	3308      	adds	r3, #8
 80011a0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <SCH_Add_Task+0xb4>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <SCH_Add_Task+0xb8>)
 80011aa:	460b      	mov	r3, r1
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	330c      	adds	r3, #12
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <SCH_Add_Task+0xb4>)
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <SCH_Add_Task+0xb4>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SCH_Add_Task+0xb8>)
 80011c8:	460b      	mov	r3, r1
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	3310      	adds	r3, #16
 80011d4:	6018      	str	r0, [r3, #0]


		current_index_task++;
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SCH_Add_Task+0xb4>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b03      	ldr	r3, [pc, #12]	; (80011ec <SCH_Add_Task+0xb4>)
 80011e0:	701a      	strb	r2, [r3, #0]
	}
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	200000f8 	.word	0x200000f8
 80011f0:	20000214 	.word	0x20000214
 80011f4:	cccccccd 	.word	0xcccccccd

080011f8 <SCH_Update>:

void SCH_Update(void){
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < current_index_task; i++){
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	e048      	b.n	8001296 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0 ){
 8001204:	492a      	ldr	r1, [pc, #168]	; (80012b0 <SCH_Update+0xb8>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	3304      	adds	r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d013      	beq.n	8001242 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 800121a:	4925      	ldr	r1, [pc, #148]	; (80012b0 <SCH_Update+0xb8>)
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	3304      	adds	r3, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	1e59      	subs	r1, r3, #1
 800122e:	4820      	ldr	r0, [pc, #128]	; (80012b0 <SCH_Update+0xb8>)
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4403      	add	r3, r0
 800123c:	3304      	adds	r3, #4
 800123e:	6019      	str	r1, [r3, #0]
 8001240:	e026      	b.n	8001290 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay =SCH_tasks_G[i].Period;
 8001242:	491b      	ldr	r1, [pc, #108]	; (80012b0 <SCH_Update+0xb8>)
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	3308      	adds	r3, #8
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	4816      	ldr	r0, [pc, #88]	; (80012b0 <SCH_Update+0xb8>)
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4403      	add	r3, r0
 8001262:	3304      	adds	r3, #4
 8001264:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8001266:	4912      	ldr	r1, [pc, #72]	; (80012b0 <SCH_Update+0xb8>)
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	330c      	adds	r3, #12
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	b2d8      	uxtb	r0, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <SCH_Update+0xb8>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	330c      	adds	r3, #12
 800128c:	4602      	mov	r2, r0
 800128e:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < current_index_task; i++){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <SCH_Update+0xbc>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4293      	cmp	r3, r2
 80012a0:	dbb0      	blt.n	8001204 <SCH_Update+0xc>
		}
	}
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000214 	.word	0x20000214
 80012b4:	200000f8 	.word	0x200000f8

080012b8 <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <clearTimer1+0x18>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <clearTimer1+0x1c>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	2000011c 	.word	0x2000011c
 80012d4:	20000100 	.word	0x20000100

080012d8 <clearTimer2>:
void clearTimer2(){
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <clearTimer2+0x18>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <clearTimer2+0x1c>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000120 	.word	0x20000120
 80012f4:	20000104 	.word	0x20000104

080012f8 <clearTimer3>:
void clearTimer3(){
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <clearTimer3+0x18>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <clearTimer3+0x1c>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000124 	.word	0x20000124
 8001314:	20000108 	.word	0x20000108

08001318 <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <setTimer1+0x28>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	fb92 f3f3 	sdiv	r3, r2, r3
 800132a:	4a06      	ldr	r2, [pc, #24]	; (8001344 <setTimer1+0x2c>)
 800132c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <setTimer1+0x30>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000020 	.word	0x20000020
 8001344:	2000011c 	.word	0x2000011c
 8001348:	20000100 	.word	0x20000100

0800134c <setTimer2>:

void setTimer2( int duration){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <setTimer2+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	fb92 f3f3 	sdiv	r3, r2, r3
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <setTimer2+0x2c>)
 8001360:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <setTimer2+0x30>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000020 	.word	0x20000020
 8001378:	20000120 	.word	0x20000120
 800137c:	20000104 	.word	0x20000104

08001380 <setTimer3>:

void setTimer3( int duration){
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <setTimer3+0x28>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001392:	4a06      	ldr	r2, [pc, #24]	; (80013ac <setTimer3+0x2c>)
 8001394:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <setTimer3+0x30>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000020 	.word	0x20000020
 80013ac:	20000124 	.word	0x20000124
 80013b0:	20000108 	.word	0x20000108

080013b4 <setTimer4>:

void setTimer4( int duration){
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <setTimer4+0x28>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c6:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <setTimer4+0x2c>)
 80013c8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <setTimer4+0x30>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000020 	.word	0x20000020
 80013e0:	20000128 	.word	0x20000128
 80013e4:	2000010c 	.word	0x2000010c

080013e8 <setTimer5>:

void setTimer5( int duration){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <setTimer5+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013fa:	4a06      	ldr	r2, [pc, #24]	; (8001414 <setTimer5+0x2c>)
 80013fc:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <setTimer5+0x30>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000020 	.word	0x20000020
 8001414:	2000012c 	.word	0x2000012c
 8001418:	20000110 	.word	0x20000110

0800141c <setTimer6>:
void setTimer6( int duration){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <setTimer6+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	fb92 f3f3 	sdiv	r3, r2, r3
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <setTimer6+0x2c>)
 8001430:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <setTimer6+0x30>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000020 	.word	0x20000020
 8001448:	20000130 	.word	0x20000130
 800144c:	20000114 	.word	0x20000114

08001450 <timerRun>:

void timerRun (){
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 8001454:	4b39      	ldr	r3, [pc, #228]	; (800153c <timerRun+0xec>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	dd0b      	ble.n	8001474 <timerRun+0x24>
		timer0_counter --;
 800145c:	4b37      	ldr	r3, [pc, #220]	; (800153c <timerRun+0xec>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	4a36      	ldr	r2, [pc, #216]	; (800153c <timerRun+0xec>)
 8001464:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <timerRun+0xec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dc02      	bgt.n	8001474 <timerRun+0x24>
			timer0_flag = 1;
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <timerRun+0xf0>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8001474:	4b33      	ldr	r3, [pc, #204]	; (8001544 <timerRun+0xf4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	dd0b      	ble.n	8001494 <timerRun+0x44>
		timer1_counter--;
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <timerRun+0xf4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	4a30      	ldr	r2, [pc, #192]	; (8001544 <timerRun+0xf4>)
 8001484:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <timerRun+0xf4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	dc02      	bgt.n	8001494 <timerRun+0x44>
			timer1_flag = 1;
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <timerRun+0xf8>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <timerRun+0xfc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	dd0b      	ble.n	80014b4 <timerRun+0x64>
		timer2_counter--;
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <timerRun+0xfc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4a2a      	ldr	r2, [pc, #168]	; (800154c <timerRun+0xfc>)
 80014a4:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <timerRun+0xfc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc02      	bgt.n	80014b4 <timerRun+0x64>
			timer2_flag = 1;
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <timerRun+0x100>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <timerRun+0x104>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	dd0b      	ble.n	80014d4 <timerRun+0x84>
		timer3_counter--;
 80014bc:	4b25      	ldr	r3, [pc, #148]	; (8001554 <timerRun+0x104>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <timerRun+0x104>)
 80014c4:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <timerRun+0x104>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dc02      	bgt.n	80014d4 <timerRun+0x84>
			timer3_flag = 1;
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <timerRun+0x108>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <timerRun+0x10c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dd0b      	ble.n	80014f4 <timerRun+0xa4>
		timer4_counter--;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <timerRun+0x10c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	4a1e      	ldr	r2, [pc, #120]	; (800155c <timerRun+0x10c>)
 80014e4:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <timerRun+0x10c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	dc02      	bgt.n	80014f4 <timerRun+0xa4>
			timer4_flag = 1;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <timerRun+0x110>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <timerRun+0x114>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	dd0b      	ble.n	8001514 <timerRun+0xc4>
			timer5_counter--;
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <timerRun+0x114>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	4a18      	ldr	r2, [pc, #96]	; (8001564 <timerRun+0x114>)
 8001504:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <timerRun+0x114>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	dc02      	bgt.n	8001514 <timerRun+0xc4>
				timer5_flag = 1;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <timerRun+0x118>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <timerRun+0x11c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	dd0b      	ble.n	8001534 <timerRun+0xe4>
			timer6_counter--;
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <timerRun+0x11c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <timerRun+0x11c>)
 8001524:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <timerRun+0x11c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	dc02      	bgt.n	8001534 <timerRun+0xe4>
				timer6_flag = 1;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <timerRun+0x120>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000118 	.word	0x20000118
 8001540:	200000fc 	.word	0x200000fc
 8001544:	2000011c 	.word	0x2000011c
 8001548:	20000100 	.word	0x20000100
 800154c:	20000120 	.word	0x20000120
 8001550:	20000104 	.word	0x20000104
 8001554:	20000124 	.word	0x20000124
 8001558:	20000108 	.word	0x20000108
 800155c:	20000128 	.word	0x20000128
 8001560:	2000010c 	.word	0x2000010c
 8001564:	2000012c 	.word	0x2000012c
 8001568:	20000110 	.word	0x20000110
 800156c:	20000130 	.word	0x20000130
 8001570:	20000114 	.word	0x20000114

08001574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_MspInit+0x5c>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_MspInit+0x5c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6193      	str	r3, [r2, #24]
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_MspInit+0x5c>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_MspInit+0x5c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_MspInit+0x5c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_MspInit+0x5c>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_MspInit+0x60>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_MspInit+0x60>)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000

080015d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e8:	d114      	bne.n	8001614 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201c      	movs	r0, #28
 8001608:	f000 faad 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800160c:	201c      	movs	r0, #28
 800160e:	f000 fac6 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001612:	e018      	b.n	8001646 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_TIM_Base_MspInit+0x7c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d113      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	201d      	movs	r0, #29
 800163c:	f000 fa93 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001640:	201d      	movs	r0, #29
 8001642:	f000 faac 	bl	8001b9e <HAL_NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40000400 	.word	0x40000400

08001658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <HAL_TIM_MspPostInit+0x58>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d117      	bne.n	80016a8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_TIM_MspPostInit+0x5c>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_TIM_MspPostInit+0x5c>)
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_TIM_MspPostInit+0x5c>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001690:	2340      	movs	r3, #64	; 0x40
 8001692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2302      	movs	r3, #2
 800169a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_TIM_MspPostInit+0x60>)
 80016a4:	f000 fa96 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010800 	.word	0x40010800

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <HAL_UART_MspInit+0x88>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d12f      	bne.n	800173c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_UART_MspInit+0x8c>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_UART_MspInit+0x8c>)
 80016e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e6:	61d3      	str	r3, [r2, #28]
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_UART_MspInit+0x8c>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_UART_MspInit+0x8c>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <HAL_UART_MspInit+0x8c>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_UART_MspInit+0x8c>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800170c:	2304      	movs	r3, #4
 800170e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	480b      	ldr	r0, [pc, #44]	; (800174c <HAL_UART_MspInit+0x90>)
 8001720:	f000 fa58 	bl	8001bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001724:	2308      	movs	r3, #8
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_UART_MspInit+0x90>)
 8001738:	f000 fa4c 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40004400 	.word	0x40004400
 8001748:	40021000 	.word	0x40021000
 800174c:	40010800 	.word	0x40010800

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001796:	f000 f8cf 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <TIM2_IRQHandler+0x10>)
 80017a6:	f001 f997 	bl	8002ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000188 	.word	0x20000188

080017b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM3_IRQHandler+0x10>)
 80017ba:	f001 f98d 	bl	8002ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000140 	.word	0x20000140

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f002 f8e8 	bl	80039cc <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20005000 	.word	0x20005000
 8001828:	00000400 	.word	0x00000400
 800182c:	20000134 	.word	0x20000134
 8001830:	20000548 	.word	0x20000548

08001834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"
#include "scheduler.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001850:	d101      	bne.n	8001856 <HAL_TIM_PeriodElapsedCallback+0x16>
//		button_reading();
//		timerRun();
		//getKeyInput();
		SCH_Update();
 8001852:	f7ff fcd1 	bl	80011f8 <SCH_Update>
	}
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	; (80018a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001886:	f7ff ffd5 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f002 f8a5 	bl	80039d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188e:	f7ff f9d9 	bl	8000c44 <main>
  bx lr
 8001892:	4770      	bx	lr
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800189c:	0800432c 	.word	0x0800432c
  ldr r2, =_sbss
 80018a0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80018a4:	20000548 	.word	0x20000548

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x28>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x28>)
 80018b6:	f043 0310 	orr.w	r3, r3, #16
 80018ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f947 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fe54 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f95f 	bl	8001bba <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f927 	bl	8001b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000024 	.word	0x20000024
 8001930:	2000002c 	.word	0x2000002c
 8001934:	20000028 	.word	0x20000028

08001938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_IncTick+0x1c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_IncTick+0x20>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a03      	ldr	r2, [pc, #12]	; (8001958 <HAL_IncTick+0x20>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	2000002c 	.word	0x2000002c
 8001958:	20000534 	.word	0x20000534

0800195c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <HAL_GetTick+0x10>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20000534 	.word	0x20000534

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff fff0 	bl	800195c <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffe0 	bl	800195c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000002c 	.word	0x2000002c

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4906      	ldr	r1, [pc, #24]	; (8001a50 <__NVIC_EnableIRQ+0x34>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ff90 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff2d 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff42 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff90 	bl	8001aa8 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5f 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff35 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffa2 	bl	8001b0c <SysTick_Config>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b08b      	sub	sp, #44	; 0x2c
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be6:	e169      	b.n	8001ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001be8:	2201      	movs	r2, #1
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f040 8158 	bne.w	8001eb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4a9a      	ldr	r2, [pc, #616]	; (8001e74 <HAL_GPIO_Init+0x2a0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d05e      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c10:	4a98      	ldr	r2, [pc, #608]	; (8001e74 <HAL_GPIO_Init+0x2a0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d875      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c16:	4a98      	ldr	r2, [pc, #608]	; (8001e78 <HAL_GPIO_Init+0x2a4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d058      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c1c:	4a96      	ldr	r2, [pc, #600]	; (8001e78 <HAL_GPIO_Init+0x2a4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d86f      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c22:	4a96      	ldr	r2, [pc, #600]	; (8001e7c <HAL_GPIO_Init+0x2a8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d052      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c28:	4a94      	ldr	r2, [pc, #592]	; (8001e7c <HAL_GPIO_Init+0x2a8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d869      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a94      	ldr	r2, [pc, #592]	; (8001e80 <HAL_GPIO_Init+0x2ac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d04c      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c34:	4a92      	ldr	r2, [pc, #584]	; (8001e80 <HAL_GPIO_Init+0x2ac>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d863      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c3a:	4a92      	ldr	r2, [pc, #584]	; (8001e84 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d046      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c40:	4a90      	ldr	r2, [pc, #576]	; (8001e84 <HAL_GPIO_Init+0x2b0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d85d      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c46:	2b12      	cmp	r3, #18
 8001c48:	d82a      	bhi.n	8001ca0 <HAL_GPIO_Init+0xcc>
 8001c4a:	2b12      	cmp	r3, #18
 8001c4c:	d859      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c4e:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <HAL_GPIO_Init+0x80>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001ccf 	.word	0x08001ccf
 8001c58:	08001ca9 	.word	0x08001ca9
 8001c5c:	08001cbb 	.word	0x08001cbb
 8001c60:	08001cfd 	.word	0x08001cfd
 8001c64:	08001d03 	.word	0x08001d03
 8001c68:	08001d03 	.word	0x08001d03
 8001c6c:	08001d03 	.word	0x08001d03
 8001c70:	08001d03 	.word	0x08001d03
 8001c74:	08001d03 	.word	0x08001d03
 8001c78:	08001d03 	.word	0x08001d03
 8001c7c:	08001d03 	.word	0x08001d03
 8001c80:	08001d03 	.word	0x08001d03
 8001c84:	08001d03 	.word	0x08001d03
 8001c88:	08001d03 	.word	0x08001d03
 8001c8c:	08001d03 	.word	0x08001d03
 8001c90:	08001d03 	.word	0x08001d03
 8001c94:	08001d03 	.word	0x08001d03
 8001c98:	08001cb1 	.word	0x08001cb1
 8001c9c:	08001cc5 	.word	0x08001cc5
 8001ca0:	4a79      	ldr	r2, [pc, #484]	; (8001e88 <HAL_GPIO_Init+0x2b4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ca6:	e02c      	b.n	8001d02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e029      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e024      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e01f      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	330c      	adds	r3, #12
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e01a      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e013      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	611a      	str	r2, [r3, #16]
          break;
 8001cee:	e009      	b.n	8001d04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	615a      	str	r2, [r3, #20]
          break;
 8001cfa:	e003      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
          break;
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          break;
 8001d02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2bff      	cmp	r3, #255	; 0xff
 8001d08:	d801      	bhi.n	8001d0e <HAL_GPIO_Init+0x13a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_Init+0x13e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3304      	adds	r3, #4
 8001d12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2bff      	cmp	r3, #255	; 0xff
 8001d18:	d802      	bhi.n	8001d20 <HAL_GPIO_Init+0x14c>
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x152>
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	3b08      	subs	r3, #8
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	210f      	movs	r1, #15
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	401a      	ands	r2, r3
 8001d38:	6a39      	ldr	r1, [r7, #32]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	431a      	orrs	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80b1 	beq.w	8001eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d54:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_GPIO_Init+0x2b8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x2b8>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_GPIO_Init+0x2b8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d6c:	4a48      	ldr	r2, [pc, #288]	; (8001e90 <HAL_GPIO_Init+0x2bc>)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a40      	ldr	r2, [pc, #256]	; (8001e94 <HAL_GPIO_Init+0x2c0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <HAL_GPIO_Init+0x1ec>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3f      	ldr	r2, [pc, #252]	; (8001e98 <HAL_GPIO_Init+0x2c4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00d      	beq.n	8001dbc <HAL_GPIO_Init+0x1e8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <HAL_GPIO_Init+0x2c8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <HAL_GPIO_Init+0x1e4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3d      	ldr	r2, [pc, #244]	; (8001ea0 <HAL_GPIO_Init+0x2cc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d101      	bne.n	8001db4 <HAL_GPIO_Init+0x1e0>
 8001db0:	2303      	movs	r3, #3
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e004      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dd2:	492f      	ldr	r1, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x2bc>)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	492c      	ldr	r1, [pc, #176]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4928      	ldr	r1, [pc, #160]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4922      	ldr	r1, [pc, #136]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	491e      	ldr	r1, [pc, #120]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4918      	ldr	r1, [pc, #96]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4914      	ldr	r1, [pc, #80]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d021      	beq.n	8001ea8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60cb      	str	r3, [r1, #12]
 8001e70:	e021      	b.n	8001eb6 <HAL_GPIO_Init+0x2e2>
 8001e72:	bf00      	nop
 8001e74:	10320000 	.word	0x10320000
 8001e78:	10310000 	.word	0x10310000
 8001e7c:	10220000 	.word	0x10220000
 8001e80:	10210000 	.word	0x10210000
 8001e84:	10120000 	.word	0x10120000
 8001e88:	10110000 	.word	0x10110000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40010800 	.word	0x40010800
 8001e98:	40010c00 	.word	0x40010c00
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	40011400 	.word	0x40011400
 8001ea4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	4909      	ldr	r1, [pc, #36]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	3301      	adds	r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f47f ae8e 	bne.w	8001be8 <HAL_GPIO_Init+0x14>
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	372c      	adds	r7, #44	; 0x2c
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e001      	b.n	8001efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	807b      	strh	r3, [r7, #2]
 8001f16:	4613      	mov	r3, r2
 8001f18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f1a:	787b      	ldrb	r3, [r7, #1]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f26:	e003      	b.n	8001f30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	041a      	lsls	r2, r3, #16
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f4c:	887a      	ldrh	r2, [r7, #2]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	041a      	lsls	r2, r3, #16
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e26c      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f8c:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d00c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f98:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d112      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06c      	beq.n	8002098 <HAL_RCC_OscConfig+0x12c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d168      	bne.n	8002098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e246      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x76>
 8001fd4:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a7f      	ldr	r2, [pc, #508]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e02e      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0xbc>
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fc88 	bl	800195c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff fc84 	bl	800195c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1fa      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xe4>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fc74 	bl	800195c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff fc70 	bl	800195c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1e6      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x10c>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020b2:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
 80020be:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1ba      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4939      	ldr	r1, [pc, #228]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e03a      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fc29 	bl	800195c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7ff fc25 	bl	800195c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e19b      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4927      	ldr	r1, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fc08 	bl	800195c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff fc04 	bl	800195c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e17a      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d03a      	beq.n	80021f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d019      	beq.n	80021b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7ff fbe8 	bl	800195c <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7ff fbe4 	bl	800195c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e15a      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 fad8 	bl	8002764 <RCC_Delay>
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7ff fbce 	bl	800195c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c2:	e00f      	b.n	80021e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7ff fbca 	bl	800195c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d908      	bls.n	80021e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e140      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	42420000 	.word	0x42420000
 80021e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b9e      	ldr	r3, [pc, #632]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e9      	bne.n	80021c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a6 	beq.w	800234a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b97      	ldr	r3, [pc, #604]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b94      	ldr	r3, [pc, #592]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a93      	ldr	r2, [pc, #588]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b91      	ldr	r3, [pc, #580]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a8a      	ldr	r2, [pc, #552]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7ff fb8b 	bl	800195c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7ff fb87 	bl	800195c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	; 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0fd      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x312>
 8002270:	4b7b      	ldr	r3, [pc, #492]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a7a      	ldr	r2, [pc, #488]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e02d      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x334>
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a75      	ldr	r2, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a72      	ldr	r2, [pc, #456]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	e01c      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x356>
 80022a8:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a69      	ldr	r2, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e00b      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022c2:	4b67      	ldr	r3, [pc, #412]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a66      	ldr	r2, [pc, #408]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b64      	ldr	r3, [pc, #400]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a63      	ldr	r2, [pc, #396]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d015      	beq.n	800230e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fb3b 	bl	800195c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7ff fb37 	bl	800195c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0ab      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ee      	beq.n	80022ea <HAL_RCC_OscConfig+0x37e>
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7ff fb25 	bl	800195c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff fb21 	bl	800195c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e095      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ee      	bne.n	8002316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a47      	ldr	r2, [pc, #284]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8081 	beq.w	8002456 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002354:	4b42      	ldr	r3, [pc, #264]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d061      	beq.n	8002424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d146      	bne.n	80023f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002368:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff faf5 	bl	800195c <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7ff faf1 	bl	800195c <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e067      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	492d      	ldr	r1, [pc, #180]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a19      	ldr	r1, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	430b      	orrs	r3, r1
 80023c2:	4927      	ldr	r1, [pc, #156]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fac5 	bl	800195c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff fac1 	bl	800195c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e037      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46a>
 80023f4:	e02f      	b.n	8002456 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7ff faae 	bl	800195c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7ff faaa 	bl	800195c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e020      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x498>
 8002422:	e018      	b.n	8002456 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e013      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	42420060 	.word	0x42420060

0800246c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0d0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4965      	ldr	r1, [pc, #404]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d040      	beq.n	800258c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e073      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4936      	ldr	r1, [pc, #216]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7ff f9fe 	bl	800195c <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7ff f9fa 	bl	800195c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e053      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d210      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4922      	ldr	r1, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1cc>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f95c 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	080042d8 	.word	0x080042d8
 8002638:	20000024 	.word	0x20000024
 800263c:	20000028 	.word	0x20000028

08002640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b490      	push	{r4, r7}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002648:	1d3c      	adds	r4, r7, #4
 800264a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002650:	f240 2301 	movw	r3, #513	; 0x201
 8002654:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d002      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x40>
 800267a:	2b08      	cmp	r3, #8
 800267c:	d003      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x46>
 800267e:	e02d      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002682:	623b      	str	r3, [r7, #32]
      break;
 8002684:	e02d      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	0c9b      	lsrs	r3, r3, #18
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002692:	4413      	add	r3, r2
 8002694:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002698:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	0c5b      	lsrs	r3, r3, #17
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026b2:	4413      	add	r3, r2
 80026b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026be:	fb02 f203 	mul.w	r2, r2, r3
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	e004      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	623b      	str	r3, [r7, #32]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026de:	623b      	str	r3, [r7, #32]
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc90      	pop	{r4, r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	080042c8 	.word	0x080042c8
 80026f4:	40021000 	.word	0x40021000
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	003d0900 	.word	0x003d0900

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <HAL_RCC_GetHCLKFreq+0x10>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	20000024 	.word	0x20000024

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002718:	f7ff fff2 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	080042e8 	.word	0x080042e8

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002740:	f7ff ffde 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0adb      	lsrs	r3, r3, #11
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	080042e8 	.word	0x080042e8

08002764 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <RCC_Delay+0x34>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <RCC_Delay+0x38>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a5b      	lsrs	r3, r3, #9
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002780:	bf00      	nop
  }
  while (Delay --);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	60fa      	str	r2, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f9      	bne.n	8002780 <RCC_Delay+0x1c>
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000024 	.word	0x20000024
 800279c:	10624dd3 	.word	0x10624dd3

080027a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e041      	b.n	8002836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe ff06 	bl	80015d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 fc28 	bl	8003034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d001      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e03a      	b.n	80028ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00e      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002882:	d009      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_TIM_Base_Start_IT+0x9c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d010      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ba:	e007      	b.n	80028cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800

080028e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e041      	b.n	800297a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f839 	bl	8002982 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 fb86 	bl	8003034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_TIM_PWM_Start+0x24>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	bf14      	ite	ne
 80029b0:	2301      	movne	r3, #1
 80029b2:	2300      	moveq	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e022      	b.n	80029fe <HAL_TIM_PWM_Start+0x6a>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d109      	bne.n	80029d2 <HAL_TIM_PWM_Start+0x3e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	e015      	b.n	80029fe <HAL_TIM_PWM_Start+0x6a>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d109      	bne.n	80029ec <HAL_TIM_PWM_Start+0x58>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e008      	b.n	80029fe <HAL_TIM_PWM_Start+0x6a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e05e      	b.n	8002ac4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_PWM_Start+0x82>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a14:	e013      	b.n	8002a3e <HAL_TIM_PWM_Start+0xaa>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_PWM_Start+0x92>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	e00b      	b.n	8002a3e <HAL_TIM_PWM_Start+0xaa>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_PWM_Start+0xa2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a34:	e003      	b.n	8002a3e <HAL_TIM_PWM_Start+0xaa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2201      	movs	r2, #1
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fd74 	bl	8003534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_TIM_PWM_Start+0x138>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d107      	bne.n	8002a66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <HAL_TIM_PWM_Start+0x138>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <HAL_TIM_PWM_Start+0xfa>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d009      	beq.n	8002a8e <HAL_TIM_PWM_Start+0xfa>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_TIM_PWM_Start+0x13c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_TIM_PWM_Start+0xfa>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <HAL_TIM_PWM_Start+0x140>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d111      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b06      	cmp	r3, #6
 8002a9e:	d010      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab0:	e007      	b.n	8002ac2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40000800 	.word	0x40000800

08002ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d122      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d11b      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0202 	mvn.w	r2, #2
 8002b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa6f 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002b20:	e005      	b.n	8002b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa62 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fa71 	bl	8003010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d122      	bne.n	8002b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d11b      	bne.n	8002b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0204 	mvn.w	r2, #4
 8002b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fa45 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002b74:	e005      	b.n	8002b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa38 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fa47 	bl	8003010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d122      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d11b      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0208 	mvn.w	r2, #8
 8002bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa1b 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002bc8:	e005      	b.n	8002bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa0e 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fa1d 	bl	8003010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d122      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d11b      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0210 	mvn.w	r2, #16
 8002c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2208      	movs	r2, #8
 8002c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f9f1 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002c1c:	e005      	b.n	8002c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f9e4 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f9f3 	bl	8003010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0201 	mvn.w	r2, #1
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fdf2 	bl	8001840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b80      	cmp	r3, #128	; 0x80
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b80      	cmp	r3, #128	; 0x80
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fce1 	bl	800364a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f9b7 	bl	8003022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d107      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0220 	mvn.w	r2, #32
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fcac 	bl	8003638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0ac      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	f200 809f 	bhi.w	8002e50 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d4d 	.word	0x08002d4d
 8002d1c:	08002e51 	.word	0x08002e51
 8002d20:	08002e51 	.word	0x08002e51
 8002d24:	08002e51 	.word	0x08002e51
 8002d28:	08002d8d 	.word	0x08002d8d
 8002d2c:	08002e51 	.word	0x08002e51
 8002d30:	08002e51 	.word	0x08002e51
 8002d34:	08002e51 	.word	0x08002e51
 8002d38:	08002dcf 	.word	0x08002dcf
 8002d3c:	08002e51 	.word	0x08002e51
 8002d40:	08002e51 	.word	0x08002e51
 8002d44:	08002e51 	.word	0x08002e51
 8002d48:	08002e0f 	.word	0x08002e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f9d0 	bl	80030f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0208 	orr.w	r2, r2, #8
 8002d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0204 	bic.w	r2, r2, #4
 8002d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6999      	ldr	r1, [r3, #24]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	619a      	str	r2, [r3, #24]
      break;
 8002d8a:	e062      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fa16 	bl	80031c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6999      	ldr	r1, [r3, #24]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	021a      	lsls	r2, r3, #8
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	619a      	str	r2, [r3, #24]
      break;
 8002dcc:	e041      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fa5f 	bl	8003298 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0208 	orr.w	r2, r2, #8
 8002de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0204 	bic.w	r2, r2, #4
 8002df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69d9      	ldr	r1, [r3, #28]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	61da      	str	r2, [r3, #28]
      break;
 8002e0c:	e021      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 faa9 	bl	800336c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69d9      	ldr	r1, [r3, #28]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	021a      	lsls	r2, r3, #8
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	61da      	str	r2, [r3, #28]
      break;
 8002e4e:	e000      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_TIM_ConfigClockSource+0x18>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0b3      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x180>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb4:	d03e      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0xd0>
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	f200 8087 	bhi.w	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	f000 8085 	beq.w	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	d87f      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d01a      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xa2>
 8002ed0:	2b70      	cmp	r3, #112	; 0x70
 8002ed2:	d87b      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d050      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x116>
 8002ed8:	2b60      	cmp	r3, #96	; 0x60
 8002eda:	d877      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d03c      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0xf6>
 8002ee0:	2b50      	cmp	r3, #80	; 0x50
 8002ee2:	d873      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d058      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x136>
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d86f      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d064      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x156>
 8002ef0:	2b30      	cmp	r3, #48	; 0x30
 8002ef2:	d86b      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d060      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x156>
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d867      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05c      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x156>
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d05a      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f04:	e062      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6899      	ldr	r1, [r3, #8]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f000 faee 	bl	80034f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	609a      	str	r2, [r3, #8]
      break;
 8002f32:	e04e      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6899      	ldr	r1, [r3, #8]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f000 fad7 	bl	80034f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f56:	609a      	str	r2, [r3, #8]
      break;
 8002f58:	e03b      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6859      	ldr	r1, [r3, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f000 fa4e 	bl	8003408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2150      	movs	r1, #80	; 0x50
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 faa5 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8002f78:	e02b      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f000 fa6c 	bl	8003464 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2160      	movs	r1, #96	; 0x60
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fa95 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8002f98:	e01b      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f000 fa2e 	bl	8003408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2140      	movs	r1, #64	; 0x40
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fa85 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8002fb8:	e00b      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f000 fa7c 	bl	80034c2 <TIM_ITRx_SetConfig>
        break;
 8002fca:	e002      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a29      	ldr	r2, [pc, #164]	; (80030ec <TIM_Base_SetConfig+0xb8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00b      	beq.n	8003064 <TIM_Base_SetConfig+0x30>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003052:	d007      	beq.n	8003064 <TIM_Base_SetConfig+0x30>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <TIM_Base_SetConfig+0xbc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_Base_SetConfig+0x30>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <TIM_Base_SetConfig+0xc0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d108      	bne.n	8003076 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <TIM_Base_SetConfig+0xb8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0x62>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0x62>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <TIM_Base_SetConfig+0xbc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x62>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <TIM_Base_SetConfig+0xc0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a07      	ldr	r2, [pc, #28]	; (80030ec <TIM_Base_SetConfig+0xb8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d103      	bne.n	80030dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	615a      	str	r2, [r3, #20]
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800

080030f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f023 0201 	bic.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0303 	bic.w	r3, r3, #3
 800312e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f023 0302 	bic.w	r3, r3, #2
 8003140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <TIM_OC1_SetConfig+0xc8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10c      	bne.n	800316e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0308 	bic.w	r3, r3, #8
 800315a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <TIM_OC1_SetConfig+0xc8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d111      	bne.n	800319a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800317c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	621a      	str	r2, [r3, #32]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40012c00 	.word	0x40012c00

080031c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0210 	bic.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0320 	bic.w	r3, r3, #32
 800320e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <TIM_OC2_SetConfig+0xd0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d10d      	bne.n	8003240 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800322a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800323e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a14      	ldr	r2, [pc, #80]	; (8003294 <TIM_OC2_SetConfig+0xd0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d113      	bne.n	8003270 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800324e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40012c00 	.word	0x40012c00

08003298 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <TIM_OC3_SetConfig+0xd0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10d      	bne.n	8003312 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a14      	ldr	r2, [pc, #80]	; (8003368 <TIM_OC3_SetConfig+0xd0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d113      	bne.n	8003342 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	621a      	str	r2, [r3, #32]
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40012c00 	.word	0x40012c00

0800336c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	031b      	lsls	r3, r3, #12
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0f      	ldr	r2, [pc, #60]	; (8003404 <TIM_OC4_SetConfig+0x98>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d109      	bne.n	80033e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	40012c00 	.word	0x40012c00

08003408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f023 030a 	bic.w	r3, r3, #10
 8003444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f023 0210 	bic.w	r2, r3, #16
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800348e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	031b      	lsls	r3, r3, #12
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	621a      	str	r2, [r3, #32]
}
 80034b8:	bf00      	nop
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	f043 0307 	orr.w	r3, r3, #7
 80034e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b087      	sub	sp, #28
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003510:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	021a      	lsls	r2, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	431a      	orrs	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4313      	orrs	r3, r2
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	609a      	str	r2, [r3, #8]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2201      	movs	r2, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1a      	ldr	r2, [r3, #32]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	43db      	mvns	r3, r3
 8003556:	401a      	ands	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	431a      	orrs	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003590:	2302      	movs	r3, #2
 8003592:	e046      	b.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a16      	ldr	r2, [pc, #88]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d009      	beq.n	80035f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a10      	ldr	r2, [pc, #64]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10c      	bne.n	8003610 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	4313      	orrs	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800

08003638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e03f      	b.n	80036ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe f81a 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800369e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f905 	bl	80038b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b08a      	sub	sp, #40	; 0x28
 80036fa:	af02      	add	r7, sp, #8
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	d17c      	bne.n	8003810 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_UART_Transmit+0x2c>
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e075      	b.n	8003812 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_UART_Transmit+0x3e>
 8003730:	2302      	movs	r3, #2
 8003732:	e06e      	b.n	8003812 <HAL_UART_Transmit+0x11c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2221      	movs	r2, #33	; 0x21
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800374a:	f7fe f907 	bl	800195c <HAL_GetTick>
 800374e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d108      	bne.n	8003778 <HAL_UART_Transmit+0x82>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d104      	bne.n	8003778 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	e003      	b.n	8003780 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800377c:	2300      	movs	r3, #0
 800377e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003788:	e02a      	b.n	80037e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f840 	bl	800381a <UART_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e036      	b.n	8003812 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	3302      	adds	r3, #2
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	e007      	b.n	80037d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	3301      	adds	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1cf      	bne.n	800378a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2200      	movs	r2, #0
 80037f2:	2140      	movs	r1, #64	; 0x40
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f810 	bl	800381a <UART_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e006      	b.n	8003812 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	4613      	mov	r3, r2
 8003828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382a:	e02c      	b.n	8003886 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d028      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0x30>
 800383a:	f7fe f88f 	bl	800195c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	429a      	cmp	r2, r3
 8003848:	d21d      	bcs.n	8003886 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003858:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e00f      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	bf0c      	ite	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	2300      	movne	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d0c3      	beq.n	800382c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038ea:	f023 030c 	bic.w	r3, r3, #12
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	430b      	orrs	r3, r1
 80038f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <UART_SetConfig+0x114>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d103      	bne.n	8003920 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003918:	f7fe ff10 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	e002      	b.n	8003926 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003920:	f7fe fef8 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8003924:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009a      	lsls	r2, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <UART_SetConfig+0x118>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	0119      	lsls	r1, r3, #4
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009a      	lsls	r2, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fbb2 f2f3 	udiv	r2, r2, r3
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <UART_SetConfig+0x118>)
 800395e:	fba3 0302 	umull	r0, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2064      	movs	r0, #100	; 0x64
 8003966:	fb00 f303 	mul.w	r3, r0, r3
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	3332      	adds	r3, #50	; 0x32
 8003970:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <UART_SetConfig+0x118>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397c:	4419      	add	r1, r3
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	fbb2 f2f3 	udiv	r2, r2, r3
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <UART_SetConfig+0x118>)
 8003996:	fba3 0302 	umull	r0, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2064      	movs	r0, #100	; 0x64
 800399e:	fb00 f303 	mul.w	r3, r0, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	3332      	adds	r3, #50	; 0x32
 80039a8:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <UART_SetConfig+0x118>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	440a      	add	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40013800 	.word	0x40013800
 80039c8:	51eb851f 	.word	0x51eb851f

080039cc <__errno>:
 80039cc:	4b01      	ldr	r3, [pc, #4]	; (80039d4 <__errno+0x8>)
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000030 	.word	0x20000030

080039d8 <__libc_init_array>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	2600      	movs	r6, #0
 80039dc:	4d0c      	ldr	r5, [pc, #48]	; (8003a10 <__libc_init_array+0x38>)
 80039de:	4c0d      	ldr	r4, [pc, #52]	; (8003a14 <__libc_init_array+0x3c>)
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	42a6      	cmp	r6, r4
 80039e6:	d109      	bne.n	80039fc <__libc_init_array+0x24>
 80039e8:	f000 fc5c 	bl	80042a4 <_init>
 80039ec:	2600      	movs	r6, #0
 80039ee:	4d0a      	ldr	r5, [pc, #40]	; (8003a18 <__libc_init_array+0x40>)
 80039f0:	4c0a      	ldr	r4, [pc, #40]	; (8003a1c <__libc_init_array+0x44>)
 80039f2:	1b64      	subs	r4, r4, r5
 80039f4:	10a4      	asrs	r4, r4, #2
 80039f6:	42a6      	cmp	r6, r4
 80039f8:	d105      	bne.n	8003a06 <__libc_init_array+0x2e>
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a00:	4798      	blx	r3
 8003a02:	3601      	adds	r6, #1
 8003a04:	e7ee      	b.n	80039e4 <__libc_init_array+0xc>
 8003a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0a:	4798      	blx	r3
 8003a0c:	3601      	adds	r6, #1
 8003a0e:	e7f2      	b.n	80039f6 <__libc_init_array+0x1e>
 8003a10:	08004324 	.word	0x08004324
 8003a14:	08004324 	.word	0x08004324
 8003a18:	08004324 	.word	0x08004324
 8003a1c:	08004328 	.word	0x08004328

08003a20 <memset>:
 8003a20:	4603      	mov	r3, r0
 8003a22:	4402      	add	r2, r0
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memset+0xa>
 8003a28:	4770      	bx	lr
 8003a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2e:	e7f9      	b.n	8003a24 <memset+0x4>

08003a30 <siprintf>:
 8003a30:	b40e      	push	{r1, r2, r3}
 8003a32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a36:	b500      	push	{lr}
 8003a38:	b09c      	sub	sp, #112	; 0x70
 8003a3a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a3c:	9002      	str	r0, [sp, #8]
 8003a3e:	9006      	str	r0, [sp, #24]
 8003a40:	9107      	str	r1, [sp, #28]
 8003a42:	9104      	str	r1, [sp, #16]
 8003a44:	4808      	ldr	r0, [pc, #32]	; (8003a68 <siprintf+0x38>)
 8003a46:	4909      	ldr	r1, [pc, #36]	; (8003a6c <siprintf+0x3c>)
 8003a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a4c:	9105      	str	r1, [sp, #20]
 8003a4e:	6800      	ldr	r0, [r0, #0]
 8003a50:	a902      	add	r1, sp, #8
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	f000 f868 	bl	8003b28 <_svfiprintf_r>
 8003a58:	2200      	movs	r2, #0
 8003a5a:	9b02      	ldr	r3, [sp, #8]
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	b01c      	add	sp, #112	; 0x70
 8003a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a64:	b003      	add	sp, #12
 8003a66:	4770      	bx	lr
 8003a68:	20000030 	.word	0x20000030
 8003a6c:	ffff0208 	.word	0xffff0208

08003a70 <__ssputs_r>:
 8003a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a74:	688e      	ldr	r6, [r1, #8]
 8003a76:	4682      	mov	sl, r0
 8003a78:	429e      	cmp	r6, r3
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	4690      	mov	r8, r2
 8003a7e:	461f      	mov	r7, r3
 8003a80:	d838      	bhi.n	8003af4 <__ssputs_r+0x84>
 8003a82:	898a      	ldrh	r2, [r1, #12]
 8003a84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a88:	d032      	beq.n	8003af0 <__ssputs_r+0x80>
 8003a8a:	6825      	ldr	r5, [r4, #0]
 8003a8c:	6909      	ldr	r1, [r1, #16]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	eba5 0901 	sub.w	r9, r5, r1
 8003a94:	6965      	ldr	r5, [r4, #20]
 8003a96:	444b      	add	r3, r9
 8003a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aa0:	106d      	asrs	r5, r5, #1
 8003aa2:	429d      	cmp	r5, r3
 8003aa4:	bf38      	it	cc
 8003aa6:	461d      	movcc	r5, r3
 8003aa8:	0553      	lsls	r3, r2, #21
 8003aaa:	d531      	bpl.n	8003b10 <__ssputs_r+0xa0>
 8003aac:	4629      	mov	r1, r5
 8003aae:	f000 fb53 	bl	8004158 <_malloc_r>
 8003ab2:	4606      	mov	r6, r0
 8003ab4:	b950      	cbnz	r0, 8003acc <__ssputs_r+0x5c>
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	f8ca 3000 	str.w	r3, [sl]
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003acc:	464a      	mov	r2, r9
 8003ace:	6921      	ldr	r1, [r4, #16]
 8003ad0:	f000 face 	bl	8004070 <memcpy>
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	6126      	str	r6, [r4, #16]
 8003ae2:	444e      	add	r6, r9
 8003ae4:	6026      	str	r6, [r4, #0]
 8003ae6:	463e      	mov	r6, r7
 8003ae8:	6165      	str	r5, [r4, #20]
 8003aea:	eba5 0509 	sub.w	r5, r5, r9
 8003aee:	60a5      	str	r5, [r4, #8]
 8003af0:	42be      	cmp	r6, r7
 8003af2:	d900      	bls.n	8003af6 <__ssputs_r+0x86>
 8003af4:	463e      	mov	r6, r7
 8003af6:	4632      	mov	r2, r6
 8003af8:	4641      	mov	r1, r8
 8003afa:	6820      	ldr	r0, [r4, #0]
 8003afc:	f000 fac6 	bl	800408c <memmove>
 8003b00:	68a3      	ldr	r3, [r4, #8]
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	1b9b      	subs	r3, r3, r6
 8003b06:	4432      	add	r2, r6
 8003b08:	2000      	movs	r0, #0
 8003b0a:	60a3      	str	r3, [r4, #8]
 8003b0c:	6022      	str	r2, [r4, #0]
 8003b0e:	e7db      	b.n	8003ac8 <__ssputs_r+0x58>
 8003b10:	462a      	mov	r2, r5
 8003b12:	f000 fb7b 	bl	800420c <_realloc_r>
 8003b16:	4606      	mov	r6, r0
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d1e1      	bne.n	8003ae0 <__ssputs_r+0x70>
 8003b1c:	4650      	mov	r0, sl
 8003b1e:	6921      	ldr	r1, [r4, #16]
 8003b20:	f000 face 	bl	80040c0 <_free_r>
 8003b24:	e7c7      	b.n	8003ab6 <__ssputs_r+0x46>
	...

08003b28 <_svfiprintf_r>:
 8003b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2c:	4698      	mov	r8, r3
 8003b2e:	898b      	ldrh	r3, [r1, #12]
 8003b30:	4607      	mov	r7, r0
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	460d      	mov	r5, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	b09d      	sub	sp, #116	; 0x74
 8003b3a:	d50e      	bpl.n	8003b5a <_svfiprintf_r+0x32>
 8003b3c:	690b      	ldr	r3, [r1, #16]
 8003b3e:	b963      	cbnz	r3, 8003b5a <_svfiprintf_r+0x32>
 8003b40:	2140      	movs	r1, #64	; 0x40
 8003b42:	f000 fb09 	bl	8004158 <_malloc_r>
 8003b46:	6028      	str	r0, [r5, #0]
 8003b48:	6128      	str	r0, [r5, #16]
 8003b4a:	b920      	cbnz	r0, 8003b56 <_svfiprintf_r+0x2e>
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	e0d1      	b.n	8003cfa <_svfiprintf_r+0x1d2>
 8003b56:	2340      	movs	r3, #64	; 0x40
 8003b58:	616b      	str	r3, [r5, #20]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b5e:	2320      	movs	r3, #32
 8003b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b64:	2330      	movs	r3, #48	; 0x30
 8003b66:	f04f 0901 	mov.w	r9, #1
 8003b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d14 <_svfiprintf_r+0x1ec>
 8003b72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b76:	4623      	mov	r3, r4
 8003b78:	469a      	mov	sl, r3
 8003b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b7e:	b10a      	cbz	r2, 8003b84 <_svfiprintf_r+0x5c>
 8003b80:	2a25      	cmp	r2, #37	; 0x25
 8003b82:	d1f9      	bne.n	8003b78 <_svfiprintf_r+0x50>
 8003b84:	ebba 0b04 	subs.w	fp, sl, r4
 8003b88:	d00b      	beq.n	8003ba2 <_svfiprintf_r+0x7a>
 8003b8a:	465b      	mov	r3, fp
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	4629      	mov	r1, r5
 8003b90:	4638      	mov	r0, r7
 8003b92:	f7ff ff6d 	bl	8003a70 <__ssputs_r>
 8003b96:	3001      	adds	r0, #1
 8003b98:	f000 80aa 	beq.w	8003cf0 <_svfiprintf_r+0x1c8>
 8003b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b9e:	445a      	add	r2, fp
 8003ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80a2 	beq.w	8003cf0 <_svfiprintf_r+0x1c8>
 8003bac:	2300      	movs	r3, #0
 8003bae:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bb6:	f10a 0a01 	add.w	sl, sl, #1
 8003bba:	9304      	str	r3, [sp, #16]
 8003bbc:	9307      	str	r3, [sp, #28]
 8003bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8003bc4:	4654      	mov	r4, sl
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bcc:	4851      	ldr	r0, [pc, #324]	; (8003d14 <_svfiprintf_r+0x1ec>)
 8003bce:	f000 fa41 	bl	8004054 <memchr>
 8003bd2:	9a04      	ldr	r2, [sp, #16]
 8003bd4:	b9d8      	cbnz	r0, 8003c0e <_svfiprintf_r+0xe6>
 8003bd6:	06d0      	lsls	r0, r2, #27
 8003bd8:	bf44      	itt	mi
 8003bda:	2320      	movmi	r3, #32
 8003bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003be0:	0711      	lsls	r1, r2, #28
 8003be2:	bf44      	itt	mi
 8003be4:	232b      	movmi	r3, #43	; 0x2b
 8003be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bea:	f89a 3000 	ldrb.w	r3, [sl]
 8003bee:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf0:	d015      	beq.n	8003c1e <_svfiprintf_r+0xf6>
 8003bf2:	4654      	mov	r4, sl
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f04f 0c0a 	mov.w	ip, #10
 8003bfa:	9a07      	ldr	r2, [sp, #28]
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c02:	3b30      	subs	r3, #48	; 0x30
 8003c04:	2b09      	cmp	r3, #9
 8003c06:	d94e      	bls.n	8003ca6 <_svfiprintf_r+0x17e>
 8003c08:	b1b0      	cbz	r0, 8003c38 <_svfiprintf_r+0x110>
 8003c0a:	9207      	str	r2, [sp, #28]
 8003c0c:	e014      	b.n	8003c38 <_svfiprintf_r+0x110>
 8003c0e:	eba0 0308 	sub.w	r3, r0, r8
 8003c12:	fa09 f303 	lsl.w	r3, r9, r3
 8003c16:	4313      	orrs	r3, r2
 8003c18:	46a2      	mov	sl, r4
 8003c1a:	9304      	str	r3, [sp, #16]
 8003c1c:	e7d2      	b.n	8003bc4 <_svfiprintf_r+0x9c>
 8003c1e:	9b03      	ldr	r3, [sp, #12]
 8003c20:	1d19      	adds	r1, r3, #4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	9103      	str	r1, [sp, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bfbb      	ittet	lt
 8003c2a:	425b      	neglt	r3, r3
 8003c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c30:	9307      	strge	r3, [sp, #28]
 8003c32:	9307      	strlt	r3, [sp, #28]
 8003c34:	bfb8      	it	lt
 8003c36:	9204      	strlt	r2, [sp, #16]
 8003c38:	7823      	ldrb	r3, [r4, #0]
 8003c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c3c:	d10c      	bne.n	8003c58 <_svfiprintf_r+0x130>
 8003c3e:	7863      	ldrb	r3, [r4, #1]
 8003c40:	2b2a      	cmp	r3, #42	; 0x2a
 8003c42:	d135      	bne.n	8003cb0 <_svfiprintf_r+0x188>
 8003c44:	9b03      	ldr	r3, [sp, #12]
 8003c46:	3402      	adds	r4, #2
 8003c48:	1d1a      	adds	r2, r3, #4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	9203      	str	r2, [sp, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bfb8      	it	lt
 8003c52:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c56:	9305      	str	r3, [sp, #20]
 8003c58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d24 <_svfiprintf_r+0x1fc>
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	4650      	mov	r0, sl
 8003c60:	7821      	ldrb	r1, [r4, #0]
 8003c62:	f000 f9f7 	bl	8004054 <memchr>
 8003c66:	b140      	cbz	r0, 8003c7a <_svfiprintf_r+0x152>
 8003c68:	2340      	movs	r3, #64	; 0x40
 8003c6a:	eba0 000a 	sub.w	r0, r0, sl
 8003c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8003c72:	9b04      	ldr	r3, [sp, #16]
 8003c74:	3401      	adds	r4, #1
 8003c76:	4303      	orrs	r3, r0
 8003c78:	9304      	str	r3, [sp, #16]
 8003c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c7e:	2206      	movs	r2, #6
 8003c80:	4825      	ldr	r0, [pc, #148]	; (8003d18 <_svfiprintf_r+0x1f0>)
 8003c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c86:	f000 f9e5 	bl	8004054 <memchr>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d038      	beq.n	8003d00 <_svfiprintf_r+0x1d8>
 8003c8e:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <_svfiprintf_r+0x1f4>)
 8003c90:	bb1b      	cbnz	r3, 8003cda <_svfiprintf_r+0x1b2>
 8003c92:	9b03      	ldr	r3, [sp, #12]
 8003c94:	3307      	adds	r3, #7
 8003c96:	f023 0307 	bic.w	r3, r3, #7
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	9303      	str	r3, [sp, #12]
 8003c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca0:	4433      	add	r3, r6
 8003ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca4:	e767      	b.n	8003b76 <_svfiprintf_r+0x4e>
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	2001      	movs	r0, #1
 8003caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cae:	e7a5      	b.n	8003bfc <_svfiprintf_r+0xd4>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f04f 0c0a 	mov.w	ip, #10
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	3401      	adds	r4, #1
 8003cba:	9305      	str	r3, [sp, #20]
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cc2:	3a30      	subs	r2, #48	; 0x30
 8003cc4:	2a09      	cmp	r2, #9
 8003cc6:	d903      	bls.n	8003cd0 <_svfiprintf_r+0x1a8>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0c5      	beq.n	8003c58 <_svfiprintf_r+0x130>
 8003ccc:	9105      	str	r1, [sp, #20]
 8003cce:	e7c3      	b.n	8003c58 <_svfiprintf_r+0x130>
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cd8:	e7f0      	b.n	8003cbc <_svfiprintf_r+0x194>
 8003cda:	ab03      	add	r3, sp, #12
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	462a      	mov	r2, r5
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <_svfiprintf_r+0x1f8>)
 8003ce4:	a904      	add	r1, sp, #16
 8003ce6:	f3af 8000 	nop.w
 8003cea:	1c42      	adds	r2, r0, #1
 8003cec:	4606      	mov	r6, r0
 8003cee:	d1d6      	bne.n	8003c9e <_svfiprintf_r+0x176>
 8003cf0:	89ab      	ldrh	r3, [r5, #12]
 8003cf2:	065b      	lsls	r3, r3, #25
 8003cf4:	f53f af2c 	bmi.w	8003b50 <_svfiprintf_r+0x28>
 8003cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cfa:	b01d      	add	sp, #116	; 0x74
 8003cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d00:	ab03      	add	r3, sp, #12
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	462a      	mov	r2, r5
 8003d06:	4638      	mov	r0, r7
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <_svfiprintf_r+0x1f8>)
 8003d0a:	a904      	add	r1, sp, #16
 8003d0c:	f000 f87c 	bl	8003e08 <_printf_i>
 8003d10:	e7eb      	b.n	8003cea <_svfiprintf_r+0x1c2>
 8003d12:	bf00      	nop
 8003d14:	080042f0 	.word	0x080042f0
 8003d18:	080042fa 	.word	0x080042fa
 8003d1c:	00000000 	.word	0x00000000
 8003d20:	08003a71 	.word	0x08003a71
 8003d24:	080042f6 	.word	0x080042f6

08003d28 <_printf_common>:
 8003d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	4616      	mov	r6, r2
 8003d2e:	4699      	mov	r9, r3
 8003d30:	688a      	ldr	r2, [r1, #8]
 8003d32:	690b      	ldr	r3, [r1, #16]
 8003d34:	4607      	mov	r7, r0
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bfb8      	it	lt
 8003d3a:	4613      	movlt	r3, r2
 8003d3c:	6033      	str	r3, [r6, #0]
 8003d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d42:	460c      	mov	r4, r1
 8003d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d48:	b10a      	cbz	r2, 8003d4e <_printf_common+0x26>
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	6033      	str	r3, [r6, #0]
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	0699      	lsls	r1, r3, #26
 8003d52:	bf42      	ittt	mi
 8003d54:	6833      	ldrmi	r3, [r6, #0]
 8003d56:	3302      	addmi	r3, #2
 8003d58:	6033      	strmi	r3, [r6, #0]
 8003d5a:	6825      	ldr	r5, [r4, #0]
 8003d5c:	f015 0506 	ands.w	r5, r5, #6
 8003d60:	d106      	bne.n	8003d70 <_printf_common+0x48>
 8003d62:	f104 0a19 	add.w	sl, r4, #25
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	6832      	ldr	r2, [r6, #0]
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	42ab      	cmp	r3, r5
 8003d6e:	dc28      	bgt.n	8003dc2 <_printf_common+0x9a>
 8003d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d74:	1e13      	subs	r3, r2, #0
 8003d76:	6822      	ldr	r2, [r4, #0]
 8003d78:	bf18      	it	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	0692      	lsls	r2, r2, #26
 8003d7e:	d42d      	bmi.n	8003ddc <_printf_common+0xb4>
 8003d80:	4649      	mov	r1, r9
 8003d82:	4638      	mov	r0, r7
 8003d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d88:	47c0      	blx	r8
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d020      	beq.n	8003dd0 <_printf_common+0xa8>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	68e5      	ldr	r5, [r4, #12]
 8003d92:	f003 0306 	and.w	r3, r3, #6
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf18      	it	ne
 8003d9a:	2500      	movne	r5, #0
 8003d9c:	6832      	ldr	r2, [r6, #0]
 8003d9e:	f04f 0600 	mov.w	r6, #0
 8003da2:	68a3      	ldr	r3, [r4, #8]
 8003da4:	bf08      	it	eq
 8003da6:	1aad      	subeq	r5, r5, r2
 8003da8:	6922      	ldr	r2, [r4, #16]
 8003daa:	bf08      	it	eq
 8003dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bfc4      	itt	gt
 8003db4:	1a9b      	subgt	r3, r3, r2
 8003db6:	18ed      	addgt	r5, r5, r3
 8003db8:	341a      	adds	r4, #26
 8003dba:	42b5      	cmp	r5, r6
 8003dbc:	d11a      	bne.n	8003df4 <_printf_common+0xcc>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	e008      	b.n	8003dd4 <_printf_common+0xac>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	4652      	mov	r2, sl
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	4638      	mov	r0, r7
 8003dca:	47c0      	blx	r8
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d103      	bne.n	8003dd8 <_printf_common+0xb0>
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd8:	3501      	adds	r5, #1
 8003dda:	e7c4      	b.n	8003d66 <_printf_common+0x3e>
 8003ddc:	2030      	movs	r0, #48	; 0x30
 8003dde:	18e1      	adds	r1, r4, r3
 8003de0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dea:	4422      	add	r2, r4
 8003dec:	3302      	adds	r3, #2
 8003dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003df2:	e7c5      	b.n	8003d80 <_printf_common+0x58>
 8003df4:	2301      	movs	r3, #1
 8003df6:	4622      	mov	r2, r4
 8003df8:	4649      	mov	r1, r9
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	47c0      	blx	r8
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d0e6      	beq.n	8003dd0 <_printf_common+0xa8>
 8003e02:	3601      	adds	r6, #1
 8003e04:	e7d9      	b.n	8003dba <_printf_common+0x92>
	...

08003e08 <_printf_i>:
 8003e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	7e27      	ldrb	r7, [r4, #24]
 8003e10:	4691      	mov	r9, r2
 8003e12:	2f78      	cmp	r7, #120	; 0x78
 8003e14:	4680      	mov	r8, r0
 8003e16:	469a      	mov	sl, r3
 8003e18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e1e:	d807      	bhi.n	8003e30 <_printf_i+0x28>
 8003e20:	2f62      	cmp	r7, #98	; 0x62
 8003e22:	d80a      	bhi.n	8003e3a <_printf_i+0x32>
 8003e24:	2f00      	cmp	r7, #0
 8003e26:	f000 80d9 	beq.w	8003fdc <_printf_i+0x1d4>
 8003e2a:	2f58      	cmp	r7, #88	; 0x58
 8003e2c:	f000 80a4 	beq.w	8003f78 <_printf_i+0x170>
 8003e30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e38:	e03a      	b.n	8003eb0 <_printf_i+0xa8>
 8003e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e3e:	2b15      	cmp	r3, #21
 8003e40:	d8f6      	bhi.n	8003e30 <_printf_i+0x28>
 8003e42:	a001      	add	r0, pc, #4	; (adr r0, 8003e48 <_printf_i+0x40>)
 8003e44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e48:	08003ea1 	.word	0x08003ea1
 8003e4c:	08003eb5 	.word	0x08003eb5
 8003e50:	08003e31 	.word	0x08003e31
 8003e54:	08003e31 	.word	0x08003e31
 8003e58:	08003e31 	.word	0x08003e31
 8003e5c:	08003e31 	.word	0x08003e31
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	08003e31 	.word	0x08003e31
 8003e68:	08003e31 	.word	0x08003e31
 8003e6c:	08003e31 	.word	0x08003e31
 8003e70:	08003e31 	.word	0x08003e31
 8003e74:	08003fc3 	.word	0x08003fc3
 8003e78:	08003ee5 	.word	0x08003ee5
 8003e7c:	08003fa5 	.word	0x08003fa5
 8003e80:	08003e31 	.word	0x08003e31
 8003e84:	08003e31 	.word	0x08003e31
 8003e88:	08003fe5 	.word	0x08003fe5
 8003e8c:	08003e31 	.word	0x08003e31
 8003e90:	08003ee5 	.word	0x08003ee5
 8003e94:	08003e31 	.word	0x08003e31
 8003e98:	08003e31 	.word	0x08003e31
 8003e9c:	08003fad 	.word	0x08003fad
 8003ea0:	680b      	ldr	r3, [r1, #0]
 8003ea2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	600a      	str	r2, [r1, #0]
 8003eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0a4      	b.n	8003ffe <_printf_i+0x1f6>
 8003eb4:	6825      	ldr	r5, [r4, #0]
 8003eb6:	6808      	ldr	r0, [r1, #0]
 8003eb8:	062e      	lsls	r6, r5, #24
 8003eba:	f100 0304 	add.w	r3, r0, #4
 8003ebe:	d50a      	bpl.n	8003ed6 <_printf_i+0xce>
 8003ec0:	6805      	ldr	r5, [r0, #0]
 8003ec2:	600b      	str	r3, [r1, #0]
 8003ec4:	2d00      	cmp	r5, #0
 8003ec6:	da03      	bge.n	8003ed0 <_printf_i+0xc8>
 8003ec8:	232d      	movs	r3, #45	; 0x2d
 8003eca:	426d      	negs	r5, r5
 8003ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	485e      	ldr	r0, [pc, #376]	; (800404c <_printf_i+0x244>)
 8003ed4:	e019      	b.n	8003f0a <_printf_i+0x102>
 8003ed6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003eda:	6805      	ldr	r5, [r0, #0]
 8003edc:	600b      	str	r3, [r1, #0]
 8003ede:	bf18      	it	ne
 8003ee0:	b22d      	sxthne	r5, r5
 8003ee2:	e7ef      	b.n	8003ec4 <_printf_i+0xbc>
 8003ee4:	680b      	ldr	r3, [r1, #0]
 8003ee6:	6825      	ldr	r5, [r4, #0]
 8003ee8:	1d18      	adds	r0, r3, #4
 8003eea:	6008      	str	r0, [r1, #0]
 8003eec:	0628      	lsls	r0, r5, #24
 8003eee:	d501      	bpl.n	8003ef4 <_printf_i+0xec>
 8003ef0:	681d      	ldr	r5, [r3, #0]
 8003ef2:	e002      	b.n	8003efa <_printf_i+0xf2>
 8003ef4:	0669      	lsls	r1, r5, #25
 8003ef6:	d5fb      	bpl.n	8003ef0 <_printf_i+0xe8>
 8003ef8:	881d      	ldrh	r5, [r3, #0]
 8003efa:	2f6f      	cmp	r7, #111	; 0x6f
 8003efc:	bf0c      	ite	eq
 8003efe:	2308      	moveq	r3, #8
 8003f00:	230a      	movne	r3, #10
 8003f02:	4852      	ldr	r0, [pc, #328]	; (800404c <_printf_i+0x244>)
 8003f04:	2100      	movs	r1, #0
 8003f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f0a:	6866      	ldr	r6, [r4, #4]
 8003f0c:	2e00      	cmp	r6, #0
 8003f0e:	bfa8      	it	ge
 8003f10:	6821      	ldrge	r1, [r4, #0]
 8003f12:	60a6      	str	r6, [r4, #8]
 8003f14:	bfa4      	itt	ge
 8003f16:	f021 0104 	bicge.w	r1, r1, #4
 8003f1a:	6021      	strge	r1, [r4, #0]
 8003f1c:	b90d      	cbnz	r5, 8003f22 <_printf_i+0x11a>
 8003f1e:	2e00      	cmp	r6, #0
 8003f20:	d04d      	beq.n	8003fbe <_printf_i+0x1b6>
 8003f22:	4616      	mov	r6, r2
 8003f24:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f28:	fb03 5711 	mls	r7, r3, r1, r5
 8003f2c:	5dc7      	ldrb	r7, [r0, r7]
 8003f2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f32:	462f      	mov	r7, r5
 8003f34:	42bb      	cmp	r3, r7
 8003f36:	460d      	mov	r5, r1
 8003f38:	d9f4      	bls.n	8003f24 <_printf_i+0x11c>
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d10b      	bne.n	8003f56 <_printf_i+0x14e>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	07df      	lsls	r7, r3, #31
 8003f42:	d508      	bpl.n	8003f56 <_printf_i+0x14e>
 8003f44:	6923      	ldr	r3, [r4, #16]
 8003f46:	6861      	ldr	r1, [r4, #4]
 8003f48:	4299      	cmp	r1, r3
 8003f4a:	bfde      	ittt	le
 8003f4c:	2330      	movle	r3, #48	; 0x30
 8003f4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f56:	1b92      	subs	r2, r2, r6
 8003f58:	6122      	str	r2, [r4, #16]
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	4640      	mov	r0, r8
 8003f60:	f8cd a000 	str.w	sl, [sp]
 8003f64:	aa03      	add	r2, sp, #12
 8003f66:	f7ff fedf 	bl	8003d28 <_printf_common>
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d14c      	bne.n	8004008 <_printf_i+0x200>
 8003f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f72:	b004      	add	sp, #16
 8003f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f78:	4834      	ldr	r0, [pc, #208]	; (800404c <_printf_i+0x244>)
 8003f7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f7e:	680e      	ldr	r6, [r1, #0]
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f86:	061f      	lsls	r7, r3, #24
 8003f88:	600e      	str	r6, [r1, #0]
 8003f8a:	d514      	bpl.n	8003fb6 <_printf_i+0x1ae>
 8003f8c:	07d9      	lsls	r1, r3, #31
 8003f8e:	bf44      	itt	mi
 8003f90:	f043 0320 	orrmi.w	r3, r3, #32
 8003f94:	6023      	strmi	r3, [r4, #0]
 8003f96:	b91d      	cbnz	r5, 8003fa0 <_printf_i+0x198>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f023 0320 	bic.w	r3, r3, #32
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	e7af      	b.n	8003f04 <_printf_i+0xfc>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	f043 0320 	orr.w	r3, r3, #32
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	2378      	movs	r3, #120	; 0x78
 8003fae:	4828      	ldr	r0, [pc, #160]	; (8004050 <_printf_i+0x248>)
 8003fb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fb4:	e7e3      	b.n	8003f7e <_printf_i+0x176>
 8003fb6:	065e      	lsls	r6, r3, #25
 8003fb8:	bf48      	it	mi
 8003fba:	b2ad      	uxthmi	r5, r5
 8003fbc:	e7e6      	b.n	8003f8c <_printf_i+0x184>
 8003fbe:	4616      	mov	r6, r2
 8003fc0:	e7bb      	b.n	8003f3a <_printf_i+0x132>
 8003fc2:	680b      	ldr	r3, [r1, #0]
 8003fc4:	6826      	ldr	r6, [r4, #0]
 8003fc6:	1d1d      	adds	r5, r3, #4
 8003fc8:	6960      	ldr	r0, [r4, #20]
 8003fca:	600d      	str	r5, [r1, #0]
 8003fcc:	0635      	lsls	r5, r6, #24
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	d501      	bpl.n	8003fd6 <_printf_i+0x1ce>
 8003fd2:	6018      	str	r0, [r3, #0]
 8003fd4:	e002      	b.n	8003fdc <_printf_i+0x1d4>
 8003fd6:	0671      	lsls	r1, r6, #25
 8003fd8:	d5fb      	bpl.n	8003fd2 <_printf_i+0x1ca>
 8003fda:	8018      	strh	r0, [r3, #0]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	4616      	mov	r6, r2
 8003fe0:	6123      	str	r3, [r4, #16]
 8003fe2:	e7ba      	b.n	8003f5a <_printf_i+0x152>
 8003fe4:	680b      	ldr	r3, [r1, #0]
 8003fe6:	1d1a      	adds	r2, r3, #4
 8003fe8:	600a      	str	r2, [r1, #0]
 8003fea:	681e      	ldr	r6, [r3, #0]
 8003fec:	2100      	movs	r1, #0
 8003fee:	4630      	mov	r0, r6
 8003ff0:	6862      	ldr	r2, [r4, #4]
 8003ff2:	f000 f82f 	bl	8004054 <memchr>
 8003ff6:	b108      	cbz	r0, 8003ffc <_printf_i+0x1f4>
 8003ff8:	1b80      	subs	r0, r0, r6
 8003ffa:	6060      	str	r0, [r4, #4]
 8003ffc:	6863      	ldr	r3, [r4, #4]
 8003ffe:	6123      	str	r3, [r4, #16]
 8004000:	2300      	movs	r3, #0
 8004002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004006:	e7a8      	b.n	8003f5a <_printf_i+0x152>
 8004008:	4632      	mov	r2, r6
 800400a:	4649      	mov	r1, r9
 800400c:	4640      	mov	r0, r8
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	47d0      	blx	sl
 8004012:	3001      	adds	r0, #1
 8004014:	d0ab      	beq.n	8003f6e <_printf_i+0x166>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	079b      	lsls	r3, r3, #30
 800401a:	d413      	bmi.n	8004044 <_printf_i+0x23c>
 800401c:	68e0      	ldr	r0, [r4, #12]
 800401e:	9b03      	ldr	r3, [sp, #12]
 8004020:	4298      	cmp	r0, r3
 8004022:	bfb8      	it	lt
 8004024:	4618      	movlt	r0, r3
 8004026:	e7a4      	b.n	8003f72 <_printf_i+0x16a>
 8004028:	2301      	movs	r3, #1
 800402a:	4632      	mov	r2, r6
 800402c:	4649      	mov	r1, r9
 800402e:	4640      	mov	r0, r8
 8004030:	47d0      	blx	sl
 8004032:	3001      	adds	r0, #1
 8004034:	d09b      	beq.n	8003f6e <_printf_i+0x166>
 8004036:	3501      	adds	r5, #1
 8004038:	68e3      	ldr	r3, [r4, #12]
 800403a:	9903      	ldr	r1, [sp, #12]
 800403c:	1a5b      	subs	r3, r3, r1
 800403e:	42ab      	cmp	r3, r5
 8004040:	dcf2      	bgt.n	8004028 <_printf_i+0x220>
 8004042:	e7eb      	b.n	800401c <_printf_i+0x214>
 8004044:	2500      	movs	r5, #0
 8004046:	f104 0619 	add.w	r6, r4, #25
 800404a:	e7f5      	b.n	8004038 <_printf_i+0x230>
 800404c:	08004301 	.word	0x08004301
 8004050:	08004312 	.word	0x08004312

08004054 <memchr>:
 8004054:	4603      	mov	r3, r0
 8004056:	b510      	push	{r4, lr}
 8004058:	b2c9      	uxtb	r1, r1
 800405a:	4402      	add	r2, r0
 800405c:	4293      	cmp	r3, r2
 800405e:	4618      	mov	r0, r3
 8004060:	d101      	bne.n	8004066 <memchr+0x12>
 8004062:	2000      	movs	r0, #0
 8004064:	e003      	b.n	800406e <memchr+0x1a>
 8004066:	7804      	ldrb	r4, [r0, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	428c      	cmp	r4, r1
 800406c:	d1f6      	bne.n	800405c <memchr+0x8>
 800406e:	bd10      	pop	{r4, pc}

08004070 <memcpy>:
 8004070:	440a      	add	r2, r1
 8004072:	4291      	cmp	r1, r2
 8004074:	f100 33ff 	add.w	r3, r0, #4294967295
 8004078:	d100      	bne.n	800407c <memcpy+0xc>
 800407a:	4770      	bx	lr
 800407c:	b510      	push	{r4, lr}
 800407e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004082:	4291      	cmp	r1, r2
 8004084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004088:	d1f9      	bne.n	800407e <memcpy+0xe>
 800408a:	bd10      	pop	{r4, pc}

0800408c <memmove>:
 800408c:	4288      	cmp	r0, r1
 800408e:	b510      	push	{r4, lr}
 8004090:	eb01 0402 	add.w	r4, r1, r2
 8004094:	d902      	bls.n	800409c <memmove+0x10>
 8004096:	4284      	cmp	r4, r0
 8004098:	4623      	mov	r3, r4
 800409a:	d807      	bhi.n	80040ac <memmove+0x20>
 800409c:	1e43      	subs	r3, r0, #1
 800409e:	42a1      	cmp	r1, r4
 80040a0:	d008      	beq.n	80040b4 <memmove+0x28>
 80040a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040aa:	e7f8      	b.n	800409e <memmove+0x12>
 80040ac:	4601      	mov	r1, r0
 80040ae:	4402      	add	r2, r0
 80040b0:	428a      	cmp	r2, r1
 80040b2:	d100      	bne.n	80040b6 <memmove+0x2a>
 80040b4:	bd10      	pop	{r4, pc}
 80040b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040be:	e7f7      	b.n	80040b0 <memmove+0x24>

080040c0 <_free_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4605      	mov	r5, r0
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d043      	beq.n	8004150 <_free_r+0x90>
 80040c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040cc:	1f0c      	subs	r4, r1, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bfb8      	it	lt
 80040d2:	18e4      	addlt	r4, r4, r3
 80040d4:	f000 f8d0 	bl	8004278 <__malloc_lock>
 80040d8:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <_free_r+0x94>)
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	4610      	mov	r0, r2
 80040de:	b933      	cbnz	r3, 80040ee <_free_r+0x2e>
 80040e0:	6063      	str	r3, [r4, #4]
 80040e2:	6014      	str	r4, [r2, #0]
 80040e4:	4628      	mov	r0, r5
 80040e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ea:	f000 b8cb 	b.w	8004284 <__malloc_unlock>
 80040ee:	42a3      	cmp	r3, r4
 80040f0:	d90a      	bls.n	8004108 <_free_r+0x48>
 80040f2:	6821      	ldr	r1, [r4, #0]
 80040f4:	1862      	adds	r2, r4, r1
 80040f6:	4293      	cmp	r3, r2
 80040f8:	bf01      	itttt	eq
 80040fa:	681a      	ldreq	r2, [r3, #0]
 80040fc:	685b      	ldreq	r3, [r3, #4]
 80040fe:	1852      	addeq	r2, r2, r1
 8004100:	6022      	streq	r2, [r4, #0]
 8004102:	6063      	str	r3, [r4, #4]
 8004104:	6004      	str	r4, [r0, #0]
 8004106:	e7ed      	b.n	80040e4 <_free_r+0x24>
 8004108:	461a      	mov	r2, r3
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	b10b      	cbz	r3, 8004112 <_free_r+0x52>
 800410e:	42a3      	cmp	r3, r4
 8004110:	d9fa      	bls.n	8004108 <_free_r+0x48>
 8004112:	6811      	ldr	r1, [r2, #0]
 8004114:	1850      	adds	r0, r2, r1
 8004116:	42a0      	cmp	r0, r4
 8004118:	d10b      	bne.n	8004132 <_free_r+0x72>
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	4401      	add	r1, r0
 800411e:	1850      	adds	r0, r2, r1
 8004120:	4283      	cmp	r3, r0
 8004122:	6011      	str	r1, [r2, #0]
 8004124:	d1de      	bne.n	80040e4 <_free_r+0x24>
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4401      	add	r1, r0
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	6053      	str	r3, [r2, #4]
 8004130:	e7d8      	b.n	80040e4 <_free_r+0x24>
 8004132:	d902      	bls.n	800413a <_free_r+0x7a>
 8004134:	230c      	movs	r3, #12
 8004136:	602b      	str	r3, [r5, #0]
 8004138:	e7d4      	b.n	80040e4 <_free_r+0x24>
 800413a:	6820      	ldr	r0, [r4, #0]
 800413c:	1821      	adds	r1, r4, r0
 800413e:	428b      	cmp	r3, r1
 8004140:	bf01      	itttt	eq
 8004142:	6819      	ldreq	r1, [r3, #0]
 8004144:	685b      	ldreq	r3, [r3, #4]
 8004146:	1809      	addeq	r1, r1, r0
 8004148:	6021      	streq	r1, [r4, #0]
 800414a:	6063      	str	r3, [r4, #4]
 800414c:	6054      	str	r4, [r2, #4]
 800414e:	e7c9      	b.n	80040e4 <_free_r+0x24>
 8004150:	bd38      	pop	{r3, r4, r5, pc}
 8004152:	bf00      	nop
 8004154:	20000138 	.word	0x20000138

08004158 <_malloc_r>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	1ccd      	adds	r5, r1, #3
 800415c:	f025 0503 	bic.w	r5, r5, #3
 8004160:	3508      	adds	r5, #8
 8004162:	2d0c      	cmp	r5, #12
 8004164:	bf38      	it	cc
 8004166:	250c      	movcc	r5, #12
 8004168:	2d00      	cmp	r5, #0
 800416a:	4606      	mov	r6, r0
 800416c:	db01      	blt.n	8004172 <_malloc_r+0x1a>
 800416e:	42a9      	cmp	r1, r5
 8004170:	d903      	bls.n	800417a <_malloc_r+0x22>
 8004172:	230c      	movs	r3, #12
 8004174:	6033      	str	r3, [r6, #0]
 8004176:	2000      	movs	r0, #0
 8004178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800417a:	f000 f87d 	bl	8004278 <__malloc_lock>
 800417e:	4921      	ldr	r1, [pc, #132]	; (8004204 <_malloc_r+0xac>)
 8004180:	680a      	ldr	r2, [r1, #0]
 8004182:	4614      	mov	r4, r2
 8004184:	b99c      	cbnz	r4, 80041ae <_malloc_r+0x56>
 8004186:	4f20      	ldr	r7, [pc, #128]	; (8004208 <_malloc_r+0xb0>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	b923      	cbnz	r3, 8004196 <_malloc_r+0x3e>
 800418c:	4621      	mov	r1, r4
 800418e:	4630      	mov	r0, r6
 8004190:	f000 f862 	bl	8004258 <_sbrk_r>
 8004194:	6038      	str	r0, [r7, #0]
 8004196:	4629      	mov	r1, r5
 8004198:	4630      	mov	r0, r6
 800419a:	f000 f85d 	bl	8004258 <_sbrk_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	d123      	bne.n	80041ea <_malloc_r+0x92>
 80041a2:	230c      	movs	r3, #12
 80041a4:	4630      	mov	r0, r6
 80041a6:	6033      	str	r3, [r6, #0]
 80041a8:	f000 f86c 	bl	8004284 <__malloc_unlock>
 80041ac:	e7e3      	b.n	8004176 <_malloc_r+0x1e>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	1b5b      	subs	r3, r3, r5
 80041b2:	d417      	bmi.n	80041e4 <_malloc_r+0x8c>
 80041b4:	2b0b      	cmp	r3, #11
 80041b6:	d903      	bls.n	80041c0 <_malloc_r+0x68>
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	441c      	add	r4, r3
 80041bc:	6025      	str	r5, [r4, #0]
 80041be:	e004      	b.n	80041ca <_malloc_r+0x72>
 80041c0:	6863      	ldr	r3, [r4, #4]
 80041c2:	42a2      	cmp	r2, r4
 80041c4:	bf0c      	ite	eq
 80041c6:	600b      	streq	r3, [r1, #0]
 80041c8:	6053      	strne	r3, [r2, #4]
 80041ca:	4630      	mov	r0, r6
 80041cc:	f000 f85a 	bl	8004284 <__malloc_unlock>
 80041d0:	f104 000b 	add.w	r0, r4, #11
 80041d4:	1d23      	adds	r3, r4, #4
 80041d6:	f020 0007 	bic.w	r0, r0, #7
 80041da:	1ac2      	subs	r2, r0, r3
 80041dc:	d0cc      	beq.n	8004178 <_malloc_r+0x20>
 80041de:	1a1b      	subs	r3, r3, r0
 80041e0:	50a3      	str	r3, [r4, r2]
 80041e2:	e7c9      	b.n	8004178 <_malloc_r+0x20>
 80041e4:	4622      	mov	r2, r4
 80041e6:	6864      	ldr	r4, [r4, #4]
 80041e8:	e7cc      	b.n	8004184 <_malloc_r+0x2c>
 80041ea:	1cc4      	adds	r4, r0, #3
 80041ec:	f024 0403 	bic.w	r4, r4, #3
 80041f0:	42a0      	cmp	r0, r4
 80041f2:	d0e3      	beq.n	80041bc <_malloc_r+0x64>
 80041f4:	1a21      	subs	r1, r4, r0
 80041f6:	4630      	mov	r0, r6
 80041f8:	f000 f82e 	bl	8004258 <_sbrk_r>
 80041fc:	3001      	adds	r0, #1
 80041fe:	d1dd      	bne.n	80041bc <_malloc_r+0x64>
 8004200:	e7cf      	b.n	80041a2 <_malloc_r+0x4a>
 8004202:	bf00      	nop
 8004204:	20000138 	.word	0x20000138
 8004208:	2000013c 	.word	0x2000013c

0800420c <_realloc_r>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	4607      	mov	r7, r0
 8004210:	4614      	mov	r4, r2
 8004212:	460e      	mov	r6, r1
 8004214:	b921      	cbnz	r1, 8004220 <_realloc_r+0x14>
 8004216:	4611      	mov	r1, r2
 8004218:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800421c:	f7ff bf9c 	b.w	8004158 <_malloc_r>
 8004220:	b922      	cbnz	r2, 800422c <_realloc_r+0x20>
 8004222:	f7ff ff4d 	bl	80040c0 <_free_r>
 8004226:	4625      	mov	r5, r4
 8004228:	4628      	mov	r0, r5
 800422a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800422c:	f000 f830 	bl	8004290 <_malloc_usable_size_r>
 8004230:	42a0      	cmp	r0, r4
 8004232:	d20f      	bcs.n	8004254 <_realloc_r+0x48>
 8004234:	4621      	mov	r1, r4
 8004236:	4638      	mov	r0, r7
 8004238:	f7ff ff8e 	bl	8004158 <_malloc_r>
 800423c:	4605      	mov	r5, r0
 800423e:	2800      	cmp	r0, #0
 8004240:	d0f2      	beq.n	8004228 <_realloc_r+0x1c>
 8004242:	4631      	mov	r1, r6
 8004244:	4622      	mov	r2, r4
 8004246:	f7ff ff13 	bl	8004070 <memcpy>
 800424a:	4631      	mov	r1, r6
 800424c:	4638      	mov	r0, r7
 800424e:	f7ff ff37 	bl	80040c0 <_free_r>
 8004252:	e7e9      	b.n	8004228 <_realloc_r+0x1c>
 8004254:	4635      	mov	r5, r6
 8004256:	e7e7      	b.n	8004228 <_realloc_r+0x1c>

08004258 <_sbrk_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	2300      	movs	r3, #0
 800425c:	4d05      	ldr	r5, [pc, #20]	; (8004274 <_sbrk_r+0x1c>)
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	f7fd fab0 	bl	80017c8 <_sbrk>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_sbrk_r+0x1a>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_sbrk_r+0x1a>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	20000538 	.word	0x20000538

08004278 <__malloc_lock>:
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <__malloc_lock+0x8>)
 800427a:	f000 b811 	b.w	80042a0 <__retarget_lock_acquire_recursive>
 800427e:	bf00      	nop
 8004280:	20000540 	.word	0x20000540

08004284 <__malloc_unlock>:
 8004284:	4801      	ldr	r0, [pc, #4]	; (800428c <__malloc_unlock+0x8>)
 8004286:	f000 b80c 	b.w	80042a2 <__retarget_lock_release_recursive>
 800428a:	bf00      	nop
 800428c:	20000540 	.word	0x20000540

08004290 <_malloc_usable_size_r>:
 8004290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004294:	1f18      	subs	r0, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	bfbc      	itt	lt
 800429a:	580b      	ldrlt	r3, [r1, r0]
 800429c:	18c0      	addlt	r0, r0, r3
 800429e:	4770      	bx	lr

080042a0 <__retarget_lock_acquire_recursive>:
 80042a0:	4770      	bx	lr

080042a2 <__retarget_lock_release_recursive>:
 80042a2:	4770      	bx	lr

080042a4 <_init>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	bf00      	nop
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr

080042b0 <_fini>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr
