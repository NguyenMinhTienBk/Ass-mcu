/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "button.h"
#include "fsm_automatic_1.h"
#include "fsm_automatic_2.h"
#include <fsm_mode.h>
#include <fsm_mode_Led7Seg.h>
#include <software_timer.h>
#include "led_display.h"
#include "pedestrian.h"
#include <stdint.h>
#include <stdio.h>
#include "scheduler.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Buzzer_On(){
	for (int i = 0; i < 255; i++ ){
//		if (timer6_flag == 1){
			i += 255 / (timegreen + timeyellow);
			if (i > 255) i = 255;
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,i);
			HAL_Delay(1000);
//			setTimer6(1000);
//		}
	}
}

int counter_Pedes_On = 0;
char str[50];
void pedestrian_cramble(){
	if (isButtonflag(but3) == 1){
		SetPedesGreen();
		 counter_Pedes_On = 3 * Ncycle_Pe_off;
//		for (int i = 0; i < Ncycle_Pe_off * 3; i++ ){
//			switch (status_ver){
//			case AUTO_RED:
//				SetPedesGreen();
//				break;
//			case AUTO_GREEN:
//				SetPedesRed();
//				break;
//			case AUTO_YELLOW:
//				SetPedesRed();
//			default:
//				break;
//			}
//		}
		while(1){
			if (timer6_flag == 1){
				HAL_UART_Transmit(&huart2, str, sprintf(str, "status_ver: %d -  counter_Pedes_On: %d - led12: %d\r\n",status_ver,counter_Pedes_On,led12), 1000);
				switch (status_ver){
					case AUTO_RED:
						SetPedesGreen();
						break;
					case AUTO_GREEN:
						SetPedesRed();
						Buzzer_On();
						break;
					case AUTO_YELLOW:
						SetPedesRed();
						break;
					default:
						break;
				}
//				HAL_Delay(timeTimer(led12));
				counter_Pedes_On--;
				setTimer6(timeTimer(led12));
			}
			if (counter_Pedes_On < 0){
				SetPedesOff();
				break;
			}
		}
//		if (status_ver == AUTO_GREEN || status_ver == AUTO_YELLOW){
//			SetPedesRed();
//		} else if (status_ver == AUTO_RED) {
//			SetPedesGreen();
//		}

	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
//HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

  status_mode = INIT;

  setTimer1(1000);
  setTimer2(1000);
  setTimer3(1000);
  setTimer4(1000);
  setTimer5(1000);
  setTimer6(1000);

  SCH_Init();
  SCH_Add_Task(timerRun, 0, 10);
  SCH_Add_Task(button_reading, 0, 10);
  SCH_Add_Task(fsm_mode_run, 0 , 10);
  SCH_Add_Task(fsm_automatic_1_run, 0 , 10);
  SCH_Add_Task(fsm_automatic_2_run, 0 , 10);
// // SCH_Add_Task(fsm_mode_led7seg, 0, 10);
  SCH_Add_Task(pedestrian_cramble, 0, 10);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
//	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,10);
//	HAL_Delay(1000);
//	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,255);
//	HAL_Delay(10000);
//	  HAL_Delay(10000);
//	  pedestrian_cramble();
//	  fsm_mode_run();
//	  fsm_automatic_1_run();
//	  fsm_automatic_2_run();
//	  if (timer5_flag == 1){
//		 HAL_UART_Transmit(&huart2, str, sprintf(str, "%s%d#","!7SEG:",led12), 1000);
//		 setTimer5(100);
//	  }
////	  HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, 1);
////	  HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, 0);
//	  HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, 1);
//	  HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, 0);
//	  HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, 1);
//	  HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, 0);
//	  HAL_Delay(2000);
////	  HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, 0);
////	  HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, 1);
//	  HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, 0);
//	  HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, 1);
//	  HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, 0);
//	  HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, 1);
//	  HAL_Delay(2000);
////	  HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, 1);
////	  HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, 1);
//	  HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, 1);
//	  HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, 1);
//	  HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, 1);
//	  HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, 1);
//	  HAL_Delay(2000);
////	  HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, 0);
////	  HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, 0);
//	  HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, 0);
//	  HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, 0);
//	  HAL_GPIO_WritePin(P_LIGHT_A_GPIO_Port, P_LIGHT_A_Pin, 0);
//	  HAL_GPIO_WritePin(P_LIGHT_B_GPIO_Port, P_LIGHT_B_Pin, 0);
//	  HAL_Delay(2000);
//	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,10);
//	  HAL_Delay(1000);
//	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,100);
//	  HAL_Delay(1000);

//	  fsm_mode_led7seg();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 63999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 63;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LIGHT1_B_Pin|LIGHT1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_P_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_P_Pin|BUTTON_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LIGHT2_A_Pin */
  GPIO_InitStruct.Pin = LIGHT2_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LIGHT2_A_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LIGHT2_B_Pin P_LIGHT_A_Pin P_LIGHT_B_Pin */
  GPIO_InitStruct.Pin = LIGHT2_B_Pin|P_LIGHT_A_Pin|P_LIGHT_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LIGHT1_B_Pin LIGHT1_A_Pin */
  GPIO_InitStruct.Pin = LIGHT1_B_Pin|LIGHT1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
